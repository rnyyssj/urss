// ▇▇▇▇▇▇▇▇▇ ⚙️ CONFIGURACIÓN DEL HOST ▇▇▇▇▇▇▇▇▇


// 📝 NOMBRE DEL HOST
var NombreHost = '☭⭐ REAL SOCCER 4vs4 ⭐☭ ▏ ⭐ URSS 🔴';
// Definimos el nombre del host (dentro de las comillas)


// 👁️ VISIBILIDAD DEL HOST 
var VisibilidadDelHost = true; 
// La sala es pública si está en "true", privada si está en "false"


// 👥 CANTIDAD MÁXIMA DE JUGADORES
var CantidadDeJugadores = 24; 
// Cantidad máxima de jugadores que permitirás ingresar a tu Host. Puedes elegir entre 1 y 30 jugadores


// 🔄 REINICIAR STATS
var ReiniciarStats = "No"; // Cambia a "Si" si querés reiniciar las estadísticas al Iniciar la sala.


// 🔒 CONTRASEÑA DEL HOST
var PasswordDelHost = null;
// Contraseña para acceder al Host (dejar null si no quieres colocarle una contraseña). Si quieres una contraseña, reemplaza null y coloca la contraseña entre comillas (Ejemplo: var PasswordDelHost = "123";)

// ▇▇▇▇▇▇▇▇▇ 👑 ADMINISTRACIÓN DEL HOST 🔑 ▇▇▇▇▇▇▇▇▇

// 🔑 CONTRASEÑA PARA SER ADMINISTRADOR DEL HOST
var ClaveParaSerAdmin = "!admin2335"; 
// Clave para ser administrador. Pon la contraseña entre comillas.


// 👑 ADMINISTRADORES DEL HOST
var AdministradoresDelHost = ["sae itoshi"];
// Coloca los nicknames de los administradores. EJEMPLO: var AdministradoresDelHost = ["Messi10", "Neymar #11 PSG", "Ronaldinho BRA"];

// 🔐 CONTRASEÑA PARA ADMINISTRADORES
var contrasena = "rodwellH";
// Contraseña para reservar el espacio a los Administradores


// ▇▇▇▇▇▇▇▇▇ ⚙️ CONFIGURACIÓN DEL BOT 🤖 ▇▇▇▇▇▇▇▇▇

// 👀 VISIBILIDAD DEL BOT 
var BotVisible = false; 
// Elige true si quieres que el bot sea visible como jugador o false para que esté oculto.


// 📛 NOMBRE DEL BOT
var NombreBot = "🚩 Árbitro Bot 🤖"; 
// Define el nombre del bot.


// 🟢 ESTADO DEL BOT
var StatusBot = "afk"; // Puede ser "activo" o "afk"

// ▇▇▇▇▇▇▇▇▇ ⚙️ CONFIGURACIÓN DEL JUEGO 🎮 ▇▇▇▇▇▇▇▇▇

// 🗺️ MAPA POR DEFECTO
var MapaPorDefecto = "Real Soccer"; 
// OPCIONES: Real Soccer, Entrenamiento, Campeones, Premios, RS Oveja, Penales Red, Penales Blue


// ⏱️ TIEMPO DE JUEGO
var TiempoDeJuego = 5;
// Duración por defecto de las partidas (En minutos)


// ⚽ LÍMITE DE GOLES
var LimiteDeGoles = 3;
// Limite de Goles por defecto



// ▇▇▇▇▇▇▇ 🎮 MODOS DE JUEGO  ▇▇▇▇▇▇▇


let autoBalanceEnabled = true; // true para ACTIVARLO - false para DESACTIVARLO | Equilibrar equipos en cantidad de jugadores

var cambioCami = true; // true para ACTIVARLO - false para DESACTIVARLO | Cambiar camisetas automáticamente cada vez que se reinicia un partido.

var powerShotMode = false; // true para ACTIVARLO - false para DESACTIVARLO | Activar el Disparo Potente (PowerShot)

var JabulaniMode = false; // true para ACTIVARLO - false para DESACTIVARLO | Activar el Disparo Potente (PowerShot) con comba

var combaMode = false; // true para ACTIVARLO - false para DESACTIVARLO | Activar sólo la Comba (cada vez que se patea la pelota)

var GolDeOroActivado = false; // true para ACTIVARLO - false para DESACTIVARLO | Activar Gol de Oro

var FairPlayActivado = false; // true para ACTIVARLO - false para DESACTIVARLO | Modo FairPlay

let ganasigueEnabled = true; // true para ACTIVARLO - false para DESACTIVARLO | Modo Gana Sigue

let modoJueganTodos = false; // true para ACTIVARLO - false para DESACTIVARLO | Modo Juegan Todos

let modoJueganAlgunos = false; // true para ACTIVARLO - false para DESACTIVARLO |Modo Juegan Algunos

let maxPlayersPerTeam = 2; // Establecer el número máximo de jugadores por equipo (Modo Juegan Algunos)

let isAFKpaused = false; // Estado inicial del detector de AFK


// MODO AUTOMATIZADO

var automatizadoActivado = true; // true para ACTIVARLO - false para DESACTIVARLO | Modo Automatizado

var tiempoLimiteCambio = 30; // Tiempo límite (en segundos) para permitir cambiar mapa automaticamente

var tiempoEsperaCambio = 5000; // 5000 ms = 5 segundos de espera | Tiempo de demora en colocar el mapa.

var configuracionActual = null;

// LIMITES: GOLES Y TIEMPO (AUTOMATIZADO)

var TiempoEntrenamientoRealSoccer = 0;
var GolesEntrenamientoRealSoccer = 0;

var TiempoRealSoccer = 0;
var GolesRealSoccer = 0;


// ▇▇▇▇▇▇▇  📏 TAMAÑO DE LOS JUGADORES  ▇▇▇▇▇▇▇

var TamanoMinimoPermitido = 15;
// Tamaño mínimo permitido para un jugador 

var TamanoMaximoPermitido = 15;
// Tamaño máximo permitido para un jugador

var CantidadCambiarTamano = 1;
// Cantidad de veces que un jugador puede cambiar su tamaño por partido


// ▇▇▇▇▇▇▇ ⚽👕 CAMISETAS POR DEFECTO ⚽👕 ▇▇▇▇▇▇▇

// CAMISETA EQUIPO RED 🔴
var camisetaRed = "/colors red 66 FFA649 DE0019 B80017 820217";
var NombreEquipoRojo = "RED";

// CAMISETA EQUIPO BLUE 🔵
var camisetaBlue = "/colors blue 55 c1ff00 052647 005DB3 03B2F0";
var NombreEquipoAzul = "BLUE";



// ▇▇▇▇▇▇▇ 🚫 RESTRICCIONES DE ACCESO 🚫 ▇▇▇▇▇▇▇

// MÁXIMA CANTIDAD DE JUGADORES AFK PERMITIDOS
const LimiteMaximoDeJugadoresAFK = 4; 
// 🔒 Define el número máximo de jugadores AFK permitidos antes de activar la expulsión automática


// 🚫 MAXIMO DE JUGADORES PERMITIDOS CON LA MISMA IP
var MaximoJugadoresPorIp = 2;
// Define el número máximo de jugadores permitidos con la misma IP


// 🚫🌎 PAISES PROHIBIDOS
const PaisesProhibidos = [];
// Si un jugador es de alguno de estos países, será expulsado automáticamente al ingresar.
// EJEMPLO DE USO: const PaisesProhibidos = ["Argentina", "Brazil", "Chile"];
 

// 🚫📶 IPS BANEADAS
let IpPlayers = []; // Añade entre comillas las Ips de los jugadores que quieras prohibir su ingreso. EJEMPLO: let IpPlayers = ["123.456.789", "987.654.321"];

var MensajeBaneoPorIp = "❌ El admin ha baneado tu IP 📶"


// ❌📛 NICKNAMES PROHIBIDOS
const NicknamesPROHIBIDOS = ["@everyone", "@here", "@"]; 
// Lista de nicknames prohibidos
// Define los nicknames que no pueden ser utilizados

// ▇▇▇▇▇▇▇▇▇ 🌐 FUNCIONES DE DISCORD 🤖 ▇▇▇▇▇▇▇▇▇




// 🔥 Webhook para ANUNCIAR que has CREADO UNA SALA. Reemplaza con tu propia URL de webhook.
var AnuncioHostAbierto = "https://discord.com/api/webhooks/1070076692812529734/9_SrHHjFWE9hIyx2hwf0GEwJAvykksbaAmrnzGqolg2qKAkY2P7wdf-qtnloYZaxLBQ6";
var MensajeHostAbierto = 
``;
var TagHostAbierto = "@here"; //  Dejar "@here" o Colocar el "ID del Rol de Discord" al que quieres avisarle que creaste Host

// 🎥 Webhook para GRABACIONES y RESÚMENES de las Partidas jugadas. Reemplaza con tu propia URL de webhook.
const WebhookGrabaciones = "https://discord.com/api/webhooks/1070076605726208090/Mdh5oP4Faqd514OC9-2dUuIn33_9pZ4gbzn8Kdjk5iKWgfMZg2tr_apoIJp6reDTLQ0K";


// 📂 Link del servidor de Discord donde se subirán las GRABACIONES DE LAS PARTIDAS
const GrabacionesDiscord = "https://discord.gg/tdyjNxrqhE";


// 📞 Webhook para recibir el mensaje que han llamado a los Administradores. Reemplaza con tu propia URL de webhook.
var WebhookParaLlamarAdmins = "https://discord.com/api/webhooks/1070424756882514061/-PtkQ3jBaBnWIx2dokggBL3ug6tsaBTMtE5TBcPqHLiVQcTlrcmHsHo3uAC42UiFDIjH";


// 👮‍ Rol de Admin en Discord que se quiere llamar
var RolAdminHost = "@here"; // Dejar '@here' o colocar el ID del rol de Discord que se quiere llamar
var tiempoEsperaAdminsEnMinutos = 2;  // CANTIDAD DE MINUTOS A ESPERAR PARA REALIZAR UNA NUEVA LLAMADA A LOS ADMINS


// 🚫 Webhook para anunciar los KICKS y BANS de la sala. Reemplaza con tu propia URL de webhook.
const AnuncioKicksBans = "https://discord.com/api/webhooks/1374079649037942884/jVptFB7C7ai5gcYolkkvkBrd3sFEfdBpOApo_EqYgfsbqrugEftSaeUhndHBEJMgpYvD";


// 💬 Webhook para ver los MENSAJES DE LOS JUGADORES. Reemplaza con tu propia URL de webhook.
var webhookMensajesJugadores  = "https://discord.com/api/webhooks/1070076302087966771/HysNd0eUIZ69Kg2tI04QznyFEz98KnAzuzK0ubUP86ejnjwhEV3bCrvi1ZykBVgNrQN9";



// 🎟️ Webhook para enviar los INGRESOS y SALIDAS de los jugadores a Discord
var webhookBoletero = "https://discord.com/api/webhooks/1070076512180645898/jOB3w94aofUoNSx8MUvJWWJS0ubF-x5vEVL3-AXJT0Q1Zf1-ODqSbOoIfx4IoWQZEds9";


// 💬 Webhook para enviar estadísticas a Discord
var webhookEstadisticasJugadores = "https://discord.com/api/webhooks/1374079906341851146/GZYheAhPF844g77D92cwaVE4CLWBa7rlf6Frk-cNfBQdrNeRcGfSIqfyLvwj4P1zNx3s";



// 🖊️ Webhook para firmar en partidos oficiales. Reemplaza con tu propia URL de webhook.
var WebhookParaFirmar = "";


// 🔒 Webhook para enviar la IP de un jugador cuando se retire de la sala.
var webhookIPJugadores  = "https://discord.com/api/webhooks/1070076398158499920/7d_immUuDK3NKRK3znpCG7Elb0TNfHlKlI9--Xx5XHI1JLvltiTA9a-wMpamt4ZAbNHk";



// ▇▇▇▇▇▇▇▇ 📢 ANUNCIOS Y MENSAJE DE BIENVENIDA ▇▇▇▇▇▇▇▇▇▇

// ════════════════════  🎉 MENSAJE DE BIENVENIDA ════════════════════ 
// (Se envía al jugador que recién ingresa al host)

var MensajeDeBienvenida = `
Para ver estadísticas: !me, !stats ID, !goleadores, !asistidores, !vallas-invictas, !mvp, !racha-historica, !racha-actual, !viciosos, !ganadores, !presencias
Puedes utilizar el comando: !memide | AVATAR ANIMADO CON: !avatar 😈,👿  | !avatar HO,LA
`; 
// Escribe el mensaje de bienvenida que quieras (Dentro de las comillas)


// 🎨 PERSONALIZACIÓN DEL MENSAJE DE BIENVENIDA
var colormensaje = "FF69B4";

var TipoDeLetra = "bold"; 
// Puedes cambiar esta opción por: "normal", "bold", "italic", "small", "small-bold", y "small-italic"


// ════════════════════  📢 ANUNCIO 1 ════════════════════ 
// (Se envía cada vez que inicia el partido)

var Anuncio = "✨ Unite a nuestro servidor en Discord para maximizar tu experiencia: https://discord.gg/tdyjNxrqhE"; 
// Anuncio que viene por Defecto (Se envía a los 10 segundos del inicio de cada partido)


// ⏲️ TIEMPO DEL ANUNCIO
var AnuncioMinuto = 0; 
//  Representa el minuto del partido en el que se desea mostrar el anuncio.

var AnuncioSegundos = 10; 
// Representa los segundos en el minuto del partido en el que se desea mostrar el anuncio.

var TipoDeLetraAnuncio = "bold"; 
// Puedes cambiar esta opción por: "normal", "bold", "italic", "small", "small-bold", y "small-italic"


var ColorAnuncio = "FFFFFF"; 


// ════════════════════  📢 ANUNCIO 2 ════════════════════ 

var Anuncio2 = "🛑 Para expulsar a un jugador, utiliza el comando `!expulsar NúmeroID`. Para ver los IDs de los jugadores, escribe `#` en el chat. Ejemplo: `!expulsar 25` expulsará al jugador con el ID 25.";
// Anuncio 2 que viene por Defecto (Se envía a los 10 segundos del inicio de cada partido)

// ⏲️ TIEMPO DEL ANUNCIO 2
var Anuncio2Minuto = 0; 
//  Representa el minuto del partido en el que se desea mostrar el anuncio 2.

var Anuncio2Segundos = 40; 
// Representa los segundos en el minuto del partido en el que se desea mostrar el anuncio 2.

var TipoDeLetraAnuncio2 = "italic"; 
// Puedes cambiar esta opción por: "normal", "bold", "italic", "small", "small-bold", y "small-italic"

var ColorAnuncio2 = "CCFF00"; 


// ▇▇▇▇▇▇▇ 🛠️ CONFIGURACIÓN GENERAL ▇▇▇▇▇▇▇

// 👁️‍🗨️ MOSTRAR IPs A ADMINISTRADORES
var MostrarIps = "No"; 
// Cambia "Si" por "No" si no deseas mostrar las IPs a los administradores cuando un jugador se una a la sala

const ColocarJuntoAlNickname = ""; // Opciones disponibles: "ID", "Nivel" o "" (sin nada)


// ▇▇▇▇▇▇▇ 🗳️ SISTEMA DE VOTACIONES 🗳️ ▇▇▇▇▇▇▇

// Variable configurable para el porcentaje de votos requeridos

var PorcentajeDeVotosBan = 40; 
// Cambia este valor al porcentaje deseado (por ejemplo, 30 para 30% de los votos)

var PorcentajeDeVotosAdmin = 40; 
// Cambia este valor al porcentaje deseado (por ejemplo, 30 para 30% de los votos)


// ▇▇▇▇▇▇▇ ⏰ TIEMPO AFK  ▇▇▇▇▇▇▇


const SegundosPermitidosAFK = 15; // Establece el tiempo permitido en segundos para estar AFK (Cuando están en el Red o en el Blue)

const MinutosPermitidosAFK = 5;  // Establece el tiempo permitido en minutos para estar AFK (Cuando se encuentran Espectadores)


// ▇▇▇▇▇▇▇▇▇ 🌐👥 REDES SOCIALES ▇▇▇▇▇▇▇▇▇

const DiscordLink = "https://discord.gg/tdyjNxrqhE";	// Link de tu Servidor de Discord
const YoutubeLink = ""; 	// Link de tu canal de Youtube
const TwitchLink = "";	// Link de tu canal de Twitch


// ▇▇▇▇▇▇▇ 📍 UBICACIÓN DEL HOST ▇▇▇▇▇▇▇

	var UbicacionDelHost = "argentina"; 


	// ES LA UBICACIÓN EN LA QUE APARECERÁ TU HOST | Puedes reemplazar "argentina" por alguna de estas opciones.


	// OPCIONES DISPONIBLES:

// TU GEOLOCALIZACIÓN POR DEFECTO: myubication

		// AMÉRICA:

			// argentina, haxarg, uruguay, brasil, colombia, chile, mexico

			// bolivia, peru, paraguay, venezuela, costa rica, united states, canada

		// EUROPA:

			// france, spain, italy, germany, netherlands, portugal

			// croatia, macedonia, serbia, poland, ukraine, russia, marruecos, united kingdom, turkey

		
		// ASIA:

			// south korea, japan, china, vietnam, israel


// ▇▇▇▇▇▇▇ BANDERA DEL HOST 🏳️ ▇▇▇▇▇▇▇


	var BanderaDelHost = 'Argentina';  // Elige el país con la bandera que quieres para tu Sala


// OPCIONES DISPONIBLES POR CONTINENTE:

// ÁFRICA:
	// Algeria, Angola, Benin, Botswana, BurkinaFaso, Burundi, Cameroon, CapeVerde, CentralAfricanRepublic, Chad, Comoros,
	// Congo, CongoTheDemocraticRepublicOfThe, CoteDIvoire, Djibouti, Egypt, EquatorialGuinea, Eritrea, Ethiopia, Gabon,
	// Gambia, Ghana, Guinea, GuineaBissau, Kenya, Lesotho, Liberia, LibyanArabJamahiriya, Madagascar, Malawi, Mali, Mauritania,
	// Mauritius, Morocco, Mozambique, Namibia, Niger, Nigeria, Rwanda, SaoTomeAndPrincipe, Senegal, Seychelles, SierraLeone,
	// Somalia, SouthAfrica, SouthSudan, Sudan, Swaziland, Tanzania, Togo, Tunisia, Uganda, Zambia, Zimbabwe

// AMÉRICA:
	// AntiguaAndBarbuda, Argentina, Aruba, Bahamas, Barbados, Belize, Bermuda, Bolivia, BonaireSaintEustatiusAndSaba, Brazil,
	// BritishIndianOceanTerritory, Canada, CaymanIslands, Chile, Colombia, CostaRica, Cuba, Curacao, Dominica, DominicanRepublic,
	// Ecuador, ElSalvador, FalklandIslandsMalvinas, FrenchGuiana, Grenada, Guadeloupe, Guatemala, Guyana, Haiti, Honduras,
	// Jamaica, Martinique, Mexico, Montserrat, Nicaragua, Panama, Paraguay, Peru, PuertoRico, SaintBarthelemy, SaintKittsAndNevis,
	// SaintLucia, SaintMartin, SaintPierreAndMiquelon, SaintVincentAndTheGrenadines, SintMaartenDutchPart, Suriname, TrinidadAndTobago,
	// TurksAndCaicosIslands, UnitedStates, UnitedStatesMinorOutlyingIslands, Uruguay, Venezuela, VirginIslandsBritish, VirginIslandsUS

// ASIA:
	// Afghanistan, Armenia, Azerbaijan, Bahrain, Bangladesh, Bhutan, Brunei, Cambodia, China, ChristmasIsland, CocosKeelingIslands,
	// HongKong, India, Indonesia, Iran, Iraq, Israel, Japan, Jordan, Kazakhstan, Kuwait, Kyrgyzstan, LaoPeoplesDemocraticRepublic,
	// Lebanon, Macao, Malaysia, Maldives, Mongolia, Myanmar, Nepal, NorthKorea, Oman, Pakistan, Palestine, Philippines, Qatar,
	// SaudiArabia, Singapore, SouthKorea, SriLanka, Syria, Taiwan, Tajikistan, Thailand, TimorLeste, Turkey, Turkmenistan,
	// UnitedArabEmirates, Uzbekistan, VietNam, Yemen

// EUROPA:
	// Albania, Andorra, Austria, Belarus, Belgium, BosniaAndHerzegovina, Bulgaria, Croatia, Cyprus, CzechRepublic, Denmark,
	// Estonia, FaroeIslands, Finland, France, Germany, Gibraltar, Greece, Greenland, Hungary, Iceland, Ireland, Italy, Kosovo,
	// Latvia, Liechtenstein, Lithuania, Luxembourg, MacedoniaTheFormerYugoslavRepublicOf, Malta, Moldova, Monaco, Montenegro,
	// Netherlands, Norway, Poland, Portugal, Romania, Russia, SanMarino, Serbia, Slovakia, Slovenia, Spain, SvalbardAndJanMayen,
	// Sweden, Switzerland, Ukraine, UnitedKingdom

// OCEANÍA:
	// Australia, Fiji, FrenchPolynesia, Guam, Kiribati, MarshallIslands, MicronesiaFederatedStatesOf, Nauru, NewCaledonia,
	// NewZealand, Niue, NorfolkIsland, Palau, PapuaNewGuinea, Pitcairn, Samoa, SolomonIslands, Tokelau, Tonga, Tuvalu, Vanuatu

// OTROS:
	// Haxball, Antarctica, Anguilla, Antarctica, Bermuda, BouvetIsland, BritishIndianOceanTerritory, HeardIslandAndMcDonaldIslands,
	// HolySeeVaticanCityState, IsleOfMan, Jersey, Mayotte, Monaco, Montserrat, SouthGeorgiaAndTheSouthSandwichIslands





//  ▇▇▇▇▇▇▇ 👤 ASIGNAR ROLES ▇▇▇▇▇▇▇


// Definiciones de colores
const ColorDelChatROL1 = 0xFFD700;
const ColorDelChatROL2 = 0xffffff;
const ColorDelChatROL3 = 0xffffff;
const ColorDelChatROL4 = 0xffffff;
const ColorDelChatROL5 = 0xffffff;
const ColorDelChatROL6 = 0xffffff;
const ColorDelChatROL7 = 0xffffff;
const adminChatColor = 0xffdb72;
const RedChatColor = 0xff6363;
const BlueChatColor = 0x63f2ff;
const RedTeamChatColor = 0xFD2C2D;
const BlueTeamChatColor = 0x18fde8;
const SpectChatColor = 0xD3D3D3; // Color del chat para espectadores

// Listas de nombres de usuario por rol
const NickNamesRol1 = []; // Añadir nombres de usuarios para ROL1 entre comillas | EJEMPLO: const NickNamesRol1 = ["Messi", "Neymar"];
const NickNamesRol2 = []; // Añadir nombres de usuarios para ROL2 entre comillas | EJEMPLO: const NickNamesRol2 = ["ROMAN #10", "Martín Palermo 9"];
const NickNamesRol3 = []; // Añadir nombres de usuarios para ROL3 entre comillas | EJEMPLO: const NickNamesRol3 = ["Burrito Ortega"];
const NickNamesRol4 = []; // Añadir nombres de usuarios para ROL4 entre comillas
const NickNamesRol5 = []; // Añadir nombres de usuarios para ROL5 entre comillas
const NickNamesRol6 = []; // Añadir nombres de usuarios para ROL5 entre comillas
const NickNamesRol7 = []; // Añadir nombres de usuarios para ROL5 entre comillas

// Nombres de roles
const NombreROL1 = "🗦👑🗧𝗢𝗪𝗡𝗘𝗥";
const NombreROL2 = "🤝 CO-OWNER";
const NombreROL3 = "🌐 HOSTER";
const NombreROL4 = "🛠️ AYUDANTE";
const NombreROL5 = "🔧 SUBAYUDANTE";
const NombreROL6 = "🧉 COLABORADOR";
const NombreROL7 = "💡 ASISTENTE";
const NombreROLAdmin = "👑 ADMIN";
const NombreROLRed = "🔴";
const NombreROLBlue = "🔵";
const NombreROLSpect = "👁️";

const RoleAttributes = {
    [NombreROL1]: { style: "bold", sound: 2 },
    [NombreROL2]: { style: "bold", sound: 2 },
    [NombreROL3]: { style: "normal", sound: 1 },
    [NombreROL4]: { style: "normal", sound: 1 },
    [NombreROL5]: { style: "normal", sound: 1 },
    [NombreROL6]: { style: "normal", sound: 1 },
    [NombreROL7]: { style: "normal", sound: 1 },
    [NombreROLAdmin]: { style: "normal", sound: 1 },
    [NombreROLRed]: { style: "normal", sound: 1 },
    [NombreROLBlue]: { style: "normal", sound: 1 },
    [NombreROLSpect]: { style: "normal", sound: 0 }
};


//  ▇▇▇▇▇▇▇  COOLDOWN CHAT ▇▇▇▇▇▇▇

let MESSAGE_COOLDOWN = 5000; // 5 segundos de cooldown
let SPAM_LIMIT = 5; // Mensajes permitidos antes de activar el cooldown
let COOLDOWN_TIME = 10000; // 10 segundos de cooldown después de enviar muchos mensajes
let cooldownEnabled = true; // Cooldown habilitado por defecto
let KICK_THRESHOLD = 7; // Número de advertencias antes de kickear por spam

// Variables para rastrear mensajes y cooldowns
let messageTimestamps = {};
let playerCooldowns = {};
let spamWarnings = {}; // Contador de advertencias por spam



//  ▇▇▇▇▇▇▇  COOLDOWN PARA EL USO DE COMANDOS ▇▇▇▇▇▇▇
// COOLDOWN PARA USO DE COMANDOS
let lastCommandTime = {}; // Objeto para registrar el tiempo del último comando enviado por cada jugador
const commandCooldown = 5000; // Tiempo de espera en milisegundos (5 segundos)

// COOLDOWN PARA COMANDOS
const cooldowns = {};
const COOLDOWN_TIEMPO = 5 * 1000; // 5 segundos


//  ▇▇▇▇▇▇▇ ⚽ PELOTAS ⚽ ▇▇▇▇▇▇▇

var PelotaRS = "FFFFFF"			// COLOR DE LA PELOTA DE REAL SOCCER
var PelotaRS_PowerShot = "FF4500"	// COLOR DE LA PELOTA DE REAL SOCCER con POWERSHOT ACTIVADO
var PotenciaPowerShotRS = 2 //  Referencia: La potencia sin PowerShot es 0.5

var PelotaFutsal = "FFFFFF"			// COLOR DE LA PELOTA DE REAL SOCCER
var PelotaFutsal_PowerShot = "FF4500"	// COLOR DE LA PELOTA DE REAL SOCCER con POWERSHOT ACTIVADO
var PotenciaPowerShot = 2.5  // Referencia: La Potencia sin PowerShot es 1.5
var TipoPelotaFutsal = "oveja";  // Opciones: "bazinga", "oveja", "glh"



// ▇▇▇▇▇▇▇  PARA TORNEOS  ▇▇▇▇▇▇▇

var ChallongeLink = 'challonge.com/es/' // Link de tu torneo
var regla1 = '⯌ 4 vs 4'
var regla2 = '⯌ Equipo que gana el partido, continua jugando. 🏆'
var regla3 = '⯌ Dos jugadores ingresan por orden de Espectadores. Los otros dos restantes, los puede elegir.'
var regla4 = '⯌ El equipo ganador le toca el país con más probabilidades de ganar.'
var regla5 = '⯌ Si empatan, salen ambos equipos. Y los primeros cuatro jugadores de la lista de Espectadores pasan a ser capitanes, 2 en el Team Red y los otros 2 en el Team Blue.'



//  ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇  ADMINS NO OFICIALES ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇

var kickBanAttempts = {}; // Objeto para rastrear intentos de kick y ban
var maxAttempts = 1; // Número máximo de intentos permitidos en el intervalo de tiempo
var interval = 30000; // Intervalo de tiempo en milisegundos (30 segundos)
var alertThreshold = 2; // Umbral de alerta después del segundo intento
var cooldownTime = 60000; // Tiempo de cooldown en milisegundos 
var cooldownActive = {}; // Objeto para rastrear el estado de cooldown de cada administrador


//  ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇  CONFIGURACIÓN AVANZADA 🚀 ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇

// Define una variable global para llevar el seguimiento de los minutos jugados por cada jugador
let playerMinutesPlayed = JSON.parse(localStorage.getItem('playerMinutesPlayed')) || {};

// Define una variable global para llevar el seguimiento del tiempo que un jugador ha estado siendo el arquero
let playerGoalkeeperTime = JSON.parse(localStorage.getItem('playerGoalkeeperTime')) || {};




// ▇▇▇▇▇▇▇ ⚽👕 AÑADIR CAMISETAS DE EQUIPOS ⚽👕 ▇▇▇▇▇▇▇

var camisetasEquipos = {
    // RIVER PLATE
    "riv/titular/red": {
        codigo: "/colors red 30 231F20 FFFFFF EE1B2C FFFFFF",
        nombreEquipo: "RIVER PLATE"
    },
    "riv/titular/blue": {
        codigo: "/colors blue 30 231F20 FFFFFF DA291C FFFFFF",
        nombreEquipo: "RIVER PLATE"
    },
    "riv/alternativa/red": {
        codigo: "/colors red 64 FFFFFF F0232F 312B31 281F22",
        nombreEquipo: "RIVER PLATE"
    },
    "riv/alternativa/blue": {
        codigo: "/colors blue 64 FFFFFF F0232F 312B31 281F22",
        nombreEquipo: "RIVER PLATE"
    },
    "riv/tercera/red": {
        codigo: "/colors red 180 271D1C F71E26 F0F1F5 F71E26",
        nombreEquipo: "RIVER PLATE"
    },
    "riv/tercera/blue": {
        codigo: "/colors blue 180 271D1C F71E26 F0F1F5 F71E26",
        nombreEquipo: "RIVER PLATE"
    },

    // BOCA JUNIORS
    "boc/titular/red": {
        codigo: "/colors red 90 FFFFFF 033F86 FAB900 033F86",
        nombreEquipo: "BOCA JUNIORS"
    },
    "boc/titular/blue": {
        codigo: "/colors blue 90 FFFFFF 033F86 FAB900 033F86",
        nombreEquipo: "BOCA JUNIORS"
    },
    "boc/alternativa/red": {
        codigo: "/colors red 134 00448B C9C5D3 D4CEDA D4CEDA",
        nombreEquipo: "BOCA JUNIORS"
    },
    "boc/alternativa/blue": {
        codigo: "/colors blue 134 00448B C9C5D3 D4CEDA D4CEDA",
        nombreEquipo: "BOCA JUNIORS"
    },
    "boc/tercera/red": {
        codigo: "/colors red 118 142090 EBE12F",
        nombreEquipo: "BOCA JUNIORS"
    },
    "boc/tercera/blue": {
        codigo: "/colors blue 118 142090 EBE12F",
        nombreEquipo: "BOCA JUNIORS"
    },

    // SAN LORENZO
    "slo/titular/red": {
        codigo: "/colors red 180 FFFFFF E9282D 1D3B56 E9282D",
        nombreEquipo: "SAN LORENZO"
    },
    "slo/titular/blue": {
        codigo: "/colors blue 180 FFFFFF E9282D 1D3B56 E9282D",
        nombreEquipo: "SAN LORENZO"
    },
    "slo/alternativa/red": {
        codigo: "/colors red 90 1E2631 F2F3F7 EB212F 1B3146",
        nombreEquipo: "SAN LORENZO"
    },
    "slo/alternativa/blue": {
        codigo: "/colors blue 90 1E2631 F2F3F7 EB212F 1B3146",
        nombreEquipo: "SAN LORENZO"
    },
    "slo/tercera/red": {
        codigo: "/colors red 0 172025 BAC3C8 BAC3C8 D50013",
        nombreEquipo: "SAN LORENZO"
    },
    "slo/tercera/blue": {
        codigo: "/colors blue 0 172025 BAC3C8 BAC3C8 D50013",
        nombreEquipo: "SAN LORENZO"
    },

    // RACING CLUB
    "rac/titular/red": {
        codigo: "/colors red 180 002942 00A5E3 FFFFFF 00A5E3",
        nombreEquipo: "RACING CLUB"
    },
    "rac/titular/blue": {
        codigo: "/colors blue 180 002942 00A5E3 FFFFFF 00A5E3",
        nombreEquipo: "RACING CLUB"
    },
    "rac/alternativa/red": {
        codigo: "/colors red 180 FFFFFF 0E273B 1DA3DD 0E273B",
        nombreEquipo: "RACING CLUB"
    },
    "rac/alternativa/blue": {
        codigo: "/colors blue 180 FFFFFF 0E273B 1DA3DD 0E273B",
        nombreEquipo: "RACING CLUB"
    },
    "rac/tercera/red": {
        codigo: "/colors red 66 FFFFFF 019BDB 0F2A3D 0F2A3D",
        nombreEquipo: "RACING CLUB"
    },
    "rac/tercera/blue": {
        codigo: "/colors blue 66 FFFFFF 019BDB 0F2A3D 0F2A3D",
        nombreEquipo: "RACING CLUB"
    },

    // INDEPENDIENTE
    "ind/titular/red": {
        codigo: "/colors red 60 FFFFFF EC1C24",
        nombreEquipo: "INDEPENDIENTE"
    },
    "ind/titular/blue": {
        codigo: "/colors blue 60 FFFFFF EC1C24",
        nombreEquipo: "INDEPENDIENTE"
    },
    "ind/alternativa/red": {
        codigo: "/colors red 90 1D245C 002554 FFFFFF FFFFFF",
        nombreEquipo: "INDEPENDIENTE"
    },
    "ind/alternativa/blue": {
        codigo: "/colors blue 90 1D245C 002554 FFFFFF FFFFFF",
        nombreEquipo: "INDEPENDIENTE"
    },
    // ALDOSIVI
    "ald/titular/red": {
        codigo: "/colors red 180 F5CF00 3E984C F5CF00",
        nombreEquipo: "ALDOSIVI"
    },
    "ald/titular/blue": {
        codigo: "/colors blue 180 F5CF00 3E984C F5CF00",
        nombreEquipo: "ALDOSIVI"
    },
    "ald/alternativa/red": {
        codigo: "/colors red 90 F8F232 B7BBC6 AAAEB7",
        nombreEquipo: "ALDOSIVI"
    },
    "ald/alternativa/blue": {
        codigo: "/colors blue 90 F8F232 B7BBC6 AAAEB7",
        nombreEquipo: "ALDOSIVI"
    },
    "ald/titular/red/2020": {
        codigo: "/colors red 180 F8F232 0E9E59 F8F232",
        nombreEquipo: "ALDOSIVI"
    },
    "ald/titular/blue/2020": {
        codigo: "/colors blue 180 F8F232 0E9E59 F8F232",
        nombreEquipo: "ALDOSIVI"
    },

    // GIMNASIA (LP)
    "gim/titular/red": {
        codigo: "/colors red 90 00AFEF 12175E FFFFFF",
        nombreEquipo: "GIMNASIA (LP)"
    },
    "gim/titular/blue": {
        codigo: "/colors blue 90 00AFEF 12175E FFFFFF",
        nombreEquipo: "GIMNASIA (LP)"
    },
    "gim/alternativa/red": {
        codigo: "/colors red 90 1A264F 022C94",
        nombreEquipo: "GIMNASIA (LP)"
    },
    "gim/alternativa/blue": {
        codigo: "/colors blue 90 1A264F 022C94",
        nombreEquipo: "GIMNASIA (LP)"
    },
    "gim/tercera/red": {
        codigo: "/colors red 90 4B4D3F 221F3A 4B4D3F",
        nombreEquipo: "GIMNASIA (LP)"
    },
    "gim/tercera/blue": {
        codigo: "/colors blue 90 4B4D3F 221F3A 4B4D3F",
        nombreEquipo: "GIMNASIA (LP)"
    },
    "gim/alternativa/clasica/red": {
        codigo: "/colors red 90 202743 FFFFFF 202743",
        nombreEquipo: "GIMNASIA"
    },
    "gim/alternativa/clasica/blue": {
        codigo: "/colors blue 90 202743 FFFFFF 202743",
        nombreEquipo: "GIMNASIA"
    },

    // NEWELL'S OLD BOYS
    "nob/titular/red": {
        codigo: "/colors red 0 EE1D23 000000",
        nombreEquipo: "NEWELLS"
    },
    "nob/titular/blue": {
        codigo: "/colors blue 0 EE1D23 000000",
        nombreEquipo: "NEWELLS"
    },
    "nob/alternativa/red": {
        codigo: "/colors red 90 D30022 222222 F3F7FA",
        nombreEquipo: "NEWELLS"
    },
    "nob/alternativa/blue": {
        codigo: "/colors blue 90 D30022 222222 F3F7FA",
        nombreEquipo: "NEWELLS"
    },
    "nob/tercera/red": {
        codigo: "/colors red 90 191919 D41831 D41831",
        nombreEquipo: "NEWELLS"
    },
    "nob/tercera/blue": {
        codigo: "/colors blue 90 191919 D41831 D41831",
        nombreEquipo: "NEWELLS"
    },

    // ROSARIO CENTRAL
    "cen/titular/red": {
        codigo: "/colors red 180 FCD828 144178 FCD828",
        nombreEquipo: "ROSARIO CENTRAL"
    },
    "cen/titular/blue": {
        codigo: "/colors blue 180 FCD828 144178 FCD828",
        nombreEquipo: "ROSARIO CENTRAL"
    },
    "cen/alternativa/red": {
        codigo: "/colors red 180 EBC800 FFFFFF EBC800",
        nombreEquipo: "ROSARIO CENTRAL"
    },
    "cen/alternativa/blue": {
        codigo: "/colors blue 180 EBC800 FFFFFF EBC800",
        nombreEquipo: "ROSARIO CENTRAL"
    },
    "cen/tercera/red": {
        codigo: "/colors red 121 006B8C 0386CE 02B1DC",
        nombreEquipo: "ROSARIO CENTRAL"
    },
    "cen/tercera/blue": {
        codigo: "/colors blue 121 006B8C 0386CE 02B1DC",
        nombreEquipo: "ROSARIO CENTRAL"
    },

    // DEFENSA Y JUSTICIA
    "dyj/titular/red": {
        codigo: "/colors red 90 019B5F FDE101 FDE101",
        nombreEquipo: "DEFENSA Y JUSTICIA"
    },
    "dyj/titular/blue": {
        codigo: "/colors blue 90 019B5F FDE101 FDE101",
        nombreEquipo: "DEFENSA Y JUSTICIA"
    },
    "dyj/alternativa/red": {
        codigo: "/colors red 65 AEE264 FFFFFF AEE264",
        nombreEquipo: "DEFENSA Y JUSTICIA"
    },
    "dyj/alternativa/blue": {
        codigo: "/colors blue 65 AEE264 FFFFFF AEE264",
        nombreEquipo: "DEFENSA Y JUSTICIA"
    },
    "dyj/clasica/red": {
        codigo: "/colors red 65 007A3F FFDD00 007A3F",
        nombreEquipo: "DEFENSA Y JUSTICIA"
    },
    "dyj/clasica/blue": {
        codigo: "/colors blue 65 007A3F FFDD00 007A3F",
        nombreEquipo: "DEFENSA Y JUSTICIA"
    },

    // ATLÉTICO MADRID
    "atm/titular/red": {
        codigo: "/colors red 180 292a6d e3221d FFFFFF e3221d",
        nombreEquipo: "ATLÉTICO MADRID"
    },
    "atm/titular/blue": {
        codigo: "/colors blue 180 292a6d e3221d FFFFFF e3221d",
        nombreEquipo: "ATLÉTICO MADRID"
    },
    "atm/alternativa/red": {
        codigo: "/colors red 180 201F24 E61711",
        nombreEquipo: "ATLÉTICO MADRID"
    },
    "atm/alternativa/blue": {
        codigo: "/colors blue 180 201F24 E61711",
        nombreEquipo: "ATLÉTICO MADRID"
    },
    "atm/tercera/red": {
        codigo: "/colors red 152 AFD4EB A6CFE8",
        nombreEquipo: "ATLÉTICO MADRID"
    },
    "atm/tercera/blue": {
        codigo: "/colors blue 152 AFD4EB A6CFE8",
        nombreEquipo: "ATLÉTICO MADRID"
    },
    // SEVILLA FC
    "sev/titular/red": {
        codigo: "/colors red 90 FE0000 D1D1D1 FFFFFF FFFFFF",
        nombreEquipo: "SEVILLA FC"
    },
    "sev/titular/blue": {
        codigo: "/colors blue 90 FE0000 D1D1D1 FFFFFF FFFFFF",
        nombreEquipo: "SEVILLA FC"
    },

    // BARCELONA FC
    "bar/titular/red": {
        codigo: "/colors red 180 F5B606 011EDE C80056",
        nombreEquipo: "BARCELONA FC"
    },
    "bar/titular/blue": {
        codigo: "/colors blue 180 F5B606 011EDE C80056",
        nombreEquipo: "BARCELONA FC"
    },
    "bar/alternativa/red": {
        codigo: "/colors red 60 263A7B C7C7F9",
        nombreEquipo: "BARCELONA FC"
    },
    "bar/alternativa/blue": {
        codigo: "/colors blue 60 263A7B C7C7F9",
        nombreEquipo: "BARCELONA FC"
    },
    "bar/tercera/red": {
        codigo: "/colors red 140 2B2E3F FAEA35 E32527 FAEA35",
        nombreEquipo: "BARCELONA FC"
    },
    "bar/tercera/blue": {
        codigo: "/colors blue 140 2B2E3F FAEA35 E32527 FAEA35",
        nombreEquipo: "BARCELONA FC"
    },

    // REAL MADRID
    "rma/titular/red": {
        codigo: "/colors red 73 0f2145 ffc10a FFFFFF FFFFFF",
        nombreEquipo: "REAL MADRID"
    },
    "rma/titular/blue": {
        codigo: "/colors blue 73 0f2145 ffc10a FFFFFF FFFFFF",
        nombreEquipo: "REAL MADRID"
    },
    "rma/alternativa/red": {
        codigo: "/colors red 67 FFC94B 474E64 323D52 212B3A",
        nombreEquipo: "REAL MADRID"
    },
    "rma/alternativa/blue": {
        codigo: "/colors blue 67 FFC94B 474E64 323D52 212B3A",
        nombreEquipo: "REAL MADRID"
    },
    "rma/tercera/red": {
        codigo: "/colors red 180 002957 6EE2C8",
        nombreEquipo: "REAL MADRID"
    },
    "rma/tercera/blue": {
        codigo: "/colors blue 180 002957 6EE2C8",
        nombreEquipo: "REAL MADRID"
    },

    // INTER MILAN
    "int/titular/red": {
        codigo: "/colors red 180 FFFFFF 00239C 000000 00239C",
        nombreEquipo: "INTER MILAN"
    },
    "int/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 00239C 000000 00239C",
        nombreEquipo: "INTER MILAN"
    },
    "int/alternativa/red": {
        codigo: "/colors red 180 0157D2 FFFFFF",
        nombreEquipo: "INTER MILAN"
    },
    "int/alternativa/blue": {
        codigo: "/colors blue 180 0157D2 FFFFFF",
        nombreEquipo: "INTER MILAN"
    },
    "int/tercera/red": {
        codigo: "/colors red 180 48E4FA 0D1313",
        nombreEquipo: "INTER MILAN"
    },
    "int/tercera/blue": {
        codigo: "/colors blue 180 48E4FA 0D1313",
        nombreEquipo: "INTER MILAN"
    },

    // AC MILAN
    "acm/titular/red": {
        codigo: "/colors red 180 FFFFFF DF061B 000000 DF061B",
        nombreEquipo: "AC MILAN"
    },
    "acm/titular/blue": {
        codigo: "/colors blue 180 FFFFFF DF061B 000000 DF061B",
        nombreEquipo: "AC MILAN"
    },
    "acm/alternativa/red": {
        codigo: "/colors red 180 A61726 FAFAFA",
        nombreEquipo: "AC MILAN"
    },
    "acm/alternativa/blue": {
        codigo: "/colors blue 180 A61726 FAFAFA",
        nombreEquipo: "AC MILAN"
    },
    "acm/tercera/red": {
        codigo: "/colors red 180 F9F9F9 2A2A2A",
        nombreEquipo: "AC MILAN"
    },
    "acm/tercera/blue": {
        codigo: "/colors blue 180 F9F9F9 2A2A2A",
        nombreEquipo: "AC MILAN"
    },

    // CRUZEIRO
    "cru/titular/red": {
        codigo: "/colors red 180 E3E7F0 0146AB 044BB3 0146AB",
        nombreEquipo: "CRUZEIRO"
    },
    "cru/titular/blue": {
        codigo: "/colors blue 180 E3E7F0 0146AB 044BB3 0146AB",
        nombreEquipo: "CRUZEIRO"
    },
    "cru/alternativa/red": {
        codigo: "/colors red 60 045AB1 EEF1F6",
        nombreEquipo: "CRUZEIRO"
    },
    "cru/alternativa/blue": {
        codigo: "/colors blue 60 045AB1 EEF1F6",
        nombreEquipo: "CRUZEIRO"
    },
    // PALMEIRAS
    "pal/titular/red": {
        codigo: "/colors red 90 FFFFFF 006337 00713D 00713D",
        nombreEquipo: "PALMEIRAS"
    },
    "pal/titular/blue": {
        codigo: "/colors blue 90 FFFFFF 006337 00713D 00713D",
        nombreEquipo: "PALMEIRAS"
    },
    "pal/alternativa/red": {
        codigo: "/colors red 60 10372A F2F1F2",
        nombreEquipo: "PALMEIRAS"
    },
    "pal/alternativa/blue": {
        codigo: "/colors blue 60 10372A F2F1F2",
        nombreEquipo: "PALMEIRAS"
    },
    "pal/tercera/red": {
        codigo: "/colors red 60 FFFFFF 5ADAC5",
        nombreEquipo: "PALMEIRAS"
    },
    "pal/tercera/blue": {
        codigo: "/colors blue 60 FFFFFF 5ADAC5",
        nombreEquipo: "PALMEIRAS"
    },

    // GREMIO
    "gre/titular/red": {
        codigo: "/colors red 180 FFFFFF 009EE2 05171D 009EE2",
        nombreEquipo: "GREMIO"
    },
    "gre/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 009EE2 05171D 009EE2",
        nombreEquipo: "GREMIO"
    },
    "gre/alternativa/red": {
        codigo: "/colors red 180 0088BE FAFAFC",
        nombreEquipo: "GREMIO"
    },
    "gre/alternativa/blue": {
        codigo: "/colors blue 180 0088BE FAFAFC",
        nombreEquipo: "GREMIO"
    },
    "gre/titular/red/2019": {
        codigo: "/colors red 180 FFFFFF 0099DB 20181E 0099DB",
        nombreEquipo: "GREMIO"
    },
    "gre/titular/blue/2019": {
        codigo: "/colors blue 180 FFFFFF 19A2FF 20181E 19A2FF",
        nombreEquipo: "GREMIO"
    },
    "gre/clasica/red": {
        codigo: "/colors red 180 EEEDE8 03A2C9 22191C 03A2C9",
        nombreEquipo: "GREMIO"
    },
    "gre/clasica/blue": {
        codigo: "/colors blue 180 EEEDE8 03A2C9 22191C 03A2C9",
        nombreEquipo: "GREMIO"
    },

    // TOTTENHAM
    "tot/titular/red": {
        codigo: "/colors red 90 1F2652 FFFFFF",
        nombreEquipo: "TOTTENHAM"
    },
    "tot/titular/blue": {
        codigo: "/colors blue 90 1F2652 FFFFFF",
        nombreEquipo: "TOTTENHAM"
    },
    "tot/alternativa/red": {
        codigo: "/colors red 90 FFFEFF 1B294B 1B294B 232956",
        nombreEquipo: "TOTTENHAM"
    },
    "tot/alternativa/blue": {
        codigo: "/colors blue 90 FFFEFF 1B294B 1B294B 232956",
        nombreEquipo: "TOTTENHAM"
    },
    "tot/tercera/red": {
        codigo: "/colors red 90 161D4F 3AC0EB 36B4E3",
        nombreEquipo: "TOTTENHAM"
    },
    "tot/tercera/blue": {
        codigo: "/colors blue 90 161D4F 3AC0EB 36B4E3",
        nombreEquipo: "TOTTENHAM"
    },
    "tot/titular/red/2018": {
        codigo: "/colors red 90 171C4F F5F4F9 F5F4F9 182341",
        nombreEquipo: "TOTTENHAM"
    },
    "tot/titular/blue/2018": {
        codigo: "/colors blue 90 171C4F F5F4F9 F5F4F9 182341",
        nombreEquipo: "TOTTENHAM"
    },
    "tot/alternativa/red/2018": {
        codigo: "/colors red 90 FFFFFF 20374C 0EAF9B",
        nombreEquipo: "TOTTENHAM"
    },
    "tot/alternativa/blue/2018": {
        codigo: "/colors blue 90 FFFFFF 20374C 0EAF9B",
        nombreEquipo: "TOTTENHAM"
    },

    // LIVERPOOL
    "liv/titular/red": {
        codigo: "/colors red 180 F0F0F2 C4021D",
        nombreEquipo: "LIVERPOOL"
    },
    "liv/titular/blue": {
        codigo: "/colors blue 180 F0F0F2 C4021D",
        nombreEquipo: "LIVERPOOL"
    },
    "liv/alternativa/red": {
        codigo: "/colors red 180 000000 EBE8D0",
        nombreEquipo: "LIVERPOOL"
    },
    "liv/alternativa/blue": {
        codigo: "/colors blue 180 000000 EBE8D0",
        nombreEquipo: "LIVERPOOL"
    },
    "liv/tercera/red": {
        codigo: "/colors red 180 FF451D FCFE1E",
        nombreEquipo: "LIVERPOOL"
    },
    "liv/tercera/blue": {
        codigo: "/colors blue 180 FF451D FCFE1E",
        nombreEquipo: "LIVERPOOL"
    },

    // ARGENTINA
    "arg/titular/red": {
        codigo: "/colors red 180 1e2930 98cef0 ffffff 98cef0",
        nombreEquipo: "ARGENTINA"
    },
    "arg/titular/blue": {
        codigo: "/colors blue 180 1e2930 98cef0 ffffff 98cef0",
        nombreEquipo: "ARGENTINA"
    },
    "arg/alternativa/red": {
        codigo: "/colors red 90 CED3D9 0B245F 214196 7E6FB8",
        nombreEquipo: "ARGENTINA"
    },
    "arg/alternativa/blue": {
        codigo: "/colors blue 90 CED3D9 0B245F 214196 7E6FB8",
        nombreEquipo: "ARGENTINA"
    },
    "arg/bandera/red": {
        codigo: "/colors red 90 F6B40E 74ACDF FFFFFF 74ACDF",
        nombreEquipo: "ARGENTINA"
    },
    "arg/bandera/blue": {
        codigo: "/colors blue 90 F6B40E 74ACDF FFFFFF 74ACDF",
        nombreEquipo: "ARGENTINA"
    },

    // BÉLGICA
    "belg/titular/red": {
        codigo: "/colors red 44 F1E73A DC0121 391517 DC0121",
        nombreEquipo: "BÉLGICA"
    },
    "belg/titular/blue": {
        codigo: "/colors blue 44 F1E73A DC0121 391517 DC0121",
        nombreEquipo: "BÉLGICA"
    },
    "belg/alternativa/red": {
        codigo: "/colors red 90 000000 F9C700 F4AC00",
        nombreEquipo: "BÉLGICA"
    },
    "belg/alternativa/blue": {
        codigo: "/colors blue 90 000000 F9C700 F4AC00",
        nombreEquipo: "BÉLGICA"
    },
    "belg/bandera/red": {
        codigo: "/colors red 180 FFFFFF 000000 FAE042 ED2939",
        nombreEquipo: "BÉLGICA"
    },
    "belg/bandera/blue": {
        codigo: "/colors blue 180 FFFFFF 000000 FAE042 ED2939",
        nombreEquipo: "BÉLGICA"
    },

    // BRASIL
    "bra/titular/red": {
        codigo: "/colors red 180 00a032 ffcd00",
        nombreEquipo: "BRASIL"
    },
    "bra/titular/blue": {
        codigo: "/colors blue 180 00a032 ffcd00",
        nombreEquipo: "BRASIL"
    },
    "bra/alternativa/red": {
        codigo: "/colors red 90 F6D91F 1C4C90 0D60B1 0E72D6",
        nombreEquipo: "BRASIL"
    },
    "bra/alternativa/blue": {
        codigo: "/colors blue 90 F6D91F 1C4C90 0D60B1 0E72D6",
        nombreEquipo: "BRASIL"
    },
    "bra/tercera/red": {
        codigo: "/colors red 180 0053B5 F8F9FE",
        nombreEquipo: "BRASIL"
    },
    "bra/tercera/blue": {
        codigo: "/colors blue 180 0053B5 F8F9FE",
        nombreEquipo: "BRASIL"
    },
    // CHILE
    "chi/titular/red": {
        codigo: "/colors red 60 FFFFFF ED3422",
        nombreEquipo: "CHILE"
    },
    "chi/titular/blue": {
        codigo: "/colors blue 60 FFFFFF ED3422",
        nombreEquipo: "CHILE"
    },

    // URUGUAY
    "uru/titular/red": {
        codigo: "/colors red 90 2E3035 80BFE1 76B9DE",
        nombreEquipo: "URUGUAY"
    },
    "uru/titular/blue": {
        codigo: "/colors blue 90 2E3035 80BFE1 76B9DE",
        nombreEquipo: "URUGUAY"
    },
    "uru/alternativa/red": {
        codigo: "/colors red 75 373639 52ABDF F2F3F7 F2F3F7",
        nombreEquipo: "URUGUAY"
    },
    "uru/alternativa/blue": {
        codigo: "/colors blue 75 373639 52ABDF F2F3F7 F2F3F7",
        nombreEquipo: "URUGUAY"
    },

    // FRANCIA
    "fra/titular/red": {
        codigo: "/colors red 90 EABC78 1B2A4A",
        nombreEquipo: "FRANCIA"
    },
    "fra/titular/blue": {
        codigo: "/colors blue 90 EABC78 1B2A4A",
        nombreEquipo: "FRANCIA"
    },
    "fra/alternativa/red": {
        codigo: "/colors red 90 0977C5 FFFFFF E2EBF2",
        nombreEquipo: "FRANCIA"
    },
    "fra/alternativa/blue": {
        codigo: "/colors blue 90 0977C5 FFFFFF E2EBF2",
        nombreEquipo: "FRANCIA"
    },
    "fra/bandera/red": {
        codigo: "/colors red 1 939BA3 002395 FFFFFF ED2939",
        nombreEquipo: "FRANCIA"
    },
    "fra/bandera/blue": {
        codigo: "/colors blue 1 939BA3 002395 FFFFFF ED2939",
        nombreEquipo: "FRANCIA"
    },

    // CROACIA
    "cro/titular/red": {
        codigo: "/colors red 90 0065C9 D6001E F2F0F3 F2F0F3",
        nombreEquipo: "CROACIA"
    },
    "cro/titular/blue": {
        codigo: "/colors blue 90 0065C9 D6001E F2F0F3 F2F0F3",
        nombreEquipo: "CROACIA"
    },
    "cro/alternativa/red": {
        codigo: "/colors red 90 F6F6F8 E50738 0151C0 0151C0",
        nombreEquipo: "CROACIA"
    },
    "cro/alternativa/blue": {
        codigo: "/colors blue 90 F6F6F8 E50738 0151C0 0151C0",
        nombreEquipo: "CROACIA"
    },
    "cro/tercera/red": {
        codigo: "/colors red 90 E43840 272E30 4F5857",
        nombreEquipo: "CROACIA"
    },
    "cro/tercera/blue": {
        codigo: "/colors blue 90 E43840 272E30 4F5857",
        nombreEquipo: "CROACIA"
    },

    // NAPOLI
    "nap/titular/red": {
        codigo: "/colors red 180 FFFFFF 01B9EB",
        nombreEquipo: "NAPOLI"
    },
    "nap/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 01B9EB",
        nombreEquipo: "NAPOLI"
    },
    "nap/alternativa/red": {
        codigo: "/colors red 299 FFFFFF 7E8641 7E8641 33392E",
        nombreEquipo: "NAPOLI"
    },
    "nap/alternativa/blue": {
        codigo: "/colors blue 299 FFFFFF 7E8641 7E8641 33392E",
        nombreEquipo: "NAPOLI"
    },

    // BAYERN DE MUNICH
    "fcb/titular/red": {
        codigo: "/colors red 90 FFFFFF DC052D ED0038 ED0038",
        nombreEquipo: "BAYERN DE MUNICH"
    },
    "fcb/titular/blue": {
        codigo: "/colors blue 90 FFFFFF DC052D ED0038 ED0038",
        nombreEquipo: "BAYERN DE MUNICH"
    },
    "fcb/alternativa/red": {
        codigo: "/colors red 180 62676A F6F8FC",
        nombreEquipo: "BAYERN DE MUNICH"
    },
    "fcb/alternativa/blue": {
        codigo: "/colors blue 180 62676A F6F8FC",
        nombreEquipo: "BAYERN DE MUNICH"
    },
    "fcb/tercera/red": {
        codigo: "/colors red 180 E76352 132243",
        nombreEquipo: "BAYERN DE MUNICH"
    },
    "fcb/tercera/blue": {
        codigo: "/colors blue 180 E76352 132243",
        nombreEquipo: "BAYERN DE MUNICH"
    },
    // BORUSSIA DORTMUND
    "bvb/titular/red": {
        codigo: "/colors red 90 1d1d1b 1d1d1b fad515 fad515",
        nombreEquipo: "BORUSSIA DORTMUND"
    },
    "bvb/titular/blue": {
        codigo: "/colors blue 90 1d1d1b 1d1d1b fad515 fad515",
        nombreEquipo: "BORUSSIA DORTMUND"
    },
    "bvb/alternativa/red": {
        codigo: "/colors red 180 CECFD1 252525",
        nombreEquipo: "BORUSSIA DORTMUND"
    },
    "bvb/alternativa/blue": {
        codigo: "/colors blue 180 CECFD1 252525",
        nombreEquipo: "BORUSSIA DORTMUND"
    },

    // JUVENTUS
    "juv/titular/red": {
        codigo: "/colors red 180 F7C902 1F1A20 FFFFFF 1F1A20",
        nombreEquipo: "JUVENTUS"
    },
    "juv/titular/blue": {
        codigo: "/colors blue 180 F7C902 1F1A20 FFFFFF 1F1A20",
        nombreEquipo: "JUVENTUS"
    },
    "juv/alternativa/red": {
        codigo: "/colors red 126 FFFFFF FAA18D 25242A 25242A",
        nombreEquipo: "JUVENTUS"
    },
    "juv/alternativa/blue": {
        codigo: "/colors blue 126 FFFFFF FAA18D 25242A 25242A",
        nombreEquipo: "JUVENTUS"
    },
    "juv/tercera/red": {
        codigo: "/colors red 130 6370F2 FFFFFF F3E757 F3E757",
        nombreEquipo: "JUVENTUS"
    },
    "juv/tercera/blue": {
        codigo: "/colors blue 130 6370F2 FFFFFF F3E757 F3E757",
        nombreEquipo: "JUVENTUS"
    },

    // ESTUDIANTES (LP)
    "est/titular/red": {
        codigo: "/colors red 180 323232 E41815 FFFFFF E41815",
        nombreEquipo: "ESTUDIANTES (LP)"
    },
    "est/titular/blue": {
        codigo: "/colors blue 180 323232 E41815 FFFFFF E41815",
        nombreEquipo: "ESTUDIANTES (LP)"
    },
    "est/alternativa/red": {
        codigo: "/colors red 0 F51A22 FFFFFF FFFFFF F51A22",
        nombreEquipo: "ESTUDIANTES (LP)"
    },
    "est/alternativa/blue": {
        codigo: "/colors blue 0 F51A22 FFFFFF FFFFFF F51A22",
        nombreEquipo: "ESTUDIANTES (LP)"
    },
    "est/tercera/red": {
        codigo: "/colors red 90 FFFFFF 242424 D9201E D9201E",
        nombreEquipo: "ESTUDIANTES (LP)"
    },
    "est/tercera/blue": {
        codigo: "/colors blue 90 FFFFFF 242424 D9201E D9201E",
        nombreEquipo: "ESTUDIANTES (LP)"
    },

    // BANFIELD
    "band/titular/red": {
        codigo: "/colors red 180 B59859 007836 FFFFFF 007836",
        nombreEquipo: "BANFIELD"
    },
    "band/titular/blue": {
        codigo: "/colors blue 180 B59859 007836 FFFFFF 007836",
        nombreEquipo: "BANFIELD"
    },
    "band/alternativa/red": {
        codigo: "/colors red 44 FFFFFF 1C1C1C 09694A 1C1C1C",
        nombreEquipo: "BANFIELD"
    },
    "band/alternativa/blue": {
        codigo: "/colors blue 44 FFFFFF 1C1C1C 09694A 1C1C1C",
        nombreEquipo: "BANFIELD"
    },
    "band/clasica/red": {
        codigo: "/colors red 180 0A0A0A 02953F FEFFFF 02953F",
        nombreEquipo: "BANFIELD"
    },
    "band/clasica/blue": {
        codigo: "/colors blue 180 0A0A0A 02953F FEFFFF 02953F",
        nombreEquipo: "BANFIELD"
    },

    // LANÚS
    "lan/titular/red": {
        codigo: "/colors red 90 FFFFFF 6A2331 74192E 74192E",
        nombreEquipo: "LANÚS"
    },
    "lan/titular/blue": {
        codigo: "/colors blue 90 FFFFFF 6A2331 74192E 74192E",
        nombreEquipo: "LANÚS"
    },
    "lan/alternativa/red": {
        codigo: "/colors red 65 6C1921 FFFFFF",
        nombreEquipo: "LANÚS"
    },
    "lan/alternativa/blue": {
        codigo: "/colors blue 65 6C1921 FFFFFF",
        nombreEquipo: "LANÚS"
    },
    "lan/tercera/red": {
        codigo: "/colors red 133 8C2246 591733 FCCBDE FCCBDE",
        nombreEquipo: "LANÚS"
    },
    "lan/tercera/blue": {
        codigo: "/colors blue 133 8C2246 591733 FCCBDE FCCBDE",
        nombreEquipo: "LANÚS"
    },

    // MANCHESTER UNITED
    "mun/titular/red": {
        codigo: "/colors red 90 FFFFFF D90119 C7011A AB0918",
        nombreEquipo: "MANCHESTER UNITED"
    },
    "mun/titular/blue": {
        codigo: "/colors blue 90 FFFFFF D90119 C7011A AB0918",
        nombreEquipo: "MANCHESTER UNITED"
    },
    "mun/alternativa/red": {
        codigo: "/colors red 90 191816 E1D2BF",
        nombreEquipo: "MANCHESTER UNITED"
    },
    "mun/alternativa/blue": {
        codigo: "/colors blue 90 231F20 F5EAD4",
        nombreEquipo: "MANCHESTER UNITED"
    },
    "mun/tercera/red": {
        codigo: "/colors red 90 231F20 F5EAD4",
        nombreEquipo: "MANCHESTER UNITED"
    },
    "mun/tercera/blue": {
        codigo: "/colors blue 233 F24134 2B2F35 212125",
        nombreEquipo: "MANCHESTER UNITED"
    },

    // MANCHESTER CITY
    "mci/titular/red": {
        codigo: "/colors red 90 FFFFFF 95c1e6",
        nombreEquipo: "MANCHESTER CITY"
    },
    "mci/titular/blue": {
        codigo: "/colors blue 90 FFFFFF 95c1e6",
        nombreEquipo: "MANCHESTER CITY"
    },
    "mci/alternativa/red": {
        codigo: "/colors red -40 F7C100 1D1417 B20113 1D1417",
        nombreEquipo: "MANCHESTER CITY"
    },
    "mci/alternativa/blue": {
        codigo: "/colors blue -40 F7C100 1D1417 B20113 1D1417",
        nombreEquipo: "MANCHESTER CITY"
    },
    "mci/tercera/red": {
        codigo: "/colors red 90 FFFFFF 99D5F7 293158 293158",
        nombreEquipo: "MANCHESTER CITY"
    },
    "mci/tercera/blue": {
        codigo: "/colors blue 90 FFFFFF 99D5F7 293158 293158",
        nombreEquipo: "MANCHESTER CITY"
    },
    // ARSENAL FC
    "ars/titular/red": {
        codigo: "/colors red 69 D3A255 FFFFFF D10413 D10413",
        nombreEquipo: "ARSENAL FC"
    },
    "ars/titular/blue": {
        codigo: "/colors blue 69 D3A255 FFFFFF D10413 D10413",
        nombreEquipo: "ARSENAL FC"
    },
    "ars/alternativa/red": {
        codigo: "/colors red 55 233F67 FEF2AB",
        nombreEquipo: "ARSENAL FC"
    },
    "ars/alternativa/blue": {
        codigo: "/colors blue 55 233F67 FEF2AB",
        nombreEquipo: "ARSENAL FC"
    },
    "ars/tercera/red": {
        codigo: "/colors red 90 FECC00 27354F",
        nombreEquipo: "ARSENAL FC"
    },
    "ars/tercera/blue": {
        codigo: "/colors blue 90 FECC00 27354F",
        nombreEquipo: "ARSENAL FC"
    },

    // CHELSEA
    "che/titular/red": {
        codigo: "/colors red 66 FBB700 001489",
        nombreEquipo: "CHELSEA"
    },
    "che/titular/blue": {
        codigo: "/colors blue 66 FBB700 001489",
        nombreEquipo: "CHELSEA"
    },
    "che/alternativa/red": {
        codigo: "/colors red 52 003B7D F8F8F8",
        nombreEquipo: "CHELSEA"
    },
    "che/alternativa/blue": {
        codigo: "/colors blue 52 003B7D F8F8F8",
        nombreEquipo: "CHELSEA"
    },
    "che/tercera/red": {
        codigo: "/colors red 56 F9500F 1A1A1A 161616",
        nombreEquipo: "CHELSEA"
    },
    "che/tercera/blue": {
        codigo: "/colors blue 56 F9500F 1A1A1A 161616",
        nombreEquipo: "CHELSEA"
    },
    "che/cuarta/red": {
        codigo: "/colors red 56 F4DA45 33459F",
        nombreEquipo: "CHELSEA"
    },
    "che/cuarta/blue": {
        codigo: "/colors blue 56 F4DA45 33459F",
        nombreEquipo: "CHELSEA"
    },

    // PARANAENSE
    "par/titular/red": {
        codigo: "/colors red 48 FFFFFF C6012C C6012C 100E0F",
        nombreEquipo: "PARANAENSE"
    },
    "par/titular/blue": {
        codigo: "/colors blue 48 FFFFFF C6012C C6012C 100E0F",
        nombreEquipo: "PARANAENSE"
    },
    "par/alternativa/red": {
        codigo: "/colors red 48 0E0E0E FFFFFF FFFFFF BABABA",
        nombreEquipo: "PARANAENSE"
    },
    "par/alternativa/blue": {
        codigo: "/colors blue 48 0E0E0E FFFFFF FFFFFF BABABA",
        nombreEquipo: "PARANAENSE"
    },

    // HURACÁN
    "hur/titular/red": {
        codigo: "/colors red 52 FF0000 FFFFFF",
        nombreEquipo: "HURACÁN"
    },
    "hur/titular/blue": {
        codigo: "/colors blue 52 FF0000 FFFFFF",
        nombreEquipo: "HURACÁN"
    },
    "hur/alternativa/red": {
        codigo: "/colors red 90 FFFFFF D02939 A61829 D02939",
        nombreEquipo: "HURACÁN"
    },
    "hur/alternativa/blue": {
        codigo: "/colors blue 90 FFFFFF D02939 A61829 D02939",
        nombreEquipo: "HURACÁN"
    },

    // TIGRE
    "tig/titular/red": {
        codigo: "/colors red 90 FFFFFF 304383 CB1B2D 304383",
        nombreEquipo: "TIGRE"
    },
    "tig/titular/blue": {
        codigo: "/colors blue 90 FFFFFF 304383 CB1B2D 304383",
        nombreEquipo: "TIGRE"
    },
    "tig/alternativa/red": {
        codigo: "/colors red 90 2D3E6A FFFFFF E32527 FFFFFF",
        nombreEquipo: "TIGRE"
    },
    "tig/alternativa/blue": {
        codigo: "/colors blue 90 2D3E6A FFFFFF E32527 FFFFFF",
        nombreEquipo: "TIGRE"
    },

    // ALEMANIA
    "ale/titular/red": {
        codigo: "/colors red 0 F0CDA5 FFFFFF 281C26 FFFFFF",
        nombreEquipo: "ALEMANIA"
    },
    "ale/titular/blue": {
        codigo: "/colors blue 0 F0CDA5 FFFFFF 281C26 FFFFFF",
        nombreEquipo: "ALEMANIA"
    },
    "ale/alternativa/red": {
        codigo: "/colors red 90 FFFFFF 222222 1B1B1B 1B1B1B",
        nombreEquipo: "ALEMANIA"
    },
    "ale/alternativa/blue": {
        codigo: "/colors blue 90 FFFFFF 222222 1B1B1B 1B1B1B",
        nombreEquipo: "ALEMANIA"
    },
    "ale/bandera/red": {
        codigo: "/colors red 90 FFFFFF 000000 DD0000 FFCE00",
        nombreEquipo: "ALEMANIA"
    },
    "ale/bandera/blue": {
        codigo: "/colors blue 90 FFFFFF 000000 DD0000 FFCE00",
        nombreEquipo: "ALEMANIA"
    },

    // ESPAÑA
    "esp/titular/red": {
        codigo: "/colors red 70 FFC000 BB0C10",
        nombreEquipo: "ESPAÑA"
    },
    "esp/titular/blue": {
        codigo: "/colors blue 70 FFC000 BB0C10",
        nombreEquipo: "ESPAÑA"
    },
    "esp/alternativa/red": {
        codigo: "/colors red 270 0DA2E7 A9DCF7 BEE4F9 DCF0FB",
        nombreEquipo: "ESPAÑA"
    },
    "esp/alternativa/blue": {
        codigo: "/colors blue 270 0DA2E7 A9DCF7 BEE4F9 DCF0FB",
        nombreEquipo: "ESPAÑA"
    },
    "esp/bandera/red": {
        codigo: "/colors red 90 AD1519 C60B1E FFC400 C60B1E",
        nombreEquipo: "ESPAÑA"
    },
    "esp/bandera/blue": {
        codigo: "/colors blue 90 AD1519 C60B1E FFC400 C60B1E",
        nombreEquipo: "ESPAÑA"
    },

    // PORTUGAL
    "por/titular/red": {
        codigo: "/colors red 130 F9CD39 A92121 A92121 01553E",
        nombreEquipo: "PORTUGAL"
    },
    "por/titular/blue": {
        codigo: "/colors blue 130 F9CD39 A92121 A92121 01553E",
        nombreEquipo: "PORTUGAL"
    },
    "por/alternativa/red": {
        codigo: "/colors red 90 030303 E1FAF8 E1FAF8 F04256",
        nombreEquipo: "PORTUGAL"
    },
    "por/alternativa/blue": {
        codigo: "/colors blue 90 030303 E1FAF8 E1FAF8 F04256",
        nombreEquipo: "PORTUGAL"
    },

    // ARGENTINOS JRS.
    "aaaj/titular/red": {
        codigo: "/colors red 123 005DA4 EB2A2F FFFFFF EB2A2F",
        nombreEquipo: "ARGENTINOS JRS."
    },
    "aaaj/titular/blue": {
        codigo: "/colors blue 123 005DA4 EB2A2F FFFFFF EB2A2F",
        nombreEquipo: "ARGENTINOS JRS."
    },
    "aaaj/alternativa/red": {
        codigo: "/colors red 180 EB2A2F EB2A2F FFFFFF FFFFFF",
        nombreEquipo: "ARGENTINOS JRS."
    },
    "aaaj/alternativa/blue": {
        codigo: "/colors blue 180 EB2A2F EB2A2F FFFFFF FFFFFF",
        nombreEquipo: "ARGENTINOS JRS."
    },
    "aaaj/tercera/red": {
        codigo: "/colors red 135 585F8A 0255BD FFFFFF 0255BD",
        nombreEquipo: "ARGENTINOS JRS."
    },
    "aaaj/tercera/blue": {
        codigo: "/colors blue 135 585F8A 0255BD FFFFFF 0255BD",
        nombreEquipo: "ARGENTINOS JRS."
    },

    // ALL BOYS
    "alb/titular/red": {
        codigo: "/colors red 180 282A27 FFFFFF",
        nombreEquipo: "ALL BOYS"
    },
    "alb/titular/blue": {
        codigo: "/colors blue 180 282A27 FFFFFF",
        nombreEquipo: "ALL BOYS"
    },
    "alb/alternativa/red": {
        codigo: "/colors red 50 D6D6D6 FFFFFF 1E1A17 FFFFFF",
        nombreEquipo: "ALL BOYS"
    },
    "alb/alternativa/blue": {
        codigo: "/colors blue 50 D6D6D6 FFFFFF 1E1A17 FFFFFF",
        nombreEquipo: "ALL BOYS"
    },

    // ATLANTA
    "atl/titular/red": {
        codigo: "/colors red 180 FFFFFF EDBF00 34458A EDBF00",
        nombreEquipo: "ATLANTA"
    },
    "atl/titular/blue": {
        codigo: "/colors blue 180 FFFFFF EDBF00 34458A EDBF00",
        nombreEquipo: "ATLANTA"
    },
    "atl/alternativa/red": {
        codigo: "/colors red 60 EDD41C 03264E 09203C 09203C",
        nombreEquipo: "ATLANTA"
    },
    "atl/alternativa/blue": {
        codigo: "/colors blue 60 EDD41C 03264E 09203C 09203C",
        nombreEquipo: "ATLANTA"
    },
    "atl/escudo/red": {
        codigo: "/colors red 180 FFFFFF FBBB51 18306E FBBB51",
        nombreEquipo: "ATLANTA"
    },
    "atl/escudo/blue": {
        codigo: "/colors blue 180 FFFFFF FBBB51 18306E FBBB51",
        nombreEquipo: "ATLANTA"
    },
    // BELGRANO
    "bel/titular/red": {
        codigo: "/colors red 70 FFFFFF 1A120C 009CD0 009CD0",
        nombreEquipo: "BELGRANO"
    },
    "bel/titular/blue": {
        codigo: "/colors blue 70 FFFFFF 1A120C 009CD0 009CD0",
        nombreEquipo: "BELGRANO"
    },
    "bel/alternativa/red": {
        codigo: "/colors red 70 000000 10B0FF FFFFFF FFFFFF",
        nombreEquipo: "BELGRANO"
    },
    "bel/alternativa/blue": {
        codigo: "/colors blue 70 000000 10B0FF FFFFFF FFFFFF",
        nombreEquipo: "BELGRANO"
    },

    // CHACARITA JRS
    "cha/titular/red": {
        codigo: "/colors red 180 FFFFFF 000000 D2191E 000000",
        nombreEquipo: "CHACARITA JRS"
    },
    "cha/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 000000 D2191E 000000",
        nombreEquipo: "CHACARITA JRS"
    },
    "cha/alternativa/red": {
        codigo: "/colors red 90 9C9C9C D2191E FFFFFF 000000",
        nombreEquipo: "CHACARITA JRS"
    },
    "cha/alternativa/blue": {
        codigo: "/colors blue 90 9C9C9C D2191E FFFFFF 000000",
        nombreEquipo: "CHACARITA JRS"
    },

    // TALLERES (C)
    "tal/titular/red": {
        codigo: "/colors red 180 A7A9AB 1E315A FFFFFF 1E315A",
        nombreEquipo: "TALLERES (C)"
    },
    "tal/titular/blue": {
        codigo: "/colors blue 180 A7A9AB 1E315A FFFFFF 1E315A",
        nombreEquipo: "TALLERES (C)"
    },
    "tal/alternativa/red": {
        codigo: "/colors red 90 3A4466 FFFFFF",
        nombreEquipo: "TALLERES (C)"
    },
    "tal/alternativa/blue": {
        codigo: "/colors blue 90 3A4466 FFFFFF",
        nombreEquipo: "TALLERES (C)"
    },

    // PLATENSE
    "pla/titular/red": {
        codigo: "/colors red 90 FD6F21 FFFFFF 5A3E22 FFFFFF",
        nombreEquipo: "PLATENSE"
    },
    "pla/titular/blue": {
        codigo: "/colors blue 90 FD6F21 FFFFFF 5A3E22 FFFFFF",
        nombreEquipo: "PLATENSE"
    },
    "pla/alternativa/red": {
        codigo: "/colors red 90 FB7401 4C3E3B FFFFFF 4C3E3B",
        nombreEquipo: "PLATENSE"
    },
    "pla/alternativa/blue": {
        codigo: "/colors blue 90 FB7401 4C3E3B FFFFFF 4C3E3B",
        nombreEquipo: "PLATENSE"
    },
    "pla/tercera/red": {
        codigo: "/colors red 180 9E6F47 C9B6A5 4A2C21 C9B6A5",
        nombreEquipo: "PLATENSE"
    },
    "pla/tercera/blue": {
        codigo: "/colors blue 180 9E6F47 C9B6A5 4A2C21 C9B6A5",
        nombreEquipo: "PLATENSE"
    },

    // OLIMPO
    "olp/titular/red": {
        codigo: "/colors red 180 FFFFFF 292929 EDC63A 292929",
        nombreEquipo: "OLIMPO"
    },
    "olp/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 292929 EDC63A 292929",
        nombreEquipo: "OLIMPO"
    },

    // SAN MARTÍN (T)
    "smt/titular/red": {
        codigo: "/colors red 0 0F0F0F E11A25 FFFFFF E11A25",
        nombreEquipo: "SAN MARTÍN (T)"
    },
    "smt/titular/blue": {
        codigo: "/colors blue 0 0F0F0F E11A25 FFFFFF E11A25",
        nombreEquipo: "SAN MARTÍN (T)"
    },
    "smt/alternativa/red": {
        codigo: "/colors red 90 FFFFFF E31515 232326 232326",
        nombreEquipo: "SAN MARTÍN (T)"
    },
    "smt/alternativa/blue": {
        codigo: "/colors blue 90 FFFFFF E31515 232326 232326",
        nombreEquipo: "SAN MARTÍN (T)"
    },
    "smt/tercera/red": {
        codigo: "/colors red 0 FFFFFF FF3A43 6F3C45 6F3C45",
        nombreEquipo: "SAN MARTÍN (T)"
    },
    "smt/tercera/blue": {
        codigo: "/colors blue 0 FFFFFF FF3A43 6F3C45 6F3C45",
        nombreEquipo: "SAN MARTÍN (T)"
    },

    // ATL. TUCUMÁN
    "atu/titular/red": {
        codigo: "/colors red 180 575A5B 71AFDB FFFFFF 71AFDB",
        nombreEquipo: "ATL. TUCUMÁN"
    },
    "atu/titular/blue": {
        codigo: "/colors blue 180 575A5B 71AFDB FFFFFF 71AFDB",
        nombreEquipo: "ATL. TUCUMÁN"
    },
    "atu/alternativa/red": {
        codigo: "/colors red 180 CCD5E6 151A37",
        nombreEquipo: "ATL. TUCUMÁN"
    },
    "atu/alternativa/blue": {
        codigo: "/colors blue 180 CCD5E6 151A37",
        nombreEquipo: "ATL. TUCUMÁN"
    },

    // FERRO
    "fco/titular/red": {
        codigo: "/colors red 66 FFFFFF 046C43 219A57 2DB563",
        nombreEquipo: "FERRO"
    },
    "fco/titular/blue": {
        codigo: "/colors blue 66 FFFFFF 00895B 01935D 01935D",
        nombreEquipo: "FERRO"
    },
    "fco/alternativa/red": {
        codigo: "/colors red 90 016C3E FAFDFF C2DCD9 51BDA3",
        nombreEquipo: "FERRO"
    },
    "fco/alternativa/blue": {
        codigo: "/colors blue 90 016C3E FAFDFF C2DCD9 51BDA3",
        nombreEquipo: "FERRO"
    },

    // NACIONAL (UY)
    "nac/titular/red": {
        codigo: "/colors red 180 F9020A FAF9FF",
        nombreEquipo: "NACIONAL (UY)"
    },
    "nac/titular/blue": {
        codigo: "/colors blue 180 F9020A FAF9FF",
        nombreEquipo: "NACIONAL (UY)"
    },
    "nac/alternativa/red": {
        codigo: "/colors red 55 D0142C 003895 FFFFFF 003895",
        nombreEquipo: "NACIONAL (UY)"
    },
    "nac/alternativa/blue": {
        codigo: "/colors blue 55 D0142C 003895 FFFFFF 003895",
        nombreEquipo: "NACIONAL (UY)"
    },

    // PEÑAROL
    "pen/titular/red": {
        codigo: "/colors red 180 FFFFFF 272525 F7CF00 272525",
        nombreEquipo: "PEÑAROL"
    },
    "pen/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 272525 F7CF00 272525",
        nombreEquipo: "PEÑAROL"
    },
    "pen/alternativa/red": {
        codigo: "/colors red 90 EABA07 F5D205 211B1B 211B1B",
        nombreEquipo: "PEÑAROL"
    },
    "pen/alternativa/blue": {
        codigo: "/colors blue 90 EABA07 F5D205 211B1B 211B1B",
        nombreEquipo: "PEÑAROL"
    },
    "pen/tercera/red": {
        codigo: "/colors red 60 EAD300 8B8A8F A1A0A5 B2B1B6",
        nombreEquipo: "PEÑAROL"
    },
    "pen/tercera/blue": {
        codigo: "/colors blue 60 EAD300 8B8A8F A1A0A5 B2B1B6",
        nombreEquipo: "PEÑAROL"
    },

    // QUILMES
    "qui/titular/red": {
        codigo: "/colors red 90 032051 9BADBC FFFFFF FFFFFF",
        nombreEquipo: "QUILMES"
    },
    "qui/titular/blue": {
        codigo: "/colors blue 90 032051 9BADBC FFFFFF FFFFFF",
        nombreEquipo: "QUILMES"
    },
    "qui/alternativa/red": {
        codigo: "/colors red 90 FFFFFF 004FC6 00215E 00215E",
        nombreEquipo: "QUILMES"
    },
    "qui/alternativa/blue": {
        codigo: "/colors blue 90 FFFFFF 004FC6 00215E 00215E",
        nombreEquipo: "QUILMES"
    },
    "qui/tercera/red": {
        codigo: "/colors red 152 FFFFFF 2C2F36 15181F 2C2F36",
        nombreEquipo: "QUILMES"
    },
    "qui/tercera/blue": {
        codigo: "/colors blue 152 FFFFFF 2C2F36 15181F 2C2F36",
        nombreEquipo: "QUILMES"
    },

    // NUEVA CHICAGO
    "nch/titular/red": {
        codigo: "/colors red 360 FFFFFF 3AC991 000000 3AC991",
        nombreEquipo: "NUEVA CHICAGO"
    },
    "nch/titular/blue": {
        codigo: "/colors blue 360 FFFFFF 3AC991 000000 3AC991",
        nombreEquipo: "NUEVA CHICAGO"
    },

    // MORÓN
    "mor/titular/red": {
        codigo: "/colors red 90 242B35 FFFFFF E21C1C FFFFFF",
        nombreEquipo: "MORÓN"
    },
    "mor/titular/blue": {
        codigo: "/colors blue 90 242B35 FFFFFF E21C1C FFFFFF",
        nombreEquipo: "MORÓN"
    },

    // UNIÓN
    "uni/titular/red": {
        codigo: "/colors red 180 007FD6 DA251D FFFFFF DA251D",
        nombreEquipo: "UNIÓN"
    },
    "uni/titular/blue": {
        codigo: "/colors blue 180 007FD6 DA251D FFFFFF DA251D",
        nombreEquipo: "UNIÓN"
    },
    "uni/alternativa/red": {
        codigo: "/colors red 129 F2F3F5 ED1F29 0177CF 0295E3",
        nombreEquipo: "UNIÓN"
    },
    "uni/alternativa/blue": {
        codigo: "/colors blue 129 F2F3F5 ED1F29 0177CF 0295E3",
        nombreEquipo: "UNIÓN"
    },
    // COLÓN
    "csf/titular/red": {
        codigo: "/colors red 0 E0C069 C80000 000000",
        nombreEquipo: "COLÓN"
    },
    "csf/titular/blue": {
        codigo: "/colors blue 0 E0C069 C80000 000000",
        nombreEquipo: "COLÓN"
    },
    "csf/alternativa/red": {
        codigo: "/colors red 61 000000 7B0C1D FFFFFF FFFFFF",
        nombreEquipo: "COLÓN"
    },
    "csf/alternativa/blue": {
        codigo: "/colors blue 61 000000 7B0C1D FFFFFF FFFFFF",
        nombreEquipo: "COLÓN"
    },
    "csf/tercera/red": {
        codigo: "/colors red 60 F9C78C 18161B",
        nombreEquipo: "COLÓN"
    },
    "csf/tercera/blue": {
        codigo: "/colors blue 60 F9C78C 18161B",
        nombreEquipo: "COLÓN"
    },

    // ARSENAL DE SARANDÍ
    "arse/titular/red": {
        codigo: "/colors red 33 FFFFFF 00AEEF EE3E34 00AEEF",
        nombreEquipo: "ARSENAL DE SARANDÍ"
    },
    "arse/titular/blue": {
        codigo: "/colors blue 33 FFFFFF 00AEEF EE3E34 00AEEF",
        nombreEquipo: "ARSENAL DE SARANDÍ"
    },
    "arse/alternativa/red": {
        codigo: "/colors red 33 FFFFFF 1D1E1E F52626 1D1E1E",
        nombreEquipo: "ARSENAL DE SARANDÍ"
    },
    "arse/alternativa/blue": {
        codigo: "/colors blue 33 FFFFFF 1D1E1E F52626 1D1E1E",
        nombreEquipo: "ARSENAL DE SARANDÍ"
    },
    "arse/tercera/red": {
        codigo: "/colors red 180 E61B37 FFFFFF FFFFFF 3BA1F6",
        nombreEquipo: "ARSENAL DE SARANDÍ"
    },
    "arse/tercera/blue": {
        codigo: "/colors blue 180 E61B37 FFFFFF FFFFFF 3BA1F6",
        nombreEquipo: "ARSENAL DE SARANDÍ"
    },

    // DOCK SUD
    "doc/titular/red": {
        codigo: "/colors red 180 FFFFFF 254494 F3C706 254494",
        nombreEquipo: "DOCK SUD"
    },
    "doc/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 254494 F3C706 254494",
        nombreEquipo: "DOCK SUD"
    },

    // COLOMBIA
    "col/titular/red": {
        codigo: "/colors red 240 3C4462 FDFD02",
        nombreEquipo: "COLOMBIA"
    },
    "col/titular/blue": {
        codigo: "/colors blue 240 3C4462 FDFD02",
        nombreEquipo: "COLOMBIA"
    },
    "col/alternativa/red": {
        codigo: "/colors red 60 F1EB56 3671AF 3168A0 1E477C",
        nombreEquipo: "COLOMBIA"
    },
    "col/alternativa/blue": {
        codigo: "/colors blue 60 F1EB56 3671AF 3168A0 1E477C",
        nombreEquipo: "COLOMBIA"
    },
    "col/bandera/red": {
        codigo: "/colors red 90 FFFFFF FCD116 003893 CE1126",
        nombreEquipo: "COLOMBIA"
    },
    "col/bandera/blue": {
        codigo: "/colors blue 90 FFFFFF FCD116 003893 CE1126",
        nombreEquipo: "COLOMBIA"
    },

    // PERÚ
    "per/titular/red": {
        codigo: "/colors red 52 000000 FFFFFF DF1117 FFFFFF",
        nombreEquipo: "PERÚ"
    },
    "per/titular/blue": {
        codigo: "/colors blue 52 000000 FFFFFF DF1117 FFFFFF",
        nombreEquipo: "PERÚ"
    },
    "per/alternativa/red": {
        codigo: "/colors red 52 000000 DC1E1E FFFFFF DC1E1E",
        nombreEquipo: "PERÚ"
    },
    "per/alternativa/blue": {
        codigo: "/colors blue 52 000000 DC1E1E FFFFFF DC1E1E",
        nombreEquipo: "PERÚ"
    },

    // WEST BROM
    "wba/titular/red": {
        codigo: "/colors red 180 DE2B2E FFFFFF 1B2A41 FFFFFF",
        nombreEquipo: "WEST BROM"
    },
    "wba/titular/blue": {
        codigo: "/colors blue 180 DE2B2E FFFFFF 1B2A41 FFFFFF",
        nombreEquipo: "WEST BROM"
    },

    // ASTON VILLA
    "avl/titular/red": {
        codigo: "/colors red 130 FFFFFF C5DBF3 97012F 6A0D2A",
        nombreEquipo: "ASTON VILLA"
    },
    "avl/titular/blue": {
        codigo: "/colors blue 130 FFFFFF C5DBF3 97012F 6A0D2A",
        nombreEquipo: "ASTON VILLA"
    },

    // FULHAM FC
    "ful/titular/red": {
        codigo: "/colors red 90 1E202C F0EFF5",
        nombreEquipo: "FULHAM FC"
    },
    "ful/titular/blue": {
        codigo: "/colors blue 90 1E202C F0EFF5",
        nombreEquipo: "FULHAM FC"
    },
    "ful/alternativa/red": {
        codigo: "/colors red 180 FFFFFF C71B29 372729 C71B29",
        nombreEquipo: "FULHAM FC"
    },
    "ful/alternativa/blue": {
        codigo: "/colors blue 180 FFFFFF C71B29 372729 C71B29",
        nombreEquipo: "FULHAM FC"
    },
    "ful/clasica/red": {
        codigo: "/colors red 180 E41B15 000000 FFFFFF 000000",
        nombreEquipo: "FULHAM FC"
    },
    "ful/clasica/blue": {
        codigo: "/colors blue 180 E41B15 000000 FFFFFF 000000",
        nombreEquipo: "FULHAM FC"
    },

    // LEICESTER
    "lei/titular/red": {
        codigo: "/colors red 270 FFFFFF 364CFA 3035FF",
        nombreEquipo: "LEICESTER"
    },
    "lei/titular/blue": {
        codigo: "/colors blue 270 FFFFFF 364CFA 3035FF",
        nombreEquipo: "LEICESTER"
    },

    // DANUBIO
    "dan/titular/red": {
        codigo: "/colors red 50 DB0D24 FFFFFF 131514 FFFFFF",
        nombreEquipo: "DANUBIO"
    },
    "dan/titular/blue": {
        codigo: "/colors blue 50 DB0D24 FFFFFF 131514 FFFFFF",
        nombreEquipo: "DANUBIO"
    },

    // RAMPLA JRS
    "ram/titular/red": {
        codigo: "/colors red 180 FFFFFF FF2E3B 1D836D FF2E3B",
        nombreEquipo: "RAMPLA JRS"
    },
    "ram/titular/blue": {
        codigo: "/colors blue 180 FFFFFF FF2E3B 1D836D FF2E3B",
        nombreEquipo: "RAMPLA JRS"
    },

    // SACACHISPAS
    "sch/titular/red": {
        codigo: "/colors red 180 201766 C8B8F8 FFFFFF C8B8F8",
        nombreEquipo: "SACACHISPAS"
    },
    "sch/titular/blue": {
        codigo: "/colors blue 180 201766 C8B8F8 FFFFFF C8B8F8",
        nombreEquipo: "SACACHISPAS"
    },
    "sch/alternativa/red": {
        codigo: "/colors red 56 FFFFFF 5944A5 AF94D9",
        nombreEquipo: "SACACHISPAS"
    },
    "sch/alternativa/blue": {
        codigo: "/colors blue 56 FFFFFF 5944A5 AF94D9",
        nombreEquipo: "SACACHISPAS"
    },

    // HOLANDA
    "hol/titular/red": {
        codigo: "/colors red 66 221817 FEA304 FEB71E FFE064",
        nombreEquipo: "HOLANDA"
    },
    "hol/titular/blue": {
        codigo: "/colors blue 66 221817 FEA304 FEB71E FFE064",
        nombreEquipo: "HOLANDA"
    },
    "hol/alternativa/red": {
        codigo: "/colors red 90 FF7309 1D1D1F",
        nombreEquipo: "HOLANDA"
    },
    "hol/alternativa/blue": {
        codigo: "/colors blue 90 FF7309 1D1D1F",
        nombreEquipo: "HOLANDA"
    },
    "hol/alternativa/2019/red": {
        codigo: "/colors red 90 0D285F 4ECDE4 47BAD9 3CA1C7",
        nombreEquipo: "HOLANDA"
    },
    "hol/alternativa/2019/blue": {
        codigo: "/colors blue 90 0D285F 4ECDE4 47BAD9 3CA1C7",
        nombreEquipo: "HOLANDA"
    },
    "hol/retro/red": {
        codigo: "/colors red 90 2E2624 F87032 F7965F F2BEA6",
        nombreEquipo: "HOLANDA"
    },
    "hol/retro/blue": {
        codigo: "/colors blue 90 2E2624 F87032 F7965F F2BEA6",
        nombreEquipo: "HOLANDA"
    },
    "hol/bandera/red": {
        codigo: "/colors red 90 000000 AE1C28 FFFFFF 21468B",
        nombreEquipo: "HOLANDA"
    },
    "hol/bandera/blue": {
        codigo: "/colors blue 90 000000 AE1C28 FFFFFF 21468B",
        nombreEquipo: "HOLANDA"
    },
    "hol/titular/2014/red": {
        codigo: "/colors red 240 F9F8F6 FF6F1C",
        nombreEquipo: "HOLANDA"
    },
    "hol/titular/2014/blue": {
        codigo: "/colors blue 240 F9F8F6 FF6F1C",
        nombreEquipo: "HOLANDA"
    },
// BOLIVIA
    "bol/titular/red": {
        codigo: "/colors red 180 FFFFFF 26A057",
        nombreEquipo: "BOLIVIA"
    },
    "bol/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 26A057",
        nombreEquipo: "BOLIVIA"
    },

// ITALIA
    "ita/titular/red": {
        codigo: "/colors red 65 F1F3F2 167ED0 1268BF 0959B8",
        nombreEquipo: "ITALIA"
    },
    "ita/titular/blue": {
        codigo: "/colors blue 65 F1F3F2 167ED0 1268BF 0959B8",
        nombreEquipo: "ITALIA"
    },
    "ita/alternativa/red": {
        codigo: "/colors red 69 004FAC 213651 F4F4F2 F4F4F2",
        nombreEquipo: "ITALIA"
    },
    "ita/alternativa/blue": {
        codigo: "/colors blue 69 004FAC 213651 F4F4F2 F4F4F2",
        nombreEquipo: "ITALIA"
    },
    "ita/bandera/red": {
        codigo: "/colors red 0 0064AA 009E3F FFFFFF E40321",
        nombreEquipo: "ITALIA"
    },
    "ita/bandera/blue": {
        codigo: "/colors blue 0 0064AA 009E3F FFFFFF E40321",
        nombreEquipo: "ITALIA"
    },

// INGLATERRA
    "ing/titular/red": {
        codigo: "/colors red 180 F3010F F8F8F8",
        nombreEquipo: "INGLATERRA"
    },
    "ing/titular/blue": {
        codigo: "/colors blue 180 F3010F F8F8F8",
        nombreEquipo: "INGLATERRA"
    },
    "ing/alternativa/red": {
        codigo: "/colors red 60 F2F4F3 F4080A",
        nombreEquipo: "INGLATERRA"
    },
    "ing/alternativa/blue": {
        codigo: "/colors blue 60 F2F4F3 F4080A",
        nombreEquipo: "INGLATERRA"
    },

// PARAGUAY
    "pgy/titular/red": {
        codigo: "/colors red 180 0380DC F61527 FFFFFF F61527",
        nombreEquipo: "PARAGUAY"
    },
    "pgy/titular/blue": {
        codigo: "/colors blue 180 0380DC F61527 FFFFFF F61527",
        nombreEquipo: "PARAGUAY"
    },
    "pgy/alternativa/red": {
        codigo: "/colors red 55 FFFFFF 024EAE 024EAE 033C9A",
        nombreEquipo: "PARAGUAY"
    },
    "pgy/alternativa/blue": {
        codigo: "/colors blue 55 FFFFFF 024EAE 024EAE 033C9A",
        nombreEquipo: "PARAGUAY"
    },

// VENEZUELA
    "ven/titular/red": {
        codigo: "/colors red 180 FFFFFF 8F021D",
        nombreEquipo: "VENEZUELA"
    },
    "ven/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 8F021D",
        nombreEquipo: "VENEZUELA"
    },
    "ven/alternativa/red": {
        codigo: "/colors red 90 8F2937 F8FAF9 F8FAF9 F3F5F4",
        nombreEquipo: "VENEZUELA"
    },
    "ven/alternativa/blue": {
        codigo: "/colors blue 90 8F2937 F8FAF9 F8FAF9 F3F5F4",
        nombreEquipo: "VENEZUELA"
    },

// QATAR
    "qat/titular/red": {
        codigo: "/colors red 90 F1EFF4 9B003C 940139 940139",
        nombreEquipo: "QATAR"
    },
    "qat/titular/blue": {
        codigo: "/colors blue 90 F1EFF4 9B003C 940139 940139",
        nombreEquipo: "QATAR"
    },
    "qat/alternativa/red": {
        codigo: "/colors red 90 9B232F FFFFFF",
        nombreEquipo: "QATAR"
    },
    "qat/alternativa/blue": {
        codigo: "/colors blue 90 9B232F FFFFFF",
        nombreEquipo: "QATAR"
    },

// AJAX
    "aja/titular/red": {
        codigo: "/colors red 180 B8BCC2 FCFAFC E11025 FCFAFC",
        nombreEquipo: "AJAX"
    },
    "aja/titular/blue": {
        codigo: "/colors blue 180 B8BCC2 FCFAFC E11025 FCFAFC",
        nombreEquipo: "AJAX"
    },
    "aja/alternativa/red": {
        codigo: "/colors red 180 EE7024 255459 05707C 255459",
        nombreEquipo: "AJAX"
    },
    "aja/alternativa/blue": {
        codigo: "/colors blue 180 EE7024 255459 05707C 255459",
        nombreEquipo: "AJAX"
    },

// PSV
    "psv/titular/red": {
        codigo: "/colors red 180 030303 FFFFFF FA2747 FFFFFF",
        nombreEquipo: "PSV"
    },
    "psv/titular/blue": {
        codigo: "/colors blue 180 030303 FFFFFF FA2747 FFFFFF",
        nombreEquipo: "PSV"
    },
    // FEYENOORD
    "fey/titular/red": {
        codigo: "/colors red 180 000000 FFFFFF FA203B",
        nombreEquipo: "FEYENOORD"
    },
    "fey/titular/blue": {
        codigo: "/colors blue 180 000000 FFFFFF FA203B",
        nombreEquipo: "FEYENOORD"
    },

    // PSG
    "psg/titular/red": {
        codigo: "/colors red 180 F4F5F7 25406C 203C65 25406C",
        nombreEquipo: "PSG"
    },
    "psg/titular/blue": {
        codigo: "/colors blue 180 F4F5F7 25406C 203C65 25406C",
        nombreEquipo: "PSG"
    },
    "psg/alternativa/red": {
        codigo: "/colors red 180 3B363C F5F4F9 FFD4E5 F5F4F9",
        nombreEquipo: "PSG"
    },
    "psg/alternativa/blue": {
        codigo: "/colors blue 180 3B363C F5F4F9 FFD4E5 F5F4F9",
        nombreEquipo: "PSG"
    },
    "psg/tercera/red": {
        codigo: "/colors red 90 F5F5F7 26252B 75767E 26252B",
        nombreEquipo: "PSG"
    },
    "psg/tercera/blue": {
        codigo: "/colors blue 90 F5F5F7 26252B 75767E 26252B",
        nombreEquipo: "PSG"
    },

    // DEPORTIVO RIESTRA
    "rie/titular/red": {
        codigo: "/colors red 40 FFFFFF 1D1C21",
        nombreEquipo: "DEP. RIESTRA"
    },
    "rie/titular/blue": {
        codigo: "/colors blue 40 FFFFFF 1D1C21",
        nombreEquipo: "DEP. RIESTRA"
    },
    "rie/alternativa/red": {
        codigo: "/colors red 40 19161B FDFDFD",
        nombreEquipo: "DEP. RIESTRA"
    },
    "rie/alternativa/blue": {
        codigo: "/colors blue 40 19161B FDFDFD",
        nombreEquipo: "DEP. RIESTRA"
    },

    // CENTRAL CÓRDOBA
    "ccs/titular/red": {
        codigo: "/colors red 180 C22B34 231F20 FFFFFF 231F20",
        nombreEquipo: "CENTRAL CÓRDOBA"
    },
    "ccs/titular/blue": {
        codigo: "/colors blue 180 C22B34 231F20 FFFFFF 231F20",
        nombreEquipo: "CENTRAL CÓRDOBA"
    },
    "ccs/alternativa/red": {
        codigo: "/colors red 90 FFFFFF 9C181C 9C181C C02122",
        nombreEquipo: "CENTRAL CÓRDOBA"
    },
    "ccs/alternativa/blue": {
        codigo: "/colors blue 90 FFFFFF 9C181C 9C181C C02122",
        nombreEquipo: "CENTRAL CÓRDOBA"
    },
    "ccs/tercera/red": {
        codigo: "/colors red 50 CA0009 E7E7E7 FBFBFB",
        nombreEquipo: "CENTRAL CÓRDOBA"
    },
    "ccs/tercera/blue": {
        codigo: "/colors blue 50 CA0009 E7E7E7 FBFBFB",
        nombreEquipo: "CENTRAL CÓRDOBA"
    },

    // OGC NICE
    "ogc/titular/red": {
        codigo: "/colors red 180 FFFFFF FD2725 0C0D11 FD2725",
        nombreEquipo: "OGC NICE"
    },
    "ogc/titular/blue": {
        codigo: "/colors blue 180 FFFFFF FD2725 0C0D11 FD2725",
        nombreEquipo: "OGC NICE"
    },

    // OLYMPIQUE MARSELLA
    "om/titular/red": {
        codigo: "/colors red 72 43CEEC 29CCF1 F6F4FC F6F4FC",
        nombreEquipo: "OLYMPIQUE MARSELLA"
    },
    "om/titular/blue": {
        codigo: "/colors blue 72 43CEEC 29CCF1 F6F4FC F6F4FC",
        nombreEquipo: "OLYMPIQUE MARSELLA"
    },
    "om/alternativa/red": {
        codigo: "/colors red 61 FFFFFF 24ADEA 1473E5",
        nombreEquipo: "OLYMPIQUE MARSELLA"
    },
    "om/alternativa/blue": {
        codigo: "/colors blue 61 FFFFFF 24ADEA 1473E5",
        nombreEquipo: "OLYMPIQUE MARSELLA"
    },

    // AS ROMA
    "rom/titular/red": {
        codigo: "/colors red 0 FFB200 8F001C",
        nombreEquipo: "AS ROMA"
    },
    "rom/titular/blue": {
        codigo: "/colors blue 0 FFB200 8F001C",
        nombreEquipo: "AS ROMA"
    },
    "rom/alternativa/red": {
        codigo: "/colors red 180 6E0F19 F6F7FA",
        nombreEquipo: "AS ROMA"
    },
    "rom/alternativa/blue": {
        codigo: "/colors blue 180 6E0F19 F6F7FA",
        nombreEquipo: "AS ROMA"
    },
    "rom/tercera/red": {
        codigo: "/colors red 90 F9B105 172952 1C2446",
        nombreEquipo: "AS ROMA"
    },
    "rom/tercera/blue": {
        codigo: "/colors blue 90 F9B105 172952 1C2446",
        nombreEquipo: "AS ROMA"
    },

    // FIORENTINA
    "fio/titular/red": {
        codigo: "/colors red 180 FFFFFF 55338A",
        nombreEquipo: "FIORENTINA"
    },
    "fio/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 55338A",
        nombreEquipo: "FIORENTINA"
    },
    "fio/alternativa/red": {
        codigo: "/colors red 90 8559BD FFFFFF 422A6E FFFFFF",
        nombreEquipo: "FIORENTINA"
    },
    "fio/alternativa/blue": {
        codigo: "/colors blue 90 8559BD FFFFFF 422A6E FFFFFF",
        nombreEquipo: "FIORENTINA"
    },

    // LAZIO
    "laz/titular/red": {
        codigo: "/colors red 180 FFFFFF 81C6EE 8CCAEE 81C6EE",
        nombreEquipo: "LAZIO"
    },
    "laz/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 81C6EE 8CCAEE 81C6EE",
        nombreEquipo: "LAZIO"
    },
    "laz/alternativa/red": {
        codigo: "/colors red 90 1E2E50 FFFFFF 86BBEF FFFFFF",
        nombreEquipo: "LAZIO"
    },
    "laz/alternativa/blue": {
        codigo: "/colors blue 90 1E2E50 FFFFFF 86BBEF FFFFFF",
        nombreEquipo: "LAZIO"
    },
    "laz/tercera/red": {
        codigo: "/colors red 90 C3E9FE 0F1217",
        nombreEquipo: "LAZIO"
    },
    "laz/tercera/blue": {
        codigo: "/colors blue 90 C3E9FE 0F1217",
        nombreEquipo: "LAZIO"
    },

    // SAN MARTÍN (SJ)
    "smsj/titular/red": {
        codigo: "/colors red 180 FFFFFF 131311 4EA280 131311",
        nombreEquipo: "SAN MARTIN (SJ)"
    },
    "smsj/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 131311 4EA280 131311",
        nombreEquipo: "SAN MARTIN (SJ)"
    },
    "smsj/alternativa/red": {
        codigo: "/colors red 180 030303 FFFFFF 48C079 FFFFFF",
        nombreEquipo: "SAN MARTIN (SJ)"
    },
    "smsj/alternativa/blue": {
        codigo: "/colors blue 180 030303 FFFFFF 48C079 FFFFFF",
        nombreEquipo: "SAN MARTIN (SJ)"
    },

    // GODOY CRUZ
    "god/titular/red": {
        codigo: "/colors red 180 73B0E1 096FCC FFFFFF 096FCC",
        nombreEquipo: "GODOY CRUZ"
    },
    "god/titular/blue": {
        codigo: "/colors blue 180 73B0E1 096FCC FFFFFF 096FCC",
        nombreEquipo: "GODOY CRUZ"
    },
    "god/alternativa/red": {
        codigo: "/colors red 90 055BD2 0060C7 FFFFFF FFFFFF",
        nombreEquipo: "GODOY CRUZ"
    },
    "god/alternativa/blue": {
        codigo: "/colors blue 90 055BD2 0060C7 FFFFFF FFFFFF",
        nombreEquipo: "GODOY CRUZ"
    },
    "god/tercera/red": {
        codigo: "/colors red 90 FFFFFF 881325 5F0D1A 881325",
        nombreEquipo: "GODOY CRUZ"
    },
    "god/tercera/blue": {
        codigo: "/colors blue 90 FFFFFF 881325 5F0D1A 881325",
        nombreEquipo: "GODOY CRUZ"
    },

    // VÉLEZ
    "vel/titular/red": {
        codigo: "/colors red 180 0063A8 FFFFFF",
        nombreEquipo: "VÉLEZ"
    },
    "vel/titular/blue": {
        codigo: "/colors blue 180 0063A8 FFFFFF",
        nombreEquipo: "VÉLEZ"
    },
    "vel/alternativa/red": {
        codigo: "/colors red 90 FFFFFF 2C3EA2 2E42B5 3248C4",
        nombreEquipo: "VÉLEZ"
    },
    "vel/alternativa/blue": {
        codigo: "/colors blue 90 FFFFFF 2C3EA2 2E42B5 3248C4",
        nombreEquipo: "VÉLEZ"
    },
    "vel/tercera/red": {
        codigo: "/colors red 0 000000 097C7F FFFFFF F11931",
        nombreEquipo: "VÉLEZ"
    },
    "vel/tercera/blue": {
        codigo: "/colors blue 0 000000 097C7F FFFFFF F11931",
        nombreEquipo: "VÉLEZ"
    },

    // FLAMENGO
    "fla/titular/red": {
        codigo: "/colors red 90 FFFFFF DD0125 211F25 DD0125",
        nombreEquipo: "FLAMENGO"
    },
    "fla/titular/blue": {
        codigo: "/colors blue 90 FFFFFF DD0125 211F25 DD0125",
        nombreEquipo: "FLAMENGO"
    },
    "fla/alternativa/red": {
        codigo: "/colors red 90 DE111E EEEFF1 1B1F1F 872C32",
        nombreEquipo: "FLAMENGO"
    },
    "fla/alternativa/blue": {
        codigo: "/colors blue 90 DE111E EEEFF1 1B1F1F 872C32",
        nombreEquipo: "FLAMENGO"
    },
    "fla/tercera/red": {
        codigo: "/colors red 90 C1E23F 36363C",
        nombreEquipo: "FLAMENGO"
    },
    "fla/tercera/blue": {
        codigo: "/colors blue 90 C1E23F 36363C",
        nombreEquipo: "FLAMENGO"
    },
    // SC INTERNACIONAL
    "sci/titular/red": {
        codigo: "/colors red 90 FFFFFF FF020C",
        nombreEquipo: "SC INTERNACIONAL"
    },
    "sci/titular/blue": {
        codigo: "/colors blue 90 FFFFFF FF020C",
        nombreEquipo: "SC INTERNACIONAL"
    },
    "sci/alternativa/red": {
        codigo: "/colors red 64 66020A F9F9FA C71B20 F9F9FA",
        nombreEquipo: "SC INTERNACIONAL"
    },
    "sci/alternativa/blue": {
        codigo: "/colors blue 64 66020A F9F9FA C71B20 F9F9FA",
        nombreEquipo: "SC INTERNACIONAL"
    },

    // SANTOS FC
    "san/titular/red": {
        codigo: "/colors red 90 3B4043 F1F5F6",
        nombreEquipo: "SANTOS FC"
    },
    "san/titular/blue": {
        codigo: "/colors blue 90 3B4043 F1F5F6",
        nombreEquipo: "SANTOS FC"
    },
    "san/alternativa/red": {
        codigo: "/colors red 180 D6BD62 2C2B33 F9F8FD 2C2B33",
        nombreEquipo: "SANTOS FC"
    },
    "san/alternativa/blue": {
        codigo: "/colors blue 180 D6BD62 2C2B33 F9F8FD 2C2B33",
        nombreEquipo: "SANTOS FC"
    },
    "san/tercera/red": {
        codigo: "/colors red 225 A7ADB1 282A35 282A35 393C45",
        nombreEquipo: "SANTOS FC"
    },
    "san/tercera/blue": {
        codigo: "/colors blue 225 A7ADB1 282A35 282A35 393C45",
        nombreEquipo: "SANTOS FC"
    },

    // SAO PAULO
    "sao/titular/red": {
        codigo: "/colors red 90 3C3B3E F91E0B F5F5F5 1C1D21",
        nombreEquipo: "SAO PAULO"
    },
    "sao/titular/blue": {
        codigo: "/colors blue 90 3C3B3E F91E0B F5F5F5 1C1D21",
        nombreEquipo: "SAO PAULO"
    },
    "sao/alternativa/red": {
        codigo: "/colors red 180 F2273A 221C1E EAE8EB ED2436",
        nombreEquipo: "SAO PAULO"
    },
    "sao/alternativa/blue": {
        codigo: "/colors blue 180 F2273A 221C1E EAE8EB ED2436",
        nombreEquipo: "SAO PAULO"
    },

    // CORINTHIANS
    "cor/titular/red": {
        codigo: "/colors red 90 000000 F4F4F6",
        nombreEquipo: "CORINTHIANS"
    },
    "cor/titular/blue": {
        codigo: "/colors blue 90 000000 F4F4F6",
        nombreEquipo: "CORINTHIANS"
    },
    "cor/alternativa/red": {
        codigo: "/colors red 360 FFFFFF 1F1E20",
        nombreEquipo: "CORINTHIANS"
    },
    "cor/alternativa/blue": {
        codigo: "/colors blue 360 FFFFFF 1F1E20",
        nombreEquipo: "CORINTHIANS"
    },

    // VASCO DA GAMA
    "vas/titular/red": {
        codigo: "/colors red 29 D42A2A 19181B E6E6E4 19181B",
        nombreEquipo: "VASCO DA GAMA"
    },
    "vas/titular/blue": {
        codigo: "/colors blue 29 D42A2A 19181B E6E6E4 19181B",
        nombreEquipo: "VASCO DA GAMA"
    },
    "vas/alternativa/red": {
        codigo: "/colors red 29 D42A2A FEFEFE 1C1C1C FEFEFE",
        nombreEquipo: "VASCO DA GAMA"
    },
    "vas/alternativa/blue": {
        codigo: "/colors blue 29 D42A2A FEFEFE 1C1C1C FEFEFE",
        nombreEquipo: "VASCO DA GAMA"
    },

    // BOTAFOGO
    "bot/titular/red": {
        codigo: "/colors red 180 777B87 1C1F26 FFFFFF 1C1F26",
        nombreEquipo: "BOTAFOGO"
    },
    "bot/titular/blue": {
        codigo: "/colors blue 180 777B87 1C1F26 FFFFFF 1C1F26",
        nombreEquipo: "BOTAFOGO"
    },
    "bot/alternativa/red": {
        codigo: "/colors red 180 FFFFFF 161719",
        nombreEquipo: "BOTAFOGO"
    },
    "bot/alternativa/blue": {
        codigo: "/colors blue 180 FFFFFF 161719",
        nombreEquipo: "BOTAFOGO"
    },

    // FLUMINENSE
    "flu/titular/red": {
        codigo: "/colors red 180 FFFFFF 9E0424 1C6137 9E0424",
        nombreEquipo: "FLUMINENSE"
    },
    "flu/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 9E0424 1C6137 9E0424",
        nombreEquipo: "FLUMINENSE"
    },

    // MINEIRO
    "cam/titular/red": {
        codigo: "/colors red 180 F21828 EFF2F7 2B2529 EFF2F7",
        nombreEquipo: "MINEIRO"
    },
    "cam/titular/blue": {
        codigo: "/colors blue 180 F21828 EFF2F7 2B2529 EFF2F7",
        nombreEquipo: "MINEIRO"
    },
    "cam/alternativa/red": {
        codigo: "/colors red 180 1D1E24 FFFFFF",
        nombreEquipo: "MINEIRO"
    },
    "cam/alternativa/blue": {
        codigo: "/colors blue 180 1D1E24 FFFFFF",
        nombreEquipo: "MINEIRO"
    },

    // ATLÉTICO NACIONAL (COL)
    "atn/titular/red": {
        codigo: "/colors red 180 B2C9BB 178B36 FCFCFC 178B36",
        nombreEquipo: "ATL. NACIONAL (COL)"
    },
    "atn/titular/blue": {
        codigo: "/colors blue 180 B2C9BB 178B36 FCFCFC 178B36",
        nombreEquipo: "ATL. NACIONAL (COL)"
    },
    "atn/alternativa/red": {
        codigo: "/colors red -136 008A26 F6F6F8 E6E8EA",
        nombreEquipo: "ATL. NACIONAL (COL)"
    },
    "atn/alternativa/blue": {
        codigo: "/colors blue -136 008A26 F6F6F8 E6E8EA",
        nombreEquipo: "ATL. NACIONAL (COL)"
    },

    // MILLONARIOS
    "mil/titular/red": {
        codigo: "/colors red 180 FFFFFF 0846AD",
        nombreEquipo: "MILLONARIOS"
    },
    "mil/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 0846AD",
        nombreEquipo: "MILLONARIOS"
    },
    "mil/alternativa/red": {
        codigo: "/colors red 180 093794 F7F7F7",
        nombreEquipo: "MILLONARIOS"
    },
    "mil/alternativa/blue": {
        codigo: "/colors blue 180 093794 F7F7F7",
        nombreEquipo: "MILLONARIOS"
    },

    // AMÉRICA DE CALI
    "ame/titular/red": {
        codigo: "/colors red 60 FFFFFF E81B1D",
        nombreEquipo: "AMÉRICA DE CALI"
    },
    "ame/titular/blue": {
        codigo: "/colors blue 60 FFFFFF E81B1D",
        nombreEquipo: "AMÉRICA DE CALI"
    },
    "ame/alternativa/red": {
        codigo: "/colors red 60 C91212 F8F8F8",
        nombreEquipo: "AMÉRICA DE CALI"
    },
    "ame/alternativa/blue": {
        codigo: "/colors blue 60 C91212 F8F8F8",
        nombreEquipo: "AMÉRICA DE CALI"
    },

    // SANTA FE (COL)
    "sfe/titular/red": {
        codigo: "/colors red 90 E0E0E0 F6F6F8 EB0505 EB0505",
        nombreEquipo: "SANTA FE (COL)"
    },
    "sfe/titular/blue": {
        codigo: "/colors blue 90 E0E0E0 F6F6F8 EB0505 EB0505",
        nombreEquipo: "SANTA FE (COL)"
    },
    "sfe/alternativa/red": {
        codigo: "/colors red 90 EB0505 EB0505 FFFFFF FFFFFF",
        nombreEquipo: "SANTA FE (COL)"
    },
    "sfe/alternativa/blue": {
        codigo: "/colors blue 90 EB0505 EB0505 FFFFFF FFFFFF",
        nombreEquipo: "SANTA FE (COL)"
    },

    // DEPORTIVO CALI
    "cal/titular/red": {
        codigo: "/colors red 90 FFFFFF 05393C 013037 05393C",
        nombreEquipo: "DEPORTIVO CALI"
    },
    "cal/titular/blue": {
        codigo: "/colors blue 90 FFFFFF 05393C 013037 05393C",
        nombreEquipo: "DEPORTIVO CALI"
    },
    "cal/alternativa/red": {
        codigo: "/colors red 90 1B474B EFEFEF FFFFFF EFEFEF",
        nombreEquipo: "DEPORTIVO CALI"
    },
    "cal/alternativa/blue": {
        codigo: "/colors blue 90 1B474B EFEFEF FFFFFF EFEFEF",
        nombreEquipo: "DEPORTIVO CALI"
    },
    "cal/tercera/red": {
        codigo: "/colors red 90 4E514D 7DF356",
        nombreEquipo: "DEPORTIVO CALI"
    },
    "cal/tercera/blue": {
        codigo: "/colors blue 90 4E514D 7DF356",
        nombreEquipo: "DEPORTIVO CALI"
    },

    // ONCE CALDAS
    "onc/titular/red": {
        codigo: "/colors red 180 171717 FFFFFF",
        nombreEquipo: "ONCE CALDAS"
    },
    "onc/titular/blue": {
        codigo: "/colors blue 180 171717 FFFFFF",
        nombreEquipo: "ONCE CALDAS"
    },
    "onc/alternativa/red": {
        codigo: "/colors red 40 FFFFFF 171717",
        nombreEquipo: "ONCE CALDAS"
    },
    "onc/alternativa/blue": {
        codigo: "/colors blue 40 FFFFFF 171717",
        nombreEquipo: "ONCE CALDAS"
    },
    "onc/tercera/red": {
        codigo: "/colors red 40 FFFFFF 1C69BB",
        nombreEquipo: "ONCE CALDAS"
    },
    "onc/tercera/blue": {
        codigo: "/colors blue 40 FFFFFF 1C69BB",
        nombreEquipo: "ONCE CALDAS"
    },

    // CERRO PORTEÑO
    "ccp/titular/red": {
        codigo: "/colors red 180 FFFFFF E10602 00158C E10602",
        nombreEquipo: "CERRO PORTEÑO"
    },
    "ccp/titular/blue": {
        codigo: "/colors blue 180 FFFFFF E10602 00158C E10602",
        nombreEquipo: "CERRO PORTEÑO"
    },
    "ccp/alternativa/red": {
        codigo: "/colors red 60 1A3E7A FFFFFF",
        nombreEquipo: "CERRO PORTEÑO"
    },
    "ccp/alternativa/blue": {
        codigo: "/colors blue 60 1A3E7A FFFFFF",
        nombreEquipo: "CERRO PORTEÑO"
    },

    // OLIMPIA
    "oli/titular/red": {
        codigo: "/colors red 90 A28026 FFFFFF 0D0D0D FFFFFF",
        nombreEquipo: "OLIMPIA"
    },
    "oli/titular/blue": {
        codigo: "/colors blue 90 A28026 FFFFFF 0D0D0D FFFFFF",
        nombreEquipo: "OLIMPIA"
    },
    "oli/alternativa/red": {
        codigo: "/colors red 40 FFFFFF 48424C",
        nombreEquipo: "OLIMPIA"
    },
    "oli/alternativa/blue": {
        codigo: "/colors blue 40 FFFFFF 48424C",
        nombreEquipo: "OLIMPIA"
    },

    // GUARANÍ
    "gua/titular/red": {
        codigo: "/colors red 180 FFFFFF FDD537 1C1B16 FDD537",
        nombreEquipo: "GUARANÍ"
    },
    "gua/titular/blue": {
        codigo: "/colors blue 180 FFFFFF FDD537 1C1B16 FDD537",
        nombreEquipo: "GUARANÍ"
    },
    "gua/alternativa/red": {
        codigo: "/colors red 180 FFFFFF 504B48 201F1B 504B48",
        nombreEquipo: "GUARANÍ"
    },
    "gua/alternativa/blue": {
        codigo: "/colors blue 180 FFFFFF 504B48 201F1B 504B48",
        nombreEquipo: "GUARANÍ"
    },
    // LIBERTAD
    "lib/titular/red": {
        codigo: "/colors red 180 5D636E FFFFFF 16161E FFFFFF",
        nombreEquipo: "LIBERTAD"
    },
    "lib/titular/blue": {
        codigo: "/colors blue 180 5D636E FFFFFF 16161E FFFFFF",
        nombreEquipo: "LIBERTAD"
    },
    "lib/alternativa/red": {
        codigo: "/colors red 40 FFFFFF 171B1E",
        nombreEquipo: "LIBERTAD"
    },
    "lib/alternativa/blue": {
        codigo: "/colors blue 40 FFFFFF 171B1E",
        nombreEquipo: "LIBERTAD"
    },

    // SOUTHAMPTON
    "sou/titular/red": {
        codigo: "/colors red 180 191B1F FF0028 FFFFFF FF0028",
        nombreEquipo: "SOUTHAMPTON"
    },
    "sou/titular/blue": {
        codigo: "/colors blue 180 191B1F FF0028 FFFFFF FF0028",
        nombreEquipo: "SOUTHAMPTON"
    },
    "sou/alternativa/red": {
        codigo: "/colors red 90 E2FB40 FDFE4B 283639 283639",
        nombreEquipo: "SOUTHAMPTON"
    },
    "sou/alternativa/blue": {
        codigo: "/colors blue 90 E2FB40 FDFE4B 283639 283639",
        nombreEquipo: "SOUTHAMPTON"
    },

    // WATFORD
    "wat/titular/red": {
        codigo: "/colors red 180 F53117 FADF09 161616",
        nombreEquipo: "WATFORD"
    },
    "wat/titular/blue": {
        codigo: "/colors blue 180 F53117 FADF09 161616",
        nombreEquipo: "WATFORD"
    },

    // WILLEM II
    "wil/titular/red": {
        codigo: "/colors red 180 0A0A0A 223263 FFFFFF F7014C",
        nombreEquipo: "WILLEM II"
    },
    "wil/titular/blue": {
        codigo: "/colors blue 180 0A0A0A 223263 FFFFFF F7014C",
        nombreEquipo: "WILLEM II"
    },
    "wil/alternativa/red": {
        codigo: "/colors red 180 FFFFFF A42F62 6B436F A42F62",
        nombreEquipo: "WILLEM II"
    },
    "wil/alternativa/blue": {
        codigo: "/colors blue 180 FFFFFF A42F62 6B436F A42F62",
        nombreEquipo: "WILLEM II"
    },
    "wil/tercera/red": {
        codigo: "/colors red 90 C09926 C72C27 FFFFFF 0A2245",
        nombreEquipo: "WILLEM II"
    },
    "wil/tercera/blue": {
        codigo: "/colors blue 90 C09926 C72C27 FFFFFF 0A2245",
        nombreEquipo: "WILLEM II"
    },

    // ALVARADO
    "alv/titular/red": {
        codigo: "/colors red 44 091021 1E2F55 FFFFFF 1E2F55",
        nombreEquipo: "ALVARADO"
    },
    "alv/titular/blue": {
        codigo: "/colors blue 44 091021 1E2F55 FFFFFF 1E2F55",
        nombreEquipo: "ALVARADO"
    },
    "alv/alternativa/red": {
        codigo: "/colors red 33 091021 FFFFFF 022C77 FFFFFF",
        nombreEquipo: "ALVARADO"
    },
    "alv/alternativa/blue": {
        codigo: "/colors blue 33 091021 FFFFFF 022C77 FFFFFF",
        nombreEquipo: "ALVARADO"
    },

    // AGROPECUARIO
    "agr/titular/red": {
        codigo: "/colors red 180 FCFCFC 168C4B BA2C24 168C4B",
        nombreEquipo: "AGROPECUARIO"
    },
    "agr/titular/blue": {
        codigo: "/colors blue 180 FCFCFC 168C4B BA2C24 168C4B",
        nombreEquipo: "AGROPECUARIO"
    },
    "agr/alternativa/red": {
        codigo: "/colors red 180 151515 1C5F3A FFFFFF BA2C24",
        nombreEquipo: "AGROPECUARIO"
    },
    "agr/alternativa/blue": {
        codigo: "/colors blue 180 151515 1C5F3A FFFFFF BA2C24",
        nombreEquipo: "AGROPECUARIO"
    },

    // RIVER (UY)
    "riu/titular/red": {
        codigo: "/colors red 360 000000 FFFFFF D20502 FFFFFF",
        nombreEquipo: "RIVER (UY)"
    },
    "riu/titular/blue": {
        codigo: "/colors blue 360 000000 FFFFFF D20502 FFFFFF",
        nombreEquipo: "RIVER (UY)"
    },
    "riu/alternativa/red": {
        codigo: "/colors red 180 FFFFFF FE0002",
        nombreEquipo: "RIVER (UY)"
    },
    "riu/alternativa/blue": {
        codigo: "/colors blue 180 FFFFFF FE0002",
        nombreEquipo: "RIVER (UY)"
    },

    // GALATASARAY
    "gs/titular/red": {
        codigo: "/colors red 0 FFFFFF FBBA00 AB092E",
        nombreEquipo: "GALATASARAY"
    },
    "gs/titular/blue": {
        codigo: "/colors blue 0 FFFFFF FBBA00 AB092E",
        nombreEquipo: "GALATASARAY"
    },
    "gs/alternativa/red": {
        codigo: "/colors red 180 8D1D1D E3CFB3",
        nombreEquipo: "GALATASARAY"
    },
    "gs/alternativa/blue": {
        codigo: "/colors blue 180 8D1D1D E3CFB3",
        nombreEquipo: "GALATASARAY"
    },
    "gs/tercera/red": {
        codigo: "/colors red 180 AB1D28 C9C5C9",
        nombreEquipo: "GALATASARAY"
    },
    "gs/tercera/blue": {
        codigo: "/colors blue 180 AB1D28 C9C5C9",
        nombreEquipo: "GALATASARAY"
    },
    // FENERBAHCE
    "fb/titular/red": {
        codigo: "/colors red 180 020E1F FFF100 014582 FFF100",
        nombreEquipo: "FENERBAHCE"
    },
    "fb/titular/blue": {
        codigo: "/colors blue 180 020E1F FFF100 014582 FFF100",
        nombreEquipo: "FENERBAHCE"
    },
    "fb/alternativa/red": {
        codigo: "/colors red 180 2F3A67 F4E800",
        nombreEquipo: "FENERBAHCE"
    },
    "fb/alternativa/blue": {
        codigo: "/colors blue 180 2F3A67 F4E800",
        nombreEquipo: "FENERBAHCE"
    },

    // BESIKTAS
    "bjk/titular/red": {
        codigo: "/colors red 180 000000 FFFFFF",
        nombreEquipo: "BESIKTAS"
    },
    "bjk/titular/blue": {
        codigo: "/colors blue 180 000000 FFFFFF",
        nombreEquipo: "BESIKTAS"
    },
    "bjk/alternativa/red": {
        codigo: "/colors red 180 000000 FB3333",
        nombreEquipo: "BESIKTAS"
    },
    "bjk/alternativa/blue": {
        codigo: "/colors blue 180 000000 FB3333",
        nombreEquipo: "BESIKTAS"
    },

    // AMÉRICA (MX)
    "amc/titular/red": {
        codigo: "/colors red 180 223346 FBF993",
        nombreEquipo: "AMÉRICA (MX)"
    },
    "amc/titular/blue": {
        codigo: "/colors blue 180 223346 FBF993",
        nombreEquipo: "AMÉRICA (MX)"
    },
    "amc/alternativa/red": {
        codigo: "/colors red 180 F2F2F2 1A2C38",
        nombreEquipo: "AMÉRICA (MX)"
    },
    "amc/alternativa/blue": {
        codigo: "/colors blue 180 F2F2F2 1A2C38",
        nombreEquipo: "AMÉRICA (MX)"
    },

    // CRUZ AZUL
    "cruz/titular/red": {
        codigo: "/colors red 180 FFFFFF 263D9A",
        nombreEquipo: "CRUZ AZUL"
    },
    "cruz/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 263D9A",
        nombreEquipo: "CRUZ AZUL"
    },
    "cruz/alternativa/red": {
        codigo: "/colors red 180 31357E FFFFFF",
        nombreEquipo: "CRUZ AZUL"
    },
    "cruz/alternativa/blue": {
        codigo: "/colors blue 180 31357E FFFFFF",
        nombreEquipo: "CRUZ AZUL"
    },

    // MONTERREY
    "mty/titular/red": {
        codigo: "/colors red 180 7D7E80 23354F FFFFFF 23354F",
        nombreEquipo: "MONTERREY"
    },
    "mty/titular/blue": {
        codigo: "/colors blue 180 7D7E80 23354F FFFFFF 23354F",
        nombreEquipo: "MONTERREY"
    },

    // CHIVAS
    "chv/titular/red": {
        codigo: "/colors red 180 052E4E FFFFFF FE3548 FFFFFF",
        nombreEquipo: "CHIVAS"
    },
    "chv/titular/blue": {
        codigo: "/colors blue 180 052E4E FFFFFF FE3548 FFFFFF",
        nombreEquipo: "CHIVAS"
    },

    // TIGRES
    "tgs/titular/red": {
        codigo: "/colors red 90 04407A FBC026 017CD9 FBC026",
        nombreEquipo: "TIGRES"
    },
    "tgs/titular/blue": {
        codigo: "/colors blue 90 04407A FBC026 017CD9 FBC026",
        nombreEquipo: "TIGRES"
    },

    // LIGA DE QUITO
    "ldu/titular/red": {
        codigo: "/colors red 360 060541 FFFFFF",
        nombreEquipo: "LIGA DE QUITO"
    },
    "ldu/titular/blue": {
        codigo: "/colors blue 360 060541 FFFFFF",
        nombreEquipo: "LIGA DE QUITO"
    },
    "ldu/alternativa/red": {
        codigo: "/colors red 180 D1BF58 D8060E",
        nombreEquipo: "LIGA DE QUITO"
    },
    "ldu/alternativa/blue": {
        codigo: "/colors blue 180 D1BF58 D8060E",
        nombreEquipo: "LIGA DE QUITO"
    },
    "ldu/tercera/red": {
        codigo: "/colors red 180 F53315 111832",
        nombreEquipo: "LIGA DE QUITO"
    },
    "ldu/tercera/blue": {
        codigo: "/colors blue 180 F53315 111832",
        nombreEquipo: "LIGA DE QUITO"
    },

    // BARCELONA SC
    "bsc/titular/red": {
        codigo: "/colors red 180 C90613 F9D532",
        nombreEquipo: "BARCELONA SC"
    },
    "bsc/titular/blue": {
        codigo: "/colors blue 180 C90613 F9D532",
        nombreEquipo: "BARCELONA SC"
    },
    "bsc/alternativa/red": {
        codigo: "/colors red 180 FD6600 67020F",
        nombreEquipo: "BARCELONA SC"
    },
    "bsc/alternativa/blue": {
        codigo: "/colors blue 180 FD6600 67020F",
        nombreEquipo: "BARCELONA SC"
    },

    // EMELEC
    "eme/titular/red": {
        codigo: "/colors red 148 FFFFFF 025CCC 004390 025CCC",
        nombreEquipo: "EMELEC"
    },
    "eme/titular/blue": {
        codigo: "/colors blue 148 FFFFFF 025CCC 004390 025CCC",
        nombreEquipo: "EMELEC"
    },
    "eme/alternativa/red": {
        codigo: "/colors red 180 0151C2 FFFFFF",
        nombreEquipo: "EMELEC"
    },
    "eme/alternativa/blue": {
        codigo: "/colors blue 180 0151C2 FFFFFF",
        nombreEquipo: "EMELEC"
    },

    // INDEPENDIENTE DEL VALLE
    "idv/titular/red": {
        codigo: "/colors red 90 FFFFFF 001638 001638 001638",
        nombreEquipo: "INDEPENDIENTE DEL VALLE"
    },
    "idv/titular/blue": {
        codigo: "/colors blue 90 FFFFFF 001638 001638 001638",
        nombreEquipo: "INDEPENDIENTE DEL VALLE"
    },
    "idv/alternativa/red": {
        codigo: "/colors red 90 FFFFFF EC70AC EC599F E45195",
        nombreEquipo: "INDEPENDIENTE DEL VALLE"
    },
    "idv/alternativa/blue": {
        codigo: "/colors blue 90 FFFFFF EC70AC EC599F E45195",
        nombreEquipo: "INDEPENDIENTE DEL VALLE"
    },
    "idv/clasica/red": {
        codigo: "/colors red 180 FFFFFF 012D6B 231F20 012D6B",
        nombreEquipo: "INDEPENDIENTE DEL VALLE"
    },
    "idv/clasica/blue": {
        codigo: "/colors blue 180 FFFFFF 012D6B 231F20 012D6B",
        nombreEquipo: "INDEPENDIENTE DEL VALLE"
    },

    // OLYMPIQUE LYON
    "ol/titular/red": {
        codigo: "/colors red 60 113A80 FBFDFC",
        nombreEquipo: "OLYMPIQUE LYON"
    },
    "ol/titular/blue": {
        codigo: "/colors blue 60 113A80 FBFDFC",
        nombreEquipo: "OLYMPIQUE LYON"
    },
    "ol/alternativa/red": {
        codigo: "/colors red 0 E8E9EA 212C52 1D3C7F 212C52",
        nombreEquipo: "OLYMPIQUE LYON"
    },
    "ol/alternativa/blue": {
        codigo: "/colors blue 0 E8E9EA 222C52 1D3C7F 222C52",
        nombreEquipo: "OLYMPIQUE LYON"
    },

    // SAN TELMO
    "stel/titular/red": {
        codigo: "/colors red 180 FFFFFF 3CADFE 24364C 3CADFE",
        nombreEquipo: "SAN TELMO"
    },
    "stel/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 3CADFE 24364C 3CADFE",
        nombreEquipo: "SAN TELMO"
    },
    "stel/alternativa/red": {
        codigo: "/colors red 90 FFFFFF 0D2B43 39A2FE FFFFFF",
        nombreEquipo: "SAN TELMO"
    },
    "stel/alternativa/blue": {
        codigo: "/colors blue 90 FFFFFF 0D2B43 39A2FE FFFFFF",
        nombreEquipo: "SAN TELMO"
    },

    // DEPORTIVO MERLO
    "mer/titular/red": {
        codigo: "/colors red 45 666A78 FFFFFF 050C40 FFFFFF",
        nombreEquipo: "DEP. MERLO"
    },
    "mer/titular/blue": {
        codigo: "/colors blue 45 666A78 FFFFFF 050C40 FFFFFF",
        nombreEquipo: "DEP. MERLO"
    },
    "mer/alternativa/red": {
        codigo: "/colors red 45 FFFFFF 050505 04113D 050505",
        nombreEquipo: "DEP. MERLO"
    },
    "mer/alternativa/blue": {
        codigo: "/colors blue 45 FFFFFF 050505 04113D 050505",
        nombreEquipo: "DEP. MERLO"
    },
    "mer/tercera/red": {
        codigo: "/colors red 90 FFFFFF 660B0A",
        nombreEquipo: "DEP. MERLO"
    },
    "mer/tercera/blue": {
        codigo: "/colors blue 90 FFFFFF 660B0A",
        nombreEquipo: "DEP. MERLO"
    },

    // ARGENTINO DE QUILMES
    "adq/titular/red": {
        codigo: "/colors red 180 0A0A0A FFFFFF 76C4F0 FFFFFF",
        nombreEquipo: "ARGENTINO DE QUILMES"
    },
    "adq/titular/blue": {
        codigo: "/colors blue 180 0A0A0A FFFFFF 76C4F0 FFFFFF",
        nombreEquipo: "ARGENTINO DE QUILMES"
    },
    "adq/alternativa/red": {
        codigo: "/colors red 180 FFFFFF 777A89 000000 777A89",
        nombreEquipo: "ARGENTINO DE QUILMES"
    },
    "adq/alternativa/blue": {
        codigo: "/colors blue 180 FFFFFF 777A89 000000 777A89",
        nombreEquipo: "ARGENTINO DE QUILMES"
    },

    // VALENCIA
    "val/titular/red": {
        codigo: "/colors red 33 141205 FE7103 F8F7F8 F8F7F8",
        nombreEquipo: "VALENCIA"
    },
    "val/titular/blue": {
        codigo: "/colors blue 33 141205 FE7103 F8F7F8 F8F7F8",
        nombreEquipo: "VALENCIA"
    },
    "val/alternativa/red": {
        codigo: "/colors red 90 FF671E E55C19 161419 161419",
        nombreEquipo: "VALENCIA"
    },
    "val/alternativa/blue": {
        codigo: "/colors blue 90 FF671E E55C19 161419 161419",
        nombreEquipo: "VALENCIA"
    },
    "val/tercera/red": {
        codigo: "/colors red 123 F0FDFE 0C83D5 21BCF4",
        nombreEquipo: "VALENCIA"
    },
    "val/tercera/blue": {
        codigo: "/colors blue 123 F0FDFE 0C83D5 21BCF4",
        nombreEquipo: "VALENCIA"
    },

    // REAL BETIS
    "bet/titular/red": {
        codigo: "/colors red 180 000000 2CB764 FFFFFF 2CB764",
        nombreEquipo: "REAL BETIS"
    },
    "bet/titular/blue": {
        codigo: "/colors blue 180 000000 2CB764 FFFFFF 2CB764",
        nombreEquipo: "REAL BETIS"
    },

    // CRYSTAL PALACE
    "cry/titular/red": {
        codigo: "/colors red 180 FFFFFF C11930 01449B C11930",
        nombreEquipo: "CRYSTAL PALACE"
    },
    "cry/titular/blue": {
        codigo: "/colors blue 180 FFFFFF C11930 01449B C11930",
        nombreEquipo: "CRYSTAL PALACE"
    },
    "cry/alternativa/red": {
        codigo: "/colors red 180 FFFFFF 242227 01449B 242227",
        nombreEquipo: "CRYSTAL PALACE"
    },
    "cry/alternativa/blue": {
        codigo: "/colors blue 180 FFFFFF 242227 01449B 242227",
        nombreEquipo: "CRYSTAL PALACE"
    },
    "cry/tercera/red": {
        codigo: "/colors red 45 0731C3 FFFFFF ED1628 FFFFFF",
        nombreEquipo: "CRYSTAL PALACE"
    },
    "cry/tercera/blue": {
        codigo: "/colors blue 45 0731C3 FFFFFF ED1628 FFFFFF",
        nombreEquipo: "CRYSTAL PALACE"
    },

    // JUVENTUD ANTONIANA
    "cja/titular/red": {
        codigo: "/colors red 45 8892A6 FFFFFF 304268 FFFFFF",
        nombreEquipo: "JUVENTUD ANTONIANA"
    },
    "cja/titular/blue": {
        codigo: "/colors blue 45 8892A6 FFFFFF 304268 FFFFFF",
        nombreEquipo: "JUVENTUD ANTONIANA"
    },
    "cja/alternativa/red": {
        codigo: "/colors red 180 FFFFFF 17286E 304268 17286E",
        nombreEquipo: "JUVENTUD ANTONIANA"
    },
    "cja/alternativa/blue": {
        codigo: "/colors blue 180 FFFFFF 17286E 304268 17286E",
        nombreEquipo: "JUVENTUD ANTONIANA"
    },
    "cja/tercera/red": {
        codigo: "/colors red 45 0F1014 113653 FFFFFF 3D2813",
        nombreEquipo: "JUVENTUD ANTONIANA"
    },
    "cja/tercera/blue": {
        codigo: "/colors blue 45 0F1014 113653 FFFFFF 3D2813",
        nombreEquipo: "JUVENTUD ANTONIANA"
    },

    // GIMNASIA Y TIRO
    "gyt/titular/red": {
        codigo: "/colors red 180 000000 A8E0F9 FFFFFF A8E0F9",
        nombreEquipo: "GIMNASIA Y TIRO"
    },
    "gyt/titular/blue": {
        codigo: "/colors blue 180 000000 A8E0F9 FFFFFF A8E0F9",
        nombreEquipo: "GIMNASIA Y TIRO"
    },
    "gyt/alternativa/red": {
        codigo: "/colors red 180 FFFFFF 141657 181965 141657",
        nombreEquipo: "GIMNASIA Y TIRO"
    },
    "gyt/alternativa/blue": {
        codigo: "/colors blue 180 FFFFFF 141657 181965 141657",
        nombreEquipo: "GIMNASIA Y TIRO"
    },
    "gyt/tercera/red": {
        codigo: "/colors red 45 FFFFFF 0A0A0A",
        nombreEquipo: "GIMNASIA Y TIRO"
    },
    "gyt/tercera/blue": {
        codigo: "/colors blue 45 FFFFFF 0A0A0A",
        nombreEquipo: "GIMNASIA Y TIRO"
    },

    // PATRONATO
    "pat/titular/red": {
        codigo: "/colors red 180 FFFFFF B20000 0C0C0C B20000",
        nombreEquipo: "PATRONATO"
    },
    "pat/titular/blue": {
        codigo: "/colors blue 180 FFFFFF B20000 0C0C0C B20000",
        nombreEquipo: "PATRONATO"
    },
    "pat/alternativa/red": {
        codigo: "/colors red 180 000000 E8171F FFFFFF FFFFFF",
        nombreEquipo: "PATRONATO"
    },
    "pat/alternativa/blue": {
        codigo: "/colors blue 180 000000 E8171F FFFFFF FFFFFF",
        nombreEquipo: "PATRONATO"
    },

    // RAYO VALLECANO
    "ray/titular/red": {
        codigo: "/colors red 28 000000 FFFFFF FF2E29 FFFFFF",
        nombreEquipo: "RAYO VALLECANO"
    },
    "ray/titular/blue": {
        codigo: "/colors blue 28 000000 FFFFFF FF2E29 FFFFFF",
        nombreEquipo: "RAYO VALLECANO"
    },
    "ray/alternativa/red": {
        codigo: "/colors red 28 FFFFFF FE322B 130F10 FE322B",
        nombreEquipo: "RAYO VALLECANO"
    },
    "ray/alternativa/blue": {
        codigo: "/colors blue 28 FFFFFF FE322B 130F10 FE322B",
        nombreEquipo: "RAYO VALLECANO"
    },
    "ray/tercera/red": {
        codigo: "/colors red 28 FFFFFF 130F10 00A4D2 130F10",
        nombreEquipo: "RAYO VALLECANO"
    },
    "ray/tercera/blue": {
        codigo: "/colors blue 28 FFFFFF 130F10 00A4D2 130F10",
        nombreEquipo: "RAYO VALLECANO"
    },

    // LEVANTE
    "lev/titular/red": {
        codigo: "/colors red 180 FFFFFF 0A1E97 A60727 0A1E97",
        nombreEquipo: "LEVANTE"
    },
    "lev/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 0A1E97 A60727 0A1E97",
        nombreEquipo: "LEVANTE"
    },
    "lev/alternativa/red": {
        codigo: "/colors red 180 191717 FFFFFF 000DD8 FFFFFF",
        nombreEquipo: "LEVANTE"
    },
    "lev/alternativa/blue": {
        codigo: "/colors blue 180 191717 FFFFFF 000DD8 FFFFFF",
        nombreEquipo: "LEVANTE"
    },
    "lev/tercera/red": {
        codigo: "/colors red 180 191717 E2E2E2",
        nombreEquipo: "LEVANTE"
    },
    "lev/tercera/blue": {
        codigo: "/colors blue 180 191717 E2E2E2",
        nombreEquipo: "LEVANTE"
    },

    // GETAFE
    "get/titular/red": {
        codigo: "/colors red 180 FFFFFF 086BD3",
        nombreEquipo: "GETAFE"
    },
    "get/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 086BD3",
        nombreEquipo: "GETAFE"
    },
    "get/alternativa/red": {
        codigo: "/colors red 180 FFFFFF F34C28",
        nombreEquipo: "GETAFE"
    },
    "get/alternativa/blue": {
        codigo: "/colors blue 180 FFFFFF F34C28",
        nombreEquipo: "GETAFE"
    },

    // ZENIT
    "zen/titular/red": {
        codigo: "/colors red 146 FFFFFF 1BB1E3 0E8BC1 0F649A",
        nombreEquipo: "ZENIT"
    },
    "zen/titular/blue": {
        codigo: "/colors blue 146 FFFFFF 1BB1E3 0E8BC1 0F649A",
        nombreEquipo: "ZENIT"
    },
    "zen/alternativa/red": {
        codigo: "/colors red 180 0099C3 FFFFFF",
        nombreEquipo: "ZENIT"
    },
    "zen/alternativa/blue": {
        codigo: "/colors blue 180 0099C3 FFFFFF",
        nombreEquipo: "ZENIT"
    },

    // CSKA MOSCÚ
    "csk/titular/red": {
        codigo: "/colors red 180 FFFFFF FF2039 016AD7 FF2039",
        nombreEquipo: "CSKA MOSCÚ"
    },
    "csk/titular/blue": {
        codigo: "/colors blue 180 FFFFFF FF2039 016AD7 FF2039",
        nombreEquipo: "CSKA MOSCÚ"
    },
    "csk/alternativa/red": {
        codigo: "/colors red 180 024FBB FFFFFF FF2039 FFFFFF",
        nombreEquipo: "CSKA MOSCÚ"
    },
    "csk/alternativa/blue": {
        codigo: "/colors blue 180 024FBB FFFFFF FF2039 FFFFFF",
        nombreEquipo: "CSKA MOSCÚ"
    },
    "csk/tercera/red": {
        codigo: "/colors red 134 082957 FEAC48 FEAC48 01438F",
        nombreEquipo: "CSKA MOSCÚ"
    },
    "csk/tercera/blue": {
        codigo: "/colors blue 134 082957 FEAC48 FEAC48 01438F",
        nombreEquipo: "CSKA MOSCÚ"
    },

    // LOKOMOTIV
    "lok/titular/red": {
        codigo: "/colors red 236 FFFFFF 025948 025948 C70B24",
        nombreEquipo: "LOKOMOTIV"
    },
    "lok/titular/blue": {
        codigo: "/colors blue 236 FFFFFF 025948 025948 C70B24",
        nombreEquipo: "LOKOMOTIV"
    },
    "lok/alternativa/red": {
        codigo: "/colors red 90 E71218 026052 FFFFFF FFFFFF",
        nombreEquipo: "LOKOMOTIV"
    },
    "lok/alternativa/blue": {
        codigo: "/colors blue 90 E71218 026052 FFFFFF FFFFFF",
        nombreEquipo: "LOKOMOTIV"
    },
    "lok/tercera/red": {
        codigo: "/colors red 90 E0E2E1 CD090A 525157 525157",
        nombreEquipo: "LOKOMOTIV"
    },
    "lok/tercera/blue": {
        codigo: "/colors blue 90 E0E2E1 CD090A 525157 525157",
        nombreEquipo: "LOKOMOTIV"
    },
    // SPARTAK MOSCÚ
    "spm/titular/red": {
        codigo: "/colors red 90 8A939E D4001D FBFEFD D4001D",
        nombreEquipo: "SPARTAK MOSCÚ"
    },
    "spm/titular/blue": {
        codigo: "/colors blue 90 8A939E D4001D FBFEFD D4001D",
        nombreEquipo: "SPARTAK MOSCÚ"
    },
    "spm/alternativa/red": {
        codigo: "/colors red 90 4F0000 FFFFFF CE1D31 FFFFFF",
        nombreEquipo: "SPARTAK MOSCÚ"
    },
    "spm/alternativa/blue": {
        codigo: "/colors blue 90 4F0000 FFFFFF CE1D31 FFFFFF",
        nombreEquipo: "SPARTAK MOSCÚ"
    },

    // DYNAMO MOSCOW
    "din/titular/red": {
        codigo: "/colors red 90 FDFFFE 0066CD",
        nombreEquipo: "DYNAMO MOSCOW"
    },
    "din/titular/blue": {
        codigo: "/colors blue 90 FDFFFE 0066CD",
        nombreEquipo: "DYNAMO MOSCOW"
    },
    "din/alternativa/red": {
        codigo: "/colors red 90 1F71D7 FFFFFF",
        nombreEquipo: "DYNAMO MOSCOW"
    },
    "din/alternativa/blue": {
        codigo: "/colors blue 90 1F71D7 FFFFFF",
        nombreEquipo: "DYNAMO MOSCOW"
    },

    // DYNAMO KIEV
    "dyk/titular/red": {
        codigo: "/colors red 90 146DD3 FFFFFF",
        nombreEquipo: "DYNAMO KIEV"
    },
    "dyk/titular/blue": {
        codigo: "/colors blue 90 146DD3 FFFFFF",
        nombreEquipo: "DYNAMO KIEV"
    },
    "dyk/alternativa/red": {
        codigo: "/colors red 90 FFFFFF 0167B2",
        nombreEquipo: "DYNAMO KIEV"
    },
    "dyk/alternativa/blue": {
        codigo: "/colors blue 90 FFFFFF 0167B2",
        nombreEquipo: "DYNAMO KIEV"
    },

    // SHAKHTAR DONETSK
    "sha/titular/red": {
        codigo: "/colors red 1 000000 F39C4D EF3B24",
        nombreEquipo: "SHAKHTAR DONETSK"
    },
    "sha/titular/blue": {
        codigo: "/colors blue 1 000000 F39C4D EF3B24",
        nombreEquipo: "SHAKHTAR DONETSK"
    },
    "sha/alternativa/red": {
        codigo: "/colors red 1 000000 AC9E9B DAD0CF AC9E9B",
        nombreEquipo: "SHAKHTAR DONETSK"
    },
    "sha/alternativa/blue": {
        codigo: "/colors blue 1 000000 AC9E9B DAD0CF AC9E9B",
        nombreEquipo: "SHAKHTAR DONETSK"
    },

    // JAPÓN
    "jap/titular/red": {
        codigo: "/colors red 90 F4363B 202531 305797 388BE7",
        nombreEquipo: "JAPÓN"
    },
    "jap/titular/blue": {
        codigo: "/colors blue 90 F4363B 202531 305797 388BE7",
        nombreEquipo: "JAPÓN"
    },
    "jap/alternativa/red": {
        codigo: "/colors red 180 B52024 F7FDFF",
        nombreEquipo: "JAPÓN"
    },
    "jap/alternativa/blue": {
        codigo: "/colors blue 180 B52024 F7FDFF",
        nombreEquipo: "JAPÓN"
    },

    // NUEVA ZELANDA
    "nze/titular/red": {
        codigo: "/colors red 33 191E22 FFFFFF",
        nombreEquipo: "NUEVA ZELANDA"
    },
    "nze/titular/blue": {
        codigo: "/colors blue 33 191E22 FFFFFF",
        nombreEquipo: "NUEVA ZELANDA"
    },
    "nze/alternativa/red": {
        codigo: "/colors red 240 F5F5F5 232323 232323 2E2F33",
        nombreEquipo: "NUEVA ZELANDA"
    },
    "nze/alternativa/blue": {
        codigo: "/colors blue 240 F5F5F5 232323 232323 2E2F33",
        nombreEquipo: "NUEVA ZELANDA"
    },

    // COREA DEL NORTE
    "cno/titular/red": {
        codigo: "/colors red 33 FFFFFF FF0000",
        nombreEquipo: "COREA DEL NORTE"
    },
    "cno/titular/blue": {
        codigo: "/colors blue 33 FFFFFF FF0000",
        nombreEquipo: "COREA DEL NORTE"
    },
    "cno/alternativa/red": {
        codigo: "/colors red 240 FF0000 F5F9FF",
        nombreEquipo: "COREA DEL NORTE"
    },
    "cno/alternativa/blue": {
        codigo: "/colors blue 240 FF0000 F5F9FF",
        nombreEquipo: "COREA DEL NORTE"
    },
    "cno/bandera/red": {
        codigo: "/colors red 90 FFFFFF 024FA2 ED1C27 024FA2",
        nombreEquipo: "COREA DEL NORTE"
    },
    "cno/bandera/blue": {
        codigo: "/colors blue 90 FFFFFF 024FA2 ED1C27 024FA2",
        nombreEquipo: "COREA DEL NORTE"
    },

    // AUSTRIA
    "aut/titular/red": {
        codigo: "/colors red 33 FFFFFF D80B2A",
        nombreEquipo: "AUSTRIA"
    },
    "aut/titular/blue": {
        codigo: "/colors blue 33 FFFFFF D80B2A",
        nombreEquipo: "AUSTRIA"
    },
    "aut/alternativa/red": {
        codigo: "/colors red 240 000000 FFFFFF",
        nombreEquipo: "AUSTRIA"
    },
    "aut/alternativa/blue": {
        codigo: "/colors blue 240 000000 FFFFFF",
        nombreEquipo: "AUSTRIA"
    },
    "aut/bandera/red": {
        codigo: "/colors red 90 000000 ED2939 FFFFFF ED2939",
        nombreEquipo: "AUSTRIA"
    },
    "aut/bandera/blue": {
        codigo: "/colors blue 90 000000 ED2939 FFFFFF ED2939",
        nombreEquipo: "AUSTRIA"
    },

    // ATLANTA UNITED
    "atlu/titular/red": {
        codigo: "/colors red 180 C2B28E 222021 C70C41 222021",
        nombreEquipo: "ATLANTA UNITED"
    },
    "atlu/titular/blue": {
        codigo: "/colors blue 180 C2B28E 222021 C70C41 222021",
        nombreEquipo: "ATLANTA UNITED"
    },
    "atlu/alternativa/red": {
        codigo: "/colors red 240 FF774D E1E5E6",
        nombreEquipo: "ATLANTA UNITED"
    },
    "atlu/alternativa/blue": {
        codigo: "/colors blue 240 FF774D E1E5E6",
        nombreEquipo: "ATLANTA UNITED"
    },

    // LA GALAXY
    "la/titular/red": {
        codigo: "/colors red 35 FDC904 FFFFFF 232941 FFFFFF",
        nombreEquipo: "LA GALAXY"
    },
    "la/titular/blue": {
        codigo: "/colors blue 35 FDC904 FFFFFF 232941 FFFFFF",
        nombreEquipo: "LA GALAXY"
    },
    "la/alternativa/red": {
        codigo: "/colors red 180 FFFFFF 294A73 1E2037 294A73",
        nombreEquipo: "LA GALAXY"
    },
    "la/alternativa/blue": {
        codigo: "/colors blue 180 FFFFFF 294A73 1E2037 294A73",
        nombreEquipo: "LA GALAXY"
    },

    // TORONTO FC
    "tofc/titular/red": {
        codigo: "/colors red 33 FFFFFF E50126",
        nombreEquipo: "TORONTO FC"
    },
    "tofc/titular/blue": {
        codigo: "/colors blue 33 FFFFFF E50126",
        nombreEquipo: "TORONTO FC"
    },
    "tofc/alternativa/red": {
        codigo: "/colors red 240 1D1C21 E6EBEF",
        nombreEquipo: "TORONTO FC"
    },
    "tofc/alternativa/blue": {
        codigo: "/colors blue 240 1D1C21 E6EBEF",
        nombreEquipo: "TORONTO FC"
    },

    // NEW YORK CITY
    "nyc/titular/red": {
        codigo: "/colors red 33 102A5B 82BCEC",
        nombreEquipo: "NEW YORK CITY"
    },
    "nyc/titular/blue": {
        codigo: "/colors blue 33 102A5B 82BCEC",
        nombreEquipo: "NEW YORK CITY"
    },
    "nyc/alternativa/red": {
        codigo: "/colors red 240 7CBEEA 4D5361",
        nombreEquipo: "NEW YORK CITY"
    },
    "nyc/alternativa/blue": {
        codigo: "/colors blue 240 7CBEEA 4D5361",
        nombreEquipo: "NEW YORK CITY"
    },
    // LOS ANGELES FC
    "lafc/titular/red": {
        codigo: "/colors red 33 CBAD6F 322E2B",
        nombreEquipo: "LOS ANGELES FC"
    },
    "lafc/titular/blue": {
        codigo: "/colors blue 33 CBAD6F 322E2B",
        nombreEquipo: "LOS ANGELES FC"
    },
    "lafc/alternativa/red": {
        codigo: "/colors red 240 AEAFB1 EFEEF3",
        nombreEquipo: "LOS ANGELES FC"
    },
    "lafc/alternativa/blue": {
        codigo: "/colors blue 240 AEAFB1 EFEEF3",
        nombreEquipo: "LOS ANGELES FC"
    },

    // SEATTLE SOUNDERS
    "sea/titular/red": {
        codigo: "/colors red 33 FFFFFF 98C067",
        nombreEquipo: "SEATTLE SOUNDERS"
    },
    "sea/titular/blue": {
        codigo: "/colors blue 33 FFFFFF 98C067",
        nombreEquipo: "SEATTLE SOUNDERS"
    },
    "sea/alternativa/red": {
        codigo: "/colors red 240 FFFFFF 2C2A2F 2C2A2F E18298",
        nombreEquipo: "SEATTLE SOUNDERS"
    },
    "sea/alternativa/blue": {
        codigo: "/colors blue 240 FFFFFF 2C2A2F 2C2A2F E18298",
        nombreEquipo: "SEATTLE SOUNDERS"
    },

    // NEW YORK RED BULL
    "nyrb/titular/red": {
        codigo: "/colors red 33 8C0C2D D0D0D2",
        nombreEquipo: "NEW YORK RB"
    },
    "nyrb/titular/blue": {
        codigo: "/colors blue 33 8C0C2D D0D0D2",
        nombreEquipo: "NEW YORK RB"
    },
    "nyrb/alternativa/red": {
        codigo: "/colors red 240 FFFFFF F1273D",
        nombreEquipo: "NEW YORK RB"
    },
    "nyrb/alternativa/blue": {
        codigo: "/colors blue 240 FFFFFF F1273D",
        nombreEquipo: "NEW YORK RB"
    },

    // PORTLAND TIMBERS
    "ptim/titular/red": {
        codigo: "/colors red 90 DFB231 293728 31492F 293728",
        nombreEquipo: "PORTLAND TIMBERS"
    },
    "ptim/titular/blue": {
        codigo: "/colors blue 90 DFB231 293728 31492F 293728",
        nombreEquipo: "PORTLAND TIMBERS"
    },
    "ptim/alternativa/red": {
        codigo: "/colors red 240 486551 FFFFFF",
        nombreEquipo: "PORTLAND TIMBERS"
    },
    "ptim/alternativa/blue": {
        codigo: "/colors blue 240 486551 FFFFFF",
        nombreEquipo: "PORTLAND TIMBERS"
    },

    // COLO COLO
    "cco/titular/red": {
        codigo: "/colors red 33 000000 F6F6F7",
        nombreEquipo: "COLO COLO"
    },
    "cco/titular/blue": {
        codigo: "/colors blue 33 000000 F6F6F7",
        nombreEquipo: "COLO COLO"
    },
    "cco/alternativa/red": {
        codigo: "/colors red 240 CFCFCF 212223 212223 FFFFFF",
        nombreEquipo: "COLO COLO"
    },
    "cco/alternativa/blue": {
        codigo: "/colors blue 240 CFCFCF 212223 212223 FFFFFF",
        nombreEquipo: "COLO COLO"
    },

    // U DE CHILE
    "udc/titular/red": {
        codigo: "/colors red 33 F4F4F4 1C2445",
        nombreEquipo: "U DE CHILE"
    },
    "udc/titular/blue": {
        codigo: "/colors blue 33 F4F4F4 1C2445",
        nombreEquipo: "U DE CHILE"
    },
    "udc/alternativa/red": {
        codigo: "/colors red 90 F7F7F7 F33134 611C1C F33134",
        nombreEquipo: "U DE CHILE"
    },
    "udc/alternativa/blue": {
        codigo: "/colors blue 90 F7F7F7 F33134 611C1C F33134",
        nombreEquipo: "U DE CHILE"
    },

    // STRONGEST
    "stg/titular/red": {
        codigo: "/colors red 180 FFFFFF FECE2D 1D1B1E FECE2D",
        nombreEquipo: "STRONGEST"
    },
    "stg/titular/blue": {
        codigo: "/colors blue 180 FFFFFF FECE2D 1D1B1E FECE2D",
        nombreEquipo: "STRONGEST"
    },
    "stg/alternativa/red": {
        codigo: "/colors red 180 030303 FFFFFF EDAE00 FFFFFF",
        nombreEquipo: "STRONGEST"
    },
    "stg/alternativa/blue": {
        codigo: "/colors blue 180 030303 FFFFFF EDAE00 FFFFFF",
        nombreEquipo: "STRONGEST"
    },

    // WILSTERMANN
    "wtm/titular/red": {
        codigo: "/colors red 33 FFFFFF ED1E3C",
        nombreEquipo: "WILSTERMANN"
    },
    "wtm/titular/blue": {
        codigo: "/colors blue 33 FFFFFF ED1E3C",
        nombreEquipo: "WILSTERMANN"
    },
    "wtm/alternativa/red": {
        codigo: "/colors red 180 FFFFFF 1F3E70 16304C 1F3E70",
        nombreEquipo: "WILSTERMANN"
    },
    "wtm/alternativa/blue": {
        codigo: "/colors blue 180 FFFFFF 1F3E70 16304C 1F3E70",
        nombreEquipo: "WILSTERMANN"
    },

    // BOLIVAR
    "blv/titular/red": {
        codigo: "/colors red 33 21406B 92E2FF",
        nombreEquipo: "BOLIVAR"
    },
    "blv/titular/blue": {
        codigo: "/colors blue 33 21406B 92E2FF",
        nombreEquipo: "BOLIVAR"
    },
    "blv/alternativa/red": {
        codigo: "/colors red 180 D8DDEE 333B45",
        nombreEquipo: "BOLIVAR"
    },
    "blv/alternativa/blue": {
        codigo: "/colors blue 180 D8DDEE 333B45",
        nombreEquipo: "BOLIVAR"
    },

    // EVERTON FC
    "eve/titular/red": {
        codigo: "/colors red 180 F9F9F9 15428A",
        nombreEquipo: "EVERTON FC"
    },
    "eve/titular/blue": {
        codigo: "/colors blue 180 F9F9F9 15428A",
        nombreEquipo: "EVERTON FC"
    },
    "eve/alternativa/red": {
        codigo: "/colors red 180 0C1448 FA6754",
        nombreEquipo: "EVERTON FC"
    },
    "eve/alternativa/blue": {
        codigo: "/colors blue 180 0C1448 FA6754",
        nombreEquipo: "EVERTON FC"
    },

    // AS MONACO
    "asm/titular/red": {
        codigo: "/colors red 61 FEB60A B8242E AD232E FEFEFE",
        nombreEquipo: "AS MONACO"
    },
    "asm/titular/blue": {
        codigo: "/colors blue 61 FEB60A B8242E AD232E FEFEFE",
        nombreEquipo: "AS MONACO"
    },
    "asm/alternativa/red": {
        codigo: "/colors red 180 D5A651 1F2023",
        nombreEquipo: "AS MONACO"
    },
    "asm/alternativa/blue": {
        codigo: "/colors blue 180 D5A651 1F2023",
        nombreEquipo: "AS MONACO"
    },
    "asm/tercera/red": {
        codigo: "/colors red 180 255E9A 93D9F5",
        nombreEquipo: "AS MONACO"
    },
    "asm/tercera/blue": {
        codigo: "/colors blue 180 255E9A 93D9F5",
        nombreEquipo: "AS MONACO"
    },
    // ATALANTA
    "ata/titular/red": {
        codigo: "/colors red 180 FFFFFF 0269B8 251E25 0269B8",
        nombreEquipo: "ATALANTA"
    },
    "ata/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 0269B8 251E25 0269B8",
        nombreEquipo: "ATALANTA"
    },
    "ata/alternativa/red": {
        codigo: "/colors red 90 357FFF 2F71E2 181818 FFFFFF",
        nombreEquipo: "ATALANTA"
    },
    "ata/alternativa/blue": {
        codigo: "/colors blue 90 357FFF 2F71E2 181818 FFFFFF",
        nombreEquipo: "ATALANTA"
    },
    "ata/tercera/red": {
        codigo: "/colors red 0 FFFFFF 874834",
        nombreEquipo: "ATALANTA"
    },
    "ata/tercera/blue": {
        codigo: "/colors blue 0 FFFFFF 874834",
        nombreEquipo: "ATALANTA"
    },

    // FC BASEL
    "bas/titular/red": {
        codigo: "/colors red 180 FFFFFF BC051F BC051F 1B3F86",
        nombreEquipo: "FC BASEL"
    },
    "bas/titular/blue": {
        codigo: "/colors blue 180 FFFFFF BC051F BC051F 1B3F86",
        nombreEquipo: "FC BASEL"
    },
    "bas/alternativa/red": {
        codigo: "/colors red 0 1A1A1A E1E1E1",
        nombreEquipo: "FC BASEL"
    },
    "bas/alternativa/blue": {
        codigo: "/colors blue 0 1A1A1A E1E1E1",
        nombreEquipo: "FC BASEL"
    },
    "bas/tercera/red": {
        codigo: "/colors red 0 FFFFFF 222222",
        nombreEquipo: "FC BASEL"
    },
    "bas/tercera/blue": {
        codigo: "/colors blue 0 FFFFFF 222222",
        nombreEquipo: "FC BASEL"
    },
    "bas/clasica/red": {
        codigo: "/colors red 0 FFE500 E40327 0E3B85",
        nombreEquipo: "FC BASEL"
    },
    "bas/clasica/blue": {
        codigo: "/colors blue 0 FFE500 E40327 0E3B85",
        nombreEquipo: "FC BASEL"
    },

    // U CATÓLICA
    "uca/titular/red": {
        codigo: "/colors red 90 FE0000 FFFFFF 2148A0 FFFFFF",
        nombreEquipo: "U CATÓLICA"
    },
    "uca/titular/blue": {
        codigo: "/colors blue 90 FE0000 FFFFFF 2148A0 FFFFFF",
        nombreEquipo: "U CATÓLICA"
    },
    "uca/alternativa/red": {
        codigo: "/colors red 60 FFFFFF D22F1E",
        nombreEquipo: "U CATÓLICA"
    },
    "uca/alternativa/blue": {
        codigo: "/colors blue 60 FFFFFF D22F1E",
        nombreEquipo: "U CATÓLICA"
    },
    "uca/tercera/red": {
        codigo: "/colors red 90 FF0000 2148A0 FFFFFF 2148A0",
        nombreEquipo: "U CATÓLICA"
    },
    "uca/tercera/blue": {
        codigo: "/colors blue 90 FF0000 2148A0 FFFFFF 2148A0",
        nombreEquipo: "U CATÓLICA"
    },

    // COBRELOA
    "cob/titular/red": {
        codigo: "/colors red 30 FFFFFF FF4B15 CC3900",
        nombreEquipo: "COBRELOA"
    },
    "cob/titular/blue": {
        codigo: "/colors blue 30 FFFFFF FF4B15 CC3900",
        nombreEquipo: "COBRELOA"
    },
    "cob/alternativa/red": {
        codigo: "/colors red 30 000000 FFFFFF CFCFCF",
        nombreEquipo: "COBRELOA"
    },
    "cob/alternativa/blue": {
        codigo: "/colors blue 30 000000 FFFFFF CFCFCF",
        nombreEquipo: "COBRELOA"
    },
    "cob/tercera/red": {
        codigo: "/colors red 30 FFFFFF 45485B 1A1A1A",
        nombreEquipo: "COBRELOA"
    },
    "cob/tercera/blue": {
        codigo: "/colors blue 30 FFFFFF 45485B 1A1A1A",
        nombreEquipo: "COBRELOA"
    },

    // PALESTINO
    "cdp/titular/red": {
        codigo: "/colors red 0 000000 FFFFFF 047B4E E30000",
        nombreEquipo: "PALESTINO"
    },
    "cdp/titular/blue": {
        codigo: "/colors blue 0 000000 FFFFFF 047B4E E30000",
        nombreEquipo: "PALESTINO"
    },
    "cdp/alternativa/red": {
        codigo: "/colors red 0 FAFAFA E30000 000503 047B4E",
        nombreEquipo: "PALESTINO"
    },
    "cdp/alternativa/blue": {
        codigo: "/colors blue 0 FAFAFA E30000 000503 047B4E",
        nombreEquipo: "PALESTINO"
    },

    // MELGAR
    "mel/titular/red": {
        codigo: "/colors red 0 FFFFFF EC1B30 2A2A2A",
        nombreEquipo: "MELGAR"
    },
    "mel/titular/blue": {
        codigo: "/colors blue 0 FFFFFF EC1B30 2A2A2A",
        nombreEquipo: "MELGAR"
    },
    "mel/alternativa/red": {
        codigo: "/colors red 0 2A2A2A ECEFF4 EC1B31 ECEFF4",
        nombreEquipo: "MELGAR"
    },
    "mel/alternativa/blue": {
        codigo: "/colors blue 0 2A2A2A ECEFF4 EC1B31 ECEFF4",
        nombreEquipo: "MELGAR"
    },

    // UNIVERSITARIO
    "unv/titular/red": {
        codigo: "/colors red 0 812124 E1DCC5",
        nombreEquipo: "UNIVERSITARIO"
    },
    "unv/titular/blue": {
        codigo: "/colors blue 0 812124 E1DCC5",
        nombreEquipo: "UNIVERSITARIO"
    },
    "unv/alternativa/red": {
        codigo: "/colors red 0 FFFFFF 902C38",
        nombreEquipo: "UNIVERSITARIO"
    },
    "unv/alternativa/blue": {
        codigo: "/colors blue 0 FFFFFF 902C38",
        nombreEquipo: "UNIVERSITARIO"
    },

    // ALIANZA LIMA
    "ali/titular/red": {
        codigo: "/colors red 180 D9030F 062247 FFFFFF 062247",
        nombreEquipo: "ALIANZA LIMA"
    },
    "ali/titular/blue": {
        codigo: "/colors blue 180 D9030F 062247 FFFFFF 062247",
        nombreEquipo: "ALIANZA LIMA"
    },
    "ali/alternativa/red": {
        codigo: "/colors red 40 F4F4F4 1A2639 253143 253143",
        nombreEquipo: "ALIANZA LIMA"
    },
    "ali/alternativa/blue": {
        codigo: "/colors blue 40 F4F4F4 1A2639 253143 253143",
        nombreEquipo: "ALIANZA LIMA"
    },

    // SPORTING CRISTAL
    "cri/titular/red": {
        codigo: "/colors red 0 032543 61C5ED",
        nombreEquipo: "SPORTING CRISTAL"
    },
    "cri/titular/blue": {
        codigo: "/colors blue 0 032543 61C5ED",
        nombreEquipo: "SPORTING CRISTAL"
    },
    "cri/alternativa/red": {
        codigo: "/colors red -90 FFFFFF 212C4B 334A7F",
        nombreEquipo: "SPORTING CRISTAL"
    },
    "cri/alternativa/blue": {
        codigo: "/colors blue -90 FFFFFF 212C4B 334A7F",
        nombreEquipo: "SPORTING CRISTAL"
    },
    "cri/tercera/red": {
        codigo: "/colors red 41 1C1C1C FFFFFF 3CBEEF FFFFFF",
        nombreEquipo: "SPORTING CRISTAL"
    },
    "cri/tercera/blue": {
        codigo: "/colors blue 41 1C1C1C FFFFFF 3CBEEF FFFFFF",
        nombreEquipo: "SPORTING CRISTAL"
    },
    // RUSIA
    "rus/titular/red": {
        codigo: "/colors red 90 FFFFFF C4021D C4323F D43941",
        nombreEquipo: "RUSIA"
    },
    "rus/titular/blue": {
        codigo: "/colors blue 90 FFFFFF C4021D C4323F D43941",
        nombreEquipo: "RUSIA"
    },
    "rus/alternativa/red": {
        codigo: "/colors red -90 114577 EFEFF0",
        nombreEquipo: "RUSIA"
    },
    "rus/alternativa/blue": {
        codigo: "/colors blue -90 114577 EFEFF0",
        nombreEquipo: "RUSIA"
    },
    "rus/bandera/red": {
        codigo: "/colors red 90 DECC57 FFFFFF 0039A6 D52B1E",
        nombreEquipo: "RUSIA"
    },
    "rus/bandera/blue": {
        codigo: "/colors blue 90 DECC57 FFFFFF 0039A6 D52B1E",
        nombreEquipo: "RUSIA"
    },

    // ESTADOS UNIDOS
    "usa/titular/red": {
        codigo: "/colors red 122 005588 FFFFFF FFFFFF B30119",
        nombreEquipo: "EEUU"
    },
    "usa/titular/blue": {
        codigo: "/colors blue 122 005588 FFFFFF FFFFFF B30119",
        nombreEquipo: "EEUU"
    },
    "usa/alternativa/red": {
        codigo: "/colors red -122 F2F4F5 E30212 273D87 273D87",
        nombreEquipo: "EEUU"
    },
    "usa/alternativa/blue": {
        codigo: "/colors blue -122 F2F4F5 E30212 273D87 273D87",
        nombreEquipo: "EEUU"
    },
    "usa/tercera/red": {
        codigo: "/colors red -90 FBFBFA 013354",
        nombreEquipo: "EEUU"
    },
    "usa/tercera/blue": {
        codigo: "/colors blue -90 FBFBFA 013354",
        nombreEquipo: "EEUU"
    },
    "usa/clasica/red": {
        codigo: "/colors red -90 101085 FF2E2E FFFFFF 1C59FF",
        nombreEquipo: "EEUU"
    },
    "usa/clasica/blue": {
        codigo: "/colors blue -90 101085 FF2E2E FFFFFF 1C59FF",
        nombreEquipo: "EEUU"
    },

    // ALMAGRO
    "alm/titular/red": {
        codigo: "/colors red 0 FFFFFF 0137D5 18181A 0137D5",
        nombreEquipo: "ALMAGRO"
    },
    "alm/titular/blue": {
        codigo: "/colors blue 0 FFFFFF 0137D5 18181A 0137D5",
        nombreEquipo: "ALMAGRO"
    },
    "alm/alternativa/red": {
        codigo: "/colors red 90 1783FF 003CDB 1F1F21 FDFDFD",
        nombreEquipo: "ALMAGRO"
    },
    "alm/alternativa/blue": {
        codigo: "/colors blue 90 1783FF 003CDB 1F1F21 FDFDFD",
        nombreEquipo: "ALMAGRO"
    },

    // NIGERIA
    "nga/titular/red": {
        codigo: "/colors red 180 000000 1D633C F7FAF7 1D633C",
        nombreEquipo: "NIGERIA"
    },
    "nga/titular/blue": {
        codigo: "/colors blue 180 000000 1D633C F7FAF7 1D633C",
        nombreEquipo: "NIGERIA"
    },
    "nga/alternativa/red": {
        codigo: "/colors red -90 FFFFFF 294040",
        nombreEquipo: "NIGERIA"
    },
    "nga/alternativa/blue": {
        codigo: "/colors blue -90 FFFFFF 294040",
        nombreEquipo: "NIGERIA"
    },

    // ECUADOR
    "ecu/titular/red": {
        codigo: "/colors red 90 1E2A52 042A95 EBD301 EBD301",
        nombreEquipo: "ECUADOR"
    },
    "ecu/titular/blue": {
        codigo: "/colors blue 90 1E2A52 042A95 EBD301 EBD301",
        nombreEquipo: "ECUADOR"
    },
    "ecu/alternativa/red": {
        codigo: "/colors red 90 EDFE2D 777B6E",
        nombreEquipo: "ECUADOR"
    },
    "ecu/alternativa/blue": {
        codigo: "/colors blue 90 EDFE2D 777B6E",
        nombreEquipo: "ECUADOR"
    },

    // CADU
    "cadu/titular/red": {
        codigo: "/colors red 180 0F0F0F 0A94DC 2CCAF8 0A94DC",
        nombreEquipo: "CADU"
    },
    "cadu/titular/blue": {
        codigo: "/colors blue 180 0F0F0F 0A94DC 2CCAF8 0A94DC",
        nombreEquipo: "CADU"
    },
    "cadu/alternativa/red": {
        codigo: "/colors red 135 007EFC FFFFFF 47C4FB FFFFFF",
        nombreEquipo: "CADU"
    },
    "cadu/alternativa/blue": {
        codigo: "/colors blue 135 007EFC FFFFFF 47C4FB FFFFFF",
        nombreEquipo: "CADU"
    },

    // URSS
    "urss/titular/red": {
        codigo: "/colors red 90 FFFFFF B00819",
        nombreEquipo: "URSS"
    },
    "urss/titular/blue": {
        codigo: "/colors blue 90 FFFFFF B00819",
        nombreEquipo: "URSS"
    },
    "urss/alternativa/red": {
        codigo: "/colors red 90 AB0818 FAFAFA",
        nombreEquipo: "URSS"
    },
    "urss/alternativa/blue": {
        codigo: "/colors blue 90 AB0818 FAFAFA",
        nombreEquipo: "URSS"
    },

    // YUGOSLAVIA
    "yug/titular/red/1990": {
        codigo: "/colors red 153 FFFFFF 0F4BA1 0F4BA1 DE0000",
        nombreEquipo: "YUGOSLAVIA"
    },
    "yug/titular/blue/1990": {
        codigo: "/colors blue 153 FFFFFF 0F4BA1 0F4BA1 DE0000",
        nombreEquipo: "YUGOSLAVIA"
    },
    "yug/alternativa/red/1990": {
        codigo: "/colors red 153 0D4BB2 FFFFFF FFFFFF DD251D",
        nombreEquipo: "YUGOSLAVIA"
    },
    "yug/alternativa/blue/1990": {
        codigo: "/colors blue 153 0D4BB2 FFFFFF FFFFFF DD251D",
        nombreEquipo: "YUGOSLAVIA"
    },
    "yug/titular/red/1984": {
        codigo: "/colors red 90 FFFFFF 18529D",
        nombreEquipo: "YUGOSLAVIA"
    },
    "yug/titular/blue/1984": {
        codigo: "/colors blue 90 FFFFFF 18529D",
        nombreEquipo: "YUGOSLAVIA"
    },
    "yug/alternativa/red/1984": {
        codigo: "/colors red 90 00388E FFFFFF",
        nombreEquipo: "YUGOSLAVIA"
    },
    "yug/alternativa/blue/1984": {
        codigo: "/colors blue 90 00388E FFFFFF",
        nombreEquipo: "YUGOSLAVIA"
    },
    "yug/bandera/red": {
        codigo: "/colors red 90 DE0000 003893 FFFFFF DE0000",
        nombreEquipo: "YUGOSLAVIA"
    },
    "yug/bandera/blue": {
        codigo: "/colors blue 90 DE0000 003893 FFFFFF DE0000",
        nombreEquipo: "YUGOSLAVIA"
    },

    // ALUMNI
    "alu/titular/red": {
        codigo: "/colors red 180 000000 FF0000 FFFFFF FF0000",
        nombreEquipo: "ALUMNI"
    },
    "alu/titular/blue": {
        codigo: "/colors blue 180 000000 FF0000 FFFFFF FF0000",
        nombreEquipo: "ALUMNI"
    },
    "alu/alternativa/red": {
        codigo: "/colors red 90 000000 E30F10 FFFFFF E30F10",
        nombreEquipo: "ALUMNI"
    },
    "alu/alternativa/blue": {
        codigo: "/colors blue 90 000000 E30F10 FFFFFF E30F10",
        nombreEquipo: "ALUMNI"
    },

    // VILLA SAN CARLOS
    "vsc/titular/red": {
        codigo: "/colors red 42 131B2A 48B8E5 FFFFFF 48B8E5",
        nombreEquipo: "VILLA SAN CARLOS"
    },
    "vsc/titular/blue": {
        codigo: "/colors blue 42 131B2A 48B8E5 FFFFFF 48B8E5",
        nombreEquipo: "VILLA SAN CARLOS"
    },
    "vsc/alternativa/red": {
        codigo: "/colors red 56 F0F0F0 01C8FF 292C34 292C34",
        nombreEquipo: "VILLA SAN CARLOS"
    },
    "vsc/alternativa/blue": {
        codigo: "/colors blue 56 F0F0F0 01C8FF 292C34 292C34",
        nombreEquipo: "VILLA SAN CARLOS"
    },

    // LOMAS ATHLETIC
    "loa/titular/red": {
        codigo: "/colors red 180 F5DC00 336633 D90000 336633",
        nombreEquipo: "LOMAS ATHLETIC"
    },
    "loa/titular/blue": {
        codigo: "/colors blue 180 F5DC00 336633 D90000 336633",
        nombreEquipo: "LOMAS ATHLETIC"
    },
    "loa/escudo/red": {
        codigo: "/colors red 180 FCC916 015440 DD191A 015440",
        nombreEquipo: "LOMAS ATHLETIC"
    },
    "loa/escudo/blue": {
        codigo: "/colors blue 180 FCC916 015440 DD191A 015440",
        nombreEquipo: "LOMAS ATHLETIC"
    },

    // CHECOSLOVAQUIA
    "cze/titular/red": {
        codigo: "/colors red 180 FFFFFF BE2620",
        nombreEquipo: "CHECOSLOVAQUIA"
    },
    "cze/titular/blue": {
        codigo: "/colors blue 180 FFFFFF BE2620",
        nombreEquipo: "CHECOSLOVAQUIA"
    },
    "cze/alternativa/red": {
        codigo: "/colors red 180 AC1013 FFFFFF",
        nombreEquipo: "CHECOSLOVAQUIA"
    },
    "cze/alternativa/blue": {
        codigo: "/colors blue 180 AC1013 FFFFFF",
        nombreEquipo: "CHECOSLOVAQUIA"
    },

    // FC NANTES
    "fcn/titular/red": {
        codigo: "/colors red 180 007037 FEE030 1AAD67 FEE030",
        nombreEquipo: "FC NANTES"
    },
    "fcn/titular/blue": {
        codigo: "/colors blue 180 007037 FEE030 1AAD67 FEE030",
        nombreEquipo: "FC NANTES"
    },
    "fcn/alternativa/red": {
        codigo: "/colors red 60 FFFF00 228B67 167554 167554",
        nombreEquipo: "FC NANTES"
    },
    "fcn/alternativa/blue": {
        codigo: "/colors blue 60 FFFF00 228B67 167554 167554",
        nombreEquipo: "FC NANTES"
    },
    // SAINT ETIENNE
    "ste/titular/red": {
        codigo: "/colors red 90 FFFFFF 0F6B46 1B9365 1B9365",
        nombreEquipo: "SAINT ETIENNE"
    },
    "ste/titular/blue": {
        codigo: "/colors blue 90 FFFFFF 0F6B46 1B9365 1B9365",
        nombreEquipo: "SAINT ETIENNE"
    },
    "ste/alternativa/red": {
        codigo: "/colors red 90 4C6E5D 147858 FFFFFF FFFFFF",
        nombreEquipo: "SAINT ETIENNE"
    },
    "ste/alternativa/blue": {
        codigo: "/colors blue 90 4C6E5D 147858 FFFFFF FFFFFF",
        nombreEquipo: "SAINT ETIENNE"
    },
    "ste/tercera/red": {
        codigo: "/colors red 90 FFFFFF 727085 8E909D 8E909D",
        nombreEquipo: "SAINT ETIENNE"
    },
    "ste/tercera/blue": {
        codigo: "/colors blue 90 FFFFFF 727085 8E909D 8E909D",
        nombreEquipo: "SAINT ETIENNE"
    },

    // RENNES
    "ren/titular/red": {
        codigo: "/colors red 180 F0F0F0 000000 DC0D15",
        nombreEquipo: "RENNES"
    },
    "ren/titular/blue": {
        codigo: "/colors blue 180 F0F0F0 000000 DC0D15",
        nombreEquipo: "RENNES"
    },
    "ren/alternativa/red": {
        codigo: "/colors red 180 FFFFFF 276DD6 1B50B5 276DD6",
        nombreEquipo: "RENNES"
    },
    "ren/alternativa/blue": {
        codigo: "/colors blue 180 FFFFFF 276DD6 1B50B5 276DD6",
        nombreEquipo: "RENNES"
    },
    "ren/tercera/red": {
        codigo: "/colors red 180 000000 FFDF00",
        nombreEquipo: "RENNES"
    },
    "ren/tercera/blue": {
        codigo: "/colors blue 180 000000 FFDF00",
        nombreEquipo: "RENNES"
    },

    // FC NYVA VINNYTSIA
    "nyv/titular/red": {
        codigo: "/colors red 180 FFFFFF 42A161",
        nombreEquipo: "FC NYVA VINNYTSIA"
    },
    "nyv/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 42A161",
        nombreEquipo: "FC NYVA VINNYTSIA"
    },
    "nyv/alternativa/red": {
        codigo: "/colors red 90 439B73 3AA070 FFFFFF FFFFFF",
        nombreEquipo: "FC NYVA VINNYTSIA"
    },
    "nyv/alternativa/blue": {
        codigo: "/colors blue 90 439B73 3AA070 FFFFFF FFFFFF",
        nombreEquipo: "FC NYVA VINNYTSIA"
    },

    // ORLANDO CITY
    "orl/titular/red": {
        codigo: "/colors red 70 FFFFFF 3F0B74 360963 360963",
        nombreEquipo: "ORLANDO CITY"
    },
    "orl/titular/blue": {
        codigo: "/colors blue 70 FFFFFF 3F0B74 360963 360963",
        nombreEquipo: "ORLANDO CITY"
    },
    "orl/alternativa/red": {
        codigo: "/colors red 180 3F0B74 FFFFFF",
        nombreEquipo: "ORLANDO CITY"
    },
    "orl/alternativa/blue": {
        codigo: "/colors blue 180 3F0B74 FFFFFF",
        nombreEquipo: "ORLANDO CITY"
    },

    // ESTUDIANTES (BA)
    "eba/titular/red": {
        codigo: "/colors red 180 8C8C8C FFFFFF 000000 FFFFFF",
        nombreEquipo: "ESTUDIANTES (BA)"
    },
    "eba/titular/blue": {
        codigo: "/colors blue 180 8C8C8C FFFFFF 000000 FFFFFF",
        nombreEquipo: "ESTUDIANTES (BA)"
    },
    "eba/alternativa/red": {
        codigo: "/colors red 115 050505 EAE4E6 FFFFFF A89D9B",
        nombreEquipo: "ESTUDIANTES (BA)"
    },
    "eba/alternativa/blue": {
        codigo: "/colors blue 115 050505 EAE4E6 FFFFFF A89D9B",
        nombreEquipo: "ESTUDIANTES (BA)"
    },

    // ALMIRANTE BROWN
    "abrown/titular/red": {
        codigo: "/colors red 180 FFFFFF EBC80E 000000 EBC80E",
        nombreEquipo: "ALMIRANTE BROWN"
    },
    "abrown/titular/blue": {
        codigo: "/colors blue 180 FFFFFF EBC80E 000000 EBC80E",
        nombreEquipo: "ALMIRANTE BROWN"
    },
    "abrown/alternativa/red": {
        codigo: "/colors red 0 FFF34F 131313 131313 EBC80E",
        nombreEquipo: "ALMIRANTE BROWN"
    },
    "abrown/alternativa/blue": {
        codigo: "/colors blue 0 FFF34F 131313 131313 EBC80E",
        nombreEquipo: "ALMIRANTE BROWN"
    },
    "abrown/tercera/red": {
        codigo: "/colors red 90 E3C10E 1D1D1D FFFFFF EBC60D",
        nombreEquipo: "ALMIRANTE BROWN"
    },
    "abrown/tercera/blue": {
        codigo: "/colors blue 90 E3C10E 1D1D1D FFFFFF EBC60D",
        nombreEquipo: "ALMIRANTE BROWN"
    },

    // CENTRO DEPORTIVO ROCA
    "cdybgr/titular/red": {
        codigo: "/colors red 0 F7F3FF DC1E37 1C1A26",
        nombreEquipo: "CENTRO DEP. ROCA"
    },
    "cdybgr/titular/blue": {
        codigo: "/colors blue 0 F7F3FF DC1E37 1C1A26",
        nombreEquipo: "CENTRO DEP. ROCA"
    },
    "cdybgr/alternativa/red": {
        codigo: "/colors red 0 000000 FC224A FFFFFF C51641",
        nombreEquipo: "CENTRO DEP. ROCA"
    },
    "cdybgr/alternativa/blue": {
        codigo: "/colors blue 0 000000 FC224A FFFFFF C51641",
        nombreEquipo: "CENTRO DEP. ROCA"
    },
    "cdybgr/tercera/red": {
        codigo: "/colors red 0 757575 1E1916 FFFFFF DE231C",
        nombreEquipo: "CENTRO DEP. ROCA"
    },
    "cdybgr/tercera/blue": {
        codigo: "/colors blue 0 757575 1E1916 FFFFFF DE231C",
        nombreEquipo: "CENTRO DEP. ROCA"
    },
    "cdybgr/cuarta/red": {
        codigo: "/colors red 90 817F85 1E1916 FFFFFF DC241C",
        nombreEquipo: "CENTRO DEP. ROCA"
    },
    "cdybgr/cuarta/blue": {
        codigo: "/colors blue 90 817F85 1E1916 FFFFFF DC241C",
        nombreEquipo: "CENTRO DEP. ROCA"
    },
    "cdybgr/quinta/red": {
        codigo: "/colors red 0 D6BD8B 1E1916 FFFFFF DC1E37",
        nombreEquipo: "CENTRO DEP. ROCA"
    },
    "cdybgr/quinta/blue": {
        codigo: "/colors blue 0 D6BD8B 1E1916 FFFFFF DC1E37",
        nombreEquipo: "CENTRO DEP. ROCA"
    },

    // BOCHOFILO BOCHAZO
    "bochz/titular/red": {
        codigo: "/colors red 40 33376B BE2833 FFFFFF 2348A0",
        nombreEquipo: "BOCHOFILO BOCHAZO"
    },
    "bochz/titular/blue": {
        codigo: "/colors blue 40 33376B BE2833 FFFFFF 2348A0",
        nombreEquipo: "BOCHOFILO BOCHAZO"
    },

    // DINAMO ZAGREB
    "dzg/titular/red": {
        codigo: "/colors red 180 FFFFFF 0456C6",
        nombreEquipo: "DINAMO ZAGREB"
    },
    "dzg/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 0456C6",
        nombreEquipo: "DINAMO ZAGREB"
    },
    "dzg/alternativa/red": {
        codigo: "/colors red 60 1B1F10 DDFF51 E1FD5B",
        nombreEquipo: "DINAMO ZAGREB"
    },
    "dzg/alternativa/blue": {
        codigo: "/colors blue 60 1B1F10 DDFF51 E1FD5B",
        nombreEquipo: "DINAMO ZAGREB"
    },
    "dzg/tercera/red": {
        codigo: "/colors red 120 E5E811 213C69 1555AC",
        nombreEquipo: "DINAMO ZAGREB"
    },
    "dzg/tercera/blue": {
        codigo: "/colors blue 120 E5E811 213C69 1555AC",
        nombreEquipo: "DINAMO ZAGREB"
    },

    // BAYER LEVERKUSEN
    "b04/titular/red": {
        codigo: "/colors red 180 F6F8F7 252526 363636 252526",
        nombreEquipo: "BAYER LEVERKUSEN"
    },
    "b04/titular/blue": {
        codigo: "/colors blue 180 F6F8F7 252526 363636 252526",
        nombreEquipo: "BAYER LEVERKUSEN"
    },
    "b04/alternativa/red": {
        codigo: "/colors red 0 F1F2F4 E30720 F12D31 E30720",
        nombreEquipo: "BAYER LEVERKUSEN"
    },
    "b04/alternativa/blue": {
        codigo: "/colors blue 0 F1F2F4 E30720 F12D31 E30720",
        nombreEquipo: "BAYER LEVERKUSEN"
    },
    "b04/tercera/red": {
        codigo: "/colors red 30 262930 CACFD5 C3CCD3 CACFD5",
        nombreEquipo: "BAYER LEVERKUSEN"
    },
    "b04/tercera/blue": {
        codigo: "/colors blue 30 262930 CACFD5 C3CCD3 CACFD5",
        nombreEquipo: "BAYER LEVERKUSEN"
    },

    // VENEZIA FC
    "venfc/titular/red": {
        codigo: "/colors red 0 FFFFFF FE7200 161C28 008956",
        nombreEquipo: "VENEZIA FC"
    },
    "venfc/titular/blue": {
        codigo: "/colors blue 0 FFFFFF FE7200 161C28 008956",
        nombreEquipo: "VENEZIA FC"
    },

    // ATHLETIC BILBAO
    "ath/titular/red": {
        codigo: "/colors red 0 020300 EA011E FFFFFF EA011E",
        nombreEquipo: "ATHLETIC BILBAO"
    },
    "ath/titular/blue": {
        codigo: "/colors blue 0 020300 EA011E FFFFFF EA011E",
        nombreEquipo: "ATHLETIC BILBAO"
    },
    "ath/alternativa/red": {
        codigo: "/colors red 121 DECB89 225F3E 225F3E 30734A",
        nombreEquipo: "ATHLETIC BILBAO"
    },
    "ath/alternativa/blue": {
        codigo: "/colors blue 121 DECB89 225F3E 225F3E 30734A",
        nombreEquipo: "ATHLETIC BILBAO"
    },

    // ESPANYOL
    "rcde/titular/red": {
        codigo: "/colors red 0 272624 FFFFFF 006DB5 FFFFFF",
        nombreEquipo: "ESPANYOL"
    },
    "rcde/titular/blue": {
        codigo: "/colors blue 0 272624 FFFFFF 006DB5 FFFFFF",
        nombreEquipo: "ESPANYOL"
    },
    "rcde/alternativa/red": {
        codigo: "/colors red 0 FFFFFF 275F56 1B81D3 EBEDF2",
        nombreEquipo: "ESPANYOL"
    },
    "rcde/alternativa/blue": {
        codigo: "/colors blue 0 FFFFFF 275F56 1B81D3 EBEDF2",
        nombreEquipo: "ESPANYOL"
    },
    "rcde/tercera/red": {
        codigo: "/colors red 90 1E1916 F5CDCD F5ECE3 39282E",
        nombreEquipo: "ESPANYOL"
    },
    "rcde/tercera/blue": {
        codigo: "/colors blue 90 1E1916 F5CDCD F5ECE3 39282E",
        nombreEquipo: "ESPANYOL"
    },
    // RB LEIPZIG
    "rbl/titular/red": {
        codigo: "/colors red 60 DC0741 F0EDEE E3E0E1",
        nombreEquipo: "RB LEIPZIG"
    },
    "rbl/titular/blue": {
        codigo: "/colors blue 60 DC0741 F0EDEE E3E0E1",
        nombreEquipo: "RB LEIPZIG"
    },
    "rbl/alternativa/red": {
        codigo: "/colors red 180 DC0741 0D1E2D",
        nombreEquipo: "RB LEIPZIG"
    },
    "rbl/alternativa/blue": {
        codigo: "/colors blue 180 DC0741 0D1E2D",
        nombreEquipo: "RB LEIPZIG"
    },
    "rbl/tercera/red": {
        codigo: "/colors red 90 FEFEFE 242426 0E4182 A60D17",
        nombreEquipo: "RB LEIPZIG"
    },
    "rbl/tercera/blue": {
        codigo: "/colors blue 90 FEFEFE 242426 0E4182 A60D17",
        nombreEquipo: "RB LEIPZIG"
    },

    // MONTEVIDEO CITY TORQUE
    "mct/titular/red": {
        codigo: "/colors red 60 FFFFFF 76B3E2",
        nombreEquipo: "MONTEVIDEO CITY"
    },
    "mct/titular/blue": {
        codigo: "/colors blue 60 FFFFFF 76B3E2",
        nombreEquipo: "MONTEVIDEO CITY"
    },
    "mct/alternativa/red": {
        codigo: "/colors red 90 FFFFFF 322D2A 413C39 484743",
        nombreEquipo: "MONTEVIDEO CITY"
    },
    "mct/alternativa/blue": {
        codigo: "/colors blue 90 FFFFFF 322D2A 413C39 484743",
        nombreEquipo: "MONTEVIDEO CITY"
    },

    // MONTEVIDEO WANDERERS
    "wan/titular/red": {
        codigo: "/colors red 180 B8B8B8 FFFFFF 000000 FFFFFF",
        nombreEquipo: "MONTEVIDEO WANDERERS"
    },
    "wan/titular/blue": {
        codigo: "/colors blue 180 B8B8B8 FFFFFF 000000 FFFFFF",
        nombreEquipo: "MONTEVIDEO WANDERERS"
    },
    "wan/alternativa/red": {
        codigo: "/colors red 180 000000 78DEF9 A6E2F9 78DEF9",
        nombreEquipo: "MONTEVIDEO WANDERERS"
    },
    "wan/alternativa/blue": {
        codigo: "/colors blue 180 000000 78DEF9 A6E2F9 78DEF9",
        nombreEquipo: "MONTEVIDEO WANDERERS"
    },
    "wan/tercera/red": {
        codigo: "/colors red 180 000000 FFFFFF F1F1F1 FFFFFF",
        nombreEquipo: "MONTEVIDEO WANDERERS"
    },
    "wan/tercera/blue": {
        codigo: "/colors blue 180 000000 FFFFFF F1F1F1 FFFFFF",
        nombreEquipo: "MONTEVIDEO WANDERERS"
    },

    // HAMBURGER SV
    "hsv/titular/red": {
        codigo: "/colors red 90 0071D7 D40121 F2F1F7 F2F1F7",
        nombreEquipo: "HAMBURGER SV"
    },
    "hsv/titular/blue": {
        codigo: "/colors blue 90 0071D7 D40121 F2F1F7 F2F1F7",
        nombreEquipo: "HAMBURGER SV"
    },
    "hsv/alternativa/red": {
        codigo: "/colors red 180 FFFFFF FBB6D5 6D5E7C FBB6D5",
        nombreEquipo: "HAMBURGER SV"
    },
    "hsv/alternativa/blue": {
        codigo: "/colors blue 180 FFFFFF FBB6D5 6D5E7C FBB6D5",
        nombreEquipo: "HAMBURGER SV"
    },
    "hsv/tercera/red": {
        codigo: "/colors red 180 FFFFFF 2D2B2C 0D497D 2D2B2C",
        nombreEquipo: "HAMBURGER SV"
    },
    "hsv/tercera/blue": {
        codigo: "/colors blue 180 FFFFFF 2D2B2C 0D497D 2D2B2C",
        nombreEquipo: "HAMBURGER SV"
    },

    // NEWCASTLE UNITED
    "new/titular/red": {
        codigo: "/colors red 180 EA323E F6F5FA 29242A F6F5FA",
        nombreEquipo: "NEWCASTLE UNITED"
    },
    "new/titular/blue": {
        codigo: "/colors blue 180 EA323E F6F5FA 29242A F6F5FA",
        nombreEquipo: "NEWCASTLE UNITED"
    },
    "new/alternativa/red": {
        codigo: "/colors red 90 FFFFFF 1C2023 143439 143439",
        nombreEquipo: "NEWCASTLE UNITED"
    },
    "new/alternativa/blue": {
        codigo: "/colors blue 90 FFFFFF 1C2023 143439 143439",
        nombreEquipo: "NEWCASTLE UNITED"
    },
    "new/tercera/red": {
        codigo: "/colors red 90 111C4D EC440A F06C0F F06C0F",
        nombreEquipo: "NEWCASTLE UNITED"
    },
    "new/tercera/blue": {
        codigo: "/colors blue 90 111C4D EC440A F06C0F F06C0F",
        nombreEquipo: "NEWCASTLE UNITED"
    },

    // WEST HAM UNITED
    "whu/titular/red": {
        codigo: "/colors red 90 F3F2F7 C4E0EC 7C0C25 7C0C25",
        nombreEquipo: "WEST HAM"
    },
    "whu/titular/blue": {
        codigo: "/colors blue 90 F3F2F7 C4E0EC 7C0C25 7C0C25",
        nombreEquipo: "WEST HAM"
    },
    "whu/alternativa/red": {
        codigo: "/colors red 90 781A32 A8D5FF F4F4F4 F4F4F4",
        nombreEquipo: "WEST HAM"
    },
    "whu/alternativa/blue": {
        codigo: "/colors blue 90 781A32 A8D5FF F4F4F4 F4F4F4",
        nombreEquipo: "WEST HAM"
    },
    "whu/tercera/red": {
        codigo: "/colors red 58 FFFFFF AB2FC3 2C2B54 342F5F",
        nombreEquipo: "WEST HAM"
    },
    "whu/tercera/blue": {
        codigo: "/colors blue 58 FFFFFF AB2FC3 2C2B54 342F5F",
        nombreEquipo: "WEST HAM"
    },
    "whu/titular/red/2019": {
        codigo: "/colors red 90 FFFFFF A3C3EA 751A2C 751A2C",
        nombreEquipo: "WEST HAM"
    },
    "whu/titular/blue/2019": {
        codigo: "/colors blue 90 FFFFFF A3C3EA 751A2C 751A2C",
        nombreEquipo: "WEST HAM"
    },

    // TORONTO FC
    "tofc/titular/red": {
        codigo: "/colors red 33 FFFFFF E50126",
        nombreEquipo: "TORONTO FC"
    },
    "tofc/titular/blue": {
        codigo: "/colors blue 33 FFFFFF E50126",
        nombreEquipo: "TORONTO FC"
    },
    "tofc/alternativa/red": {
        codigo: "/colors red 240 1D1C21 E6EBEF",
        nombreEquipo: "TORONTO FC"
    },
    "tofc/alternativa/blue": {
        codigo: "/colors blue 240 1D1C21 E6EBEF",
        nombreEquipo: "TORONTO FC"
    },

    // INTER MIAMI CF
    "mia/titular/red": {
        codigo: "/colors red 180 2E2322 FEA3B4",
        nombreEquipo: "INTER MIAMI"
    },
    "mia/titular/blue": {
        codigo: "/colors blue 180 2E2322 FEA3B4",
        nombreEquipo: "INTER MIAMI"
    },
    "mia/alternativa/red": {
        codigo: "/colors red 90 FBCCD4 212123 2E2E30 212123",
        nombreEquipo: "INTER MIAMI"
    },
    "mia/alternativa/blue": {
        codigo: "/colors blue 90 FBCCD4 212123 2E2E30 212123",
        nombreEquipo: "INTER MIAMI"
    },

    // DEPORTIVO ESPAÑOL
    "cde/titular/red": {
        codigo: "/colors red 66 FFFFFF FFC100 CD0000 CD0000",
        nombreEquipo: "DEP. ESPAÑOL"
    },
    "cde/titular/blue": {
        codigo: "/colors blue 66 FFFFFF FFC100 CD0000 CD0000",
        nombreEquipo: "DEP. ESPAÑOL"
    },
    "cde/alternativa/red": {
        codigo: "/colors red 66 242D51 C80000 FFFFFF FFFFFF",
        nombreEquipo: "DEP. ESPAÑOL"
    },
    "cde/alternativa/blue": {
        codigo: "/colors blue 66 242D51 C80000 FFFFFF FFFFFF",
        nombreEquipo: "DEP. ESPAÑOL"
    },

    // SPORTIVO ITALIANO
    "sit/titular/red": {
        codigo: "/colors red 307 FFFFFF 1367C0 1367C0 374A89",
        nombreEquipo: "SPORTIVO ITALIANO"
    },
    "sit/titular/blue": {
        codigo: "/colors blue 307 FFFFFF 1367C0 1367C0 374A89",
        nombreEquipo: "SPORTIVO ITALIANO"
    },
    "sit/alternativa/red": {
        codigo: "/colors red 65 1E2C94 0D3986 FFFFFF FFFFFF",
        nombreEquipo: "SPORTIVO ITALIANO"
    },
    "sit/alternativa/blue": {
        codigo: "/colors blue 65 1E2C94 0D3986 FFFFFF FFFFFF",
        nombreEquipo: "SPORTIVO ITALIANO"
    },
    "sit/tercera/red": {
        codigo: "/colors red 180 FAF7FF 0C785B DF1B2B 0C785B",
        nombreEquipo: "SPORTIVO ITALIANO"
    },
    "sit/tercera/blue": {
        codigo: "/colors blue 180 FAF7FF 0C785B DF1B2B 0C785B",
        nombreEquipo: "SPORTIVO ITALIANO"
    },
    // CLUB DEPORTIVO MANDIYÚ
    "mdy/titular/red": {
        codigo: "/colors red 90 1AAD69 11B065 FFFFFF FFFFFF",
        nombreEquipo: "DEP. MANDIYÚ"
    },
    "mdy/titular/blue": {
        codigo: "/colors blue 90 1AAD69 11B065 FFFFFF FFFFFF",
        nombreEquipo: "DEP. MANDIYÚ"
    },
    "mdy/alternativa/red": {
        codigo: "/colors red 90 FFFFFF 81D368 61CA65 61CA65",
        nombreEquipo: "DEP. MANDIYÚ"
    },
    "mdy/alternativa/blue": {
        codigo: "/colors blue 90 FFFFFF 81D368 61CA65 61CA65",
        nombreEquipo: "DEP. MANDIYÚ"
    },

    // HULL CITY
    "hul/titular/red": {
        codigo: "/colors red 247 000000 F77F15 F77F15 180602",
        nombreEquipo: "HULL CITY"
    },
    "hul/titular/blue": {
        codigo: "/colors blue 247 000000 F77F15 F77F15 180602",
        nombreEquipo: "HULL CITY"
    },
    "hul/alternativa/red": {
        codigo: "/colors red 180 000000 FFFFFF",
        nombreEquipo: "HULL CITY"
    },
    "hul/alternativa/blue": {
        codigo: "/colors blue 180 000000 FFFFFF",
        nombreEquipo: "HULL CITY"
    },
    "hul/tercera/red": {
        codigo: "/colors red 247 FFFFFF 227592 227592 FFB10F",
        nombreEquipo: "HULL CITY"
    },
    "hul/tercera/blue": {
        codigo: "/colors blue 247 FFFFFF 227592 227592 FFB10F",
        nombreEquipo: "HULL CITY"
    },

    // WOLVERHAMPTON
    "wol/titular/red": {
        codigo: "/colors red 90 000000 F98E29 FB9F33 FDAD3B",
        nombreEquipo: "WOLVERHAMPTON"
    },
    "wol/titular/blue": {
        codigo: "/colors blue 90 000000 F98E29 FB9F33 FDAD3B",
        nombreEquipo: "WOLVERHAMPTON"
    },
    "wol/alternativa/red": {
        codigo: "/colors red 61 FFFFFF F99F03 202020 202020",
        nombreEquipo: "WOLVERHAMPTON"
    },
    "wol/alternativa/blue": {
        codigo: "/colors blue 61 FFFFFF F99F03 202020 202020",
        nombreEquipo: "WOLVERHAMPTON"
    },
    "wol/tercera/red": {
        codigo: "/colors red 0 F5F5F5 1F6452 3AAC88",
        nombreEquipo: "WOLVERHAMPTON"
    },
    "wol/tercera/blue": {
        codigo: "/colors blue 0 F5F5F5 1F6452 3AAC88",
        nombreEquipo: "WOLVERHAMPTON"
    },

    // CERRO LARGO
    "crl/titular/red": {
        codigo: "/colors red 180 1F1E26 FFFFFF 2454DF FFFFFF",
        nombreEquipo: "CERRO LARGO"
    },
    "crl/titular/blue": {
        codigo: "/colors blue 180 1F1E26 FFFFFF 2454DF FFFFFF",
        nombreEquipo: "CERRO LARGO"
    },
    "crl/alternativa/red": {
        codigo: "/colors red 61 1F1E26 0098CA",
        nombreEquipo: "CERRO LARGO"
    },
    "crl/alternativa/blue": {
        codigo: "/colors blue 61 1F1E26 0098CA",
        nombreEquipo: "CERRO LARGO"
    },

    // OLD CALEDONIANS FOOTBALL CLUB
    "ocfc/titular/red": {
        codigo: "/colors red 90 191919 F7F6FB",
        nombreEquipo: "OLD CALEDONIANS"
    },
    "ocfc/titular/blue": {
        codigo: "/colors blue 90 191919 F7F6FB",
        nombreEquipo: "OLD CALEDONIANS"
    },

    // DEFENSOR SPORTING
    "dfs/titular/red": {
        codigo: "/colors red 60 FFFFFF 6D4DB4",
        nombreEquipo: "DEFENSOR SPORTING"
    },
    "dfs/titular/blue": {
        codigo: "/colors blue 60 FFFFFF 6D4DB4",
        nombreEquipo: "DEFENSOR SPORTING"
    },
    "dfs/alternativa/red": {
        codigo: "/colors red 90 402E6B FFFFFF 6D4DB4 FFFFFF",
        nombreEquipo: "DEFENSOR SPORTING"
    },
    "dfs/alternativa/blue": {
        codigo: "/colors blue 90 402E6B FFFFFF 6D4DB4 FFFFFF",
        nombreEquipo: "DEFENSOR SPORTING"
    },

    // EVERTON VIÑA DEL MAR
    "evdm/titular/red": {
        codigo: "/colors red 90 FFFFFF 212647 FFE751 212647",
        nombreEquipo: "EVERTON VIÑA DEL MAR"
    },
    "evdm/titular/blue": {
        codigo: "/colors blue 90 FFFFFF 212647 FFE751 212647",
        nombreEquipo: "EVERTON VIÑA DEL MAR"
    },
    "evdm/alternativa/red": {
        codigo: "/colors red 90 FFFFFF FFD763 303454 FFD763",
        nombreEquipo: "EVERTON VIÑA DEL MAR"
    },
    "evdm/alternativa/blue": {
        codigo: "/colors blue 90 FFFFFF FFD763 303454 FFD763",
        nombreEquipo: "EVERTON VIÑA DEL MAR"
    },

    // UNIÓN LA CALERA
    "ulc/titular/red": {
        codigo: "/colors red 50 FFFFFF BA1D38 D70100",
        nombreEquipo: "UNIÓN LA CALERA"
    },
    "ulc/titular/blue": {
        codigo: "/colors blue 50 FFFFFF BA1D38 D70100",
        nombreEquipo: "UNIÓN LA CALERA"
    },
    "ulc/alternativa/red": {
        codigo: "/colors red 66 000000 E31D39 FFFFFF FFFFFF",
        nombreEquipo: "UNIÓN LA CALERA"
    },
    "ulc/alternativa/blue": {
        codigo: "/colors blue 66 000000 E31D39 FFFFFF FFFFFF",
        nombreEquipo: "UNIÓN LA CALERA"
    },

    // AUDAX ITALIANO
    "aud/titular/red": {
        codigo: "/colors red 60 FFFFFF 045AD1",
        nombreEquipo: "AUDAX ITALIANO"
    },
    "aud/titular/blue": {
        codigo: "/colors blue 60 FFFFFF 045AD1",
        nombreEquipo: "AUDAX ITALIANO"
    },
    "aud/alternativa/red": {
        codigo: "/colors red 90 FFFFFF 118247",
        nombreEquipo: "AUDAX ITALIANO"
    },
    "aud/alternativa/blue": {
        codigo: "/colors blue 90 FFFFFF 118247",
        nombreEquipo: "AUDAX ITALIANO"
    },
    "aud/tercera/red": {
        codigo: "/colors red 90 339455 FFFFFF",
        nombreEquipo: "AUDAX ITALIANO"
    },
    "aud/tercera/blue": {
        codigo: "/colors blue 90 339455 FFFFFF",
        nombreEquipo: "AUDAX ITALIANO"
    },
    // HUACHIPATO
    "hua/titular/red": {
        codigo: "/colors red 180 FBFB1D 2B79F7 1F1F21 2B79F7",
        nombreEquipo: "HUACHIPATO"
    },
    "hua/titular/blue": {
        codigo: "/colors blue 180 FBFB1D 2B79F7 1F1F21 2B79F7",
        nombreEquipo: "HUACHIPATO"
    },
    "hua/alternativa/red": {
        codigo: "/colors red 180 FCFAFF BD1F36 711F2D BD1F36",
        nombreEquipo: "HUACHIPATO"
    },
    "hua/alternativa/blue": {
        codigo: "/colors blue 180 FCFAFF BD1F36 711F2D BD1F36",
        nombreEquipo: "HUACHIPATO"
    },

    // DEPORTES IQUIQUE
    "iqu/titular/red": {
        codigo: "/colors red 180 000000 A5D4FE 9DD3FF",
        nombreEquipo: "DEPORTES IQUIQUE"
    },
    "iqu/titular/blue": {
        codigo: "/colors blue 180 000000 A5D4FE 9DD3FF",
        nombreEquipo: "DEPORTES IQUIQUE"
    },
    "iqu/alternativa/red": {
        codigo: "/colors red 180 FFFFFF 2557DA FF1727 2557DA",
        nombreEquipo: "DEPORTES IQUIQUE"
    },
    "iqu/alternativa/blue": {
        codigo: "/colors blue 180 FFFFFF 2557DA FF1727 2557DA",
        nombreEquipo: "DEPORTES IQUIQUE"
    },

    // O'HIGGINS
    "ohi/titular/red": {
        codigo: "/colors red 60 000000 90C4EB",
        nombreEquipo: "O'HIGGINS"
    },
    "ohi/titular/blue": {
        codigo: "/colors blue 60 000000 90C4EB",
        nombreEquipo: "O'HIGGINS"
    },
    "ohi/alternativa/red": {
        codigo: "/colors red 60 FFFFFF 1E1E1F",
        nombreEquipo: "O'HIGGINS"
    },
    "ohi/alternativa/blue": {
        codigo: "/colors blue 60 FFFFFF 1E1E1F",
        nombreEquipo: "O'HIGGINS"
    },
    "ohi/tercera/red": {
        codigo: "/colors red 90 000000 FFFFFF BCBFC4 FFFFFF",
        nombreEquipo: "O'HIGGINS"
    },
    "ohi/tercera/blue": {
        codigo: "/colors blue 90 000000 FFFFFF BCBFC4 FFFFFF",
        nombreEquipo: "O'HIGGINS"
    },

    // UNIÓN ESPAÑOLA
    "ues/titular/red": {
        codigo: "/colors red 90 FFFFFF C5142E CF0D27 E01A33",
        nombreEquipo: "UNIÓN ESPAÑOLA"
    },
    "ues/titular/blue": {
        codigo: "/colors blue 90 FFFFFF C5142E CF0D27 E01A33",
        nombreEquipo: "UNIÓN ESPAÑOLA"
    },
    "ues/alternativa/red": {
        codigo: "/colors red 90 FFFFFF 5D5D5D 717173 848484",
        nombreEquipo: "UNIÓN ESPAÑOLA"
    },
    "ues/alternativa/blue": {
        codigo: "/colors blue 90 FFFFFF 5D5D5D 717173 848484",
        nombreEquipo: "UNIÓN ESPAÑOLA"
    },

    // SANTIAGO WANDERERS
    "swa/titular/red": {
        codigo: "/colors red 90 78FF28 017060 024A3E 024A3E",
        nombreEquipo: "SANTIAGO WANDERERS"
    },
    "swa/titular/blue": {
        codigo: "/colors blue 90 78FF28 017060 024A3E 024A3E",
        nombreEquipo: "SANTIAGO WANDERERS"
    },
    "swa/alternativa/red": {
        codigo: "/colors red 90 154142 FFFFFF C8C7CC FFFFFF",
        nombreEquipo: "SANTIAGO WANDERERS"
    },
    "swa/alternativa/blue": {
        codigo: "/colors blue 90 154142 FFFFFF C8C7CC FFFFFF",
        nombreEquipo: "SANTIAGO WANDERERS"
    },

    // CURICÓ UNIDO
    "cur/titular/red": {
        codigo: "/colors red 35 6E1010 FFFFFF D92814 FFFFFF",
        nombreEquipo: "CURICÓ UNIDO"
    },
    "cur/titular/blue": {
        codigo: "/colors blue 35 6E1010 FFFFFF D92814 FFFFFF",
        nombreEquipo: "CURICÓ UNIDO"
    },
    "cur/alternativa/red": {
        codigo: "/colors red 35 ABABAB D92814 FFFFFF D92814",
        nombreEquipo: "CURICÓ UNIDO"
    },
    "cur/alternativa/blue": {
        codigo: "/colors blue 35 ABABAB D92814 FFFFFF D92814",
        nombreEquipo: "CURICÓ UNIDO"
    },

    // DEPORTES ANTOFAGASTA
    "cda/titular/red": {
        codigo: "/colors red 0 1865A5 FFFFFF 328AF8",
        nombreEquipo: "DEP. ANTOFAGASTA"
    },
    "cda/titular/blue": {
        codigo: "/colors blue 0 1865A5 FFFFFF 328AF8",
        nombreEquipo: "DEP. ANTOFAGASTA"
    },
    "cda/alternativa/red": {
        codigo: "/colors red 0 FFFFFF 1A1A1A D71F29",
        nombreEquipo: "DEP. ANTOFAGASTA"
    },
    "cda/alternativa/blue": {
        codigo: "/colors blue 0 FFFFFF 1A1A1A D71F29",
        nombreEquipo: "DEP. ANTOFAGASTA"
    },

    // U. DE CONCEPCIÓN
    "ucon/titular/red": {
        codigo: "/colors red 90 2C3554 F1E63E F1E63E F1E63E",
        nombreEquipo: "U. DE CONCEPCIÓN"
    },
    "ucon/titular/blue": {
        codigo: "/colors blue 90 2C3554 F1E63E F1E63E F1E63E",
        nombreEquipo: "U. DE CONCEPCIÓN"
    },
    "ucon/alternativa/red": {
        codigo: "/colors red 60 FEEB2C 6285ED 293155 293155",
        nombreEquipo: "U. DE CONCEPCIÓN"
    },
    "ucon/alternativa/blue": {
        codigo: "/colors blue 60 FEEB2C 6285ED 293155 293155",
        nombreEquipo: "U. DE CONCEPCIÓN"
    },

    // DEPORTES LA SERENA
    "dls/titular/red": {
        codigo: "/colors red 60 FEFEFE 530928 450722 450722",
        nombreEquipo: "DEP. LA SERENA"
    },
    "dls/titular/blue": {
        codigo: "/colors blue 60 FEFEFE 530928 450722 450722",
        nombreEquipo: "DEP. LA SERENA"
    },
    "dls/alternativa/red": {
        codigo: "/colors red 60 5D0027 FFFFFF EEEEEE EEEEEE",
        nombreEquipo: "DEP. LA SERENA"
    },
    "dls/alternativa/blue": {
        codigo: "/colors blue 60 5D0027 FFFFFF EEEEEE EEEEEE",
        nombreEquipo: "DEP. LA SERENA"
    },
    // COQUIMBO UNIDO
    "coq/titular/red": {
        codigo: "/colors red 0 000000 202020 F4C505",
        nombreEquipo: "COQUIMBO UNIDO"
    },
    "coq/titular/blue": {
        codigo: "/colors blue 0 000000 202020 F4C505",
        nombreEquipo: "COQUIMBO UNIDO"
    },
    "coq/alternativa/red": {
        codigo: "/colors red 55 000000 E7E7E7 E7E7E7 F4C606",
        nombreEquipo: "COQUIMBO UNIDO"
    },
    "coq/alternativa/blue": {
        codigo: "/colors blue 55 000000 E7E7E7 E7E7E7 F4C606",
        nombreEquipo: "COQUIMBO UNIDO"
    },

    // SPIDERMAN
    "spiderman/red": {
        codigo: "/colors red 90 DF1F2D DF1F2D 2B3784 2B3784",
        nombreEquipo: "TEAM SPIDERMAN"
    },
    "spiderman/blue": {
        codigo: "/colors blue 90 DF1F2D DF1F2D 2B3784 2B3784",
        nombreEquipo: "TEAM SPIDERMAN"
    },

    // HULK
    "hulk/red": {
        codigo: "/colors red 90 A2CD48 A2CD48 A2CD48 875094",
        nombreEquipo: "TEAM HULK"
    },
    "hulk/blue": {
        codigo: "/colors blue 90 A2CD48 A2CD48 A2CD48 875094",
        nombreEquipo: "TEAM HULK"
    },

    // CAPITÁN AMÉRICA
    "capitanamerica/red": {
        codigo: "/colors red 90 FFFFFF 1849CA 1849CA EC2004",
        nombreEquipo: "TEAM CAPITÁN AMÉRICA"
    },
    "capitanamerica/blue": {
        codigo: "/colors blue 90 FFFFFF 1849CA 1849CA EC2004",
        nombreEquipo: "TEAM CAPITÁN AMÉRICA"
    },

    // BATMAN
    "batman/red": {
        codigo: "/colors red 90 FDFF00 282E3C 282E3C 505C7C",
        nombreEquipo: "TEAM BATMAN"
    },
    "batman/blue": {
        codigo: "/colors blue 90 FDFF00 282E3C 282E3C 505C7C",
        nombreEquipo: "TEAM BATMAN"
    },

    // BELGRANO ATHLETIC CLUB
    "bac/titular/red": {
        codigo: "/colors red 90 FFFFFF FFCC00 994C00 FFCC00",
        nombreEquipo: "BELGRANO ATHLETIC CLUB"
    },
    "bac/titular/blue": {
        codigo: "/colors blue 90 FFFFFF FFCC00 994C00 FFCC00",
        nombreEquipo: "BELGRANO ATHLETIC CLUB"
    },
    "bac/alternativa/red": {
        codigo: "/colors red 180 FFEB20 1B7967 FE3045 1B7967",
        nombreEquipo: "BELGRANO ATHLETIC CLUB"
    },
    "bac/alternativa/blue": {
        codigo: "/colors blue 180 FFEB20 1B7967 FE3045 1B7967",
        nombreEquipo: "BELGRANO ATHLETIC CLUB"
    },

    // ROSARIO ATHLETIC CLUB
    "roac/titular/red": {
        codigo: "/colors red 0 FFFFFF 8F3A52 229CD8",
        nombreEquipo: "ROSARIO ATHLETIC CLUB"
    },
    "roac/titular/blue": {
        codigo: "/colors blue 0 FFFFFF 8F3A52 229CD8",
        nombreEquipo: "ROSARIO ATHLETIC CLUB"
    },

    // CLUB ATLÉTICO PORTEÑO
    "caport/titular/red": {
        codigo: "/colors red 0 2B2B2B FFFFFF 4B55D9 FFFFFF",
        nombreEquipo: "CA. PORTEÑO"
    },
    "caport/titular/blue": {
        codigo: "/colors blue 0 2B2B2B FFFFFF 4B55D9 FFFFFF",
        nombreEquipo: "CA. PORTEÑO"
    },

    // VILLAREAL
    "vil/titular/red": {
        codigo: "/colors red 90 194667 F9EA6B",
        nombreEquipo: "VILLAREAL"
    },
    "vil/titular/blue": {
        codigo: "/colors blue 90 194667 F9EA6B",
        nombreEquipo: "VILLAREAL"
    },
    "vil/alternativa/red": {
        codigo: "/colors red 90 E1DC06 143151",
        nombreEquipo: "VILLAREAL"
    },
    "vil/alternativa/blue": {
        codigo: "/colors blue 90 E1DC06 143151",
        nombreEquipo: "VILLAREAL"
    },

    // CELTA DE VIGO
    "cel/titular/red": {
        codigo: "/colors red 136 141414 43B5F4 8DDDFE 8DDDFE",
        nombreEquipo: "CELTA DE VIGO"
    },
    "cel/titular/blue": {
        codigo: "/colors blue 136 141414 43B5F4 8DDDFE 8DDDFE",
        nombreEquipo: "CELTA DE VIGO"
    },

    // MALLORCA
    "mll/titular/red": {
        codigo: "/colors red 90 FFFFFF FE5341 D42A2A D42A2A",
        nombreEquipo: "MALLORCA"
    },
    "mll/titular/blue": {
        codigo: "/colors blue 90 FFFFFF FE5341 D42A2A D42A2A",
        nombreEquipo: "MALLORCA"
    },

    // LEEDS UNITED
    "lee/titular/red": {
        codigo: "/colors red 123 000000 E7FE68 FFFFFF FFFFFF",
        nombreEquipo: "LEEDS UNITED"
    },
    "lee/titular/blue": {
        codigo: "/colors blue 123 000000 E7FE68 FFFFFF FFFFFF",
        nombreEquipo: "LEEDS UNITED"
    },
    "lee/alternativa/red": {
        codigo: "/colors red 123 FFFFFF 00113D 021A86 021A86",
        nombreEquipo: "LEEDS UNITED"
    },
    "lee/alternativa/blue": {
        codigo: "/colors blue 123 FFFFFF 00113D 021A86 021A86",
        nombreEquipo: "LEEDS UNITED"
    },

    // SUIZA
    "sui/titular/red": {
        codigo: "/colors red 90 F3EDF1 F8F8F8 F6272F F6272F",
        nombreEquipo: "SUIZA"
    },
    "sui/titular/blue": {
        codigo: "/colors blue 90 F3EDF1 F8F8F8 F6272F F6272F",
        nombreEquipo: "SUIZA"
    },
    "sui/alternativa/red": {
        codigo: "/colors red 90 A12638 F6F7FC F9EBF5 F1DDE4",
        nombreEquipo: "SUIZA"
    },
    "sui/alternativa/blue": {
        codigo: "/colors blue 90 A12638 F6F7FC F9EBF5 F1DDE4",
        nombreEquipo: "SUIZA"
    },
    "sui/titular2021/red": {
        codigo: "/colors red 90 FFFFFF 770316 E40017 E40017",
        nombreEquipo: "SUIZA"
    },
    "sui/titular2021/blue": {
        codigo: "/colors blue 90 FFFFFF 770316 E40017 E40017",
        nombreEquipo: "SUIZA"
    },

    // SUECIA
    "swe/titular/red": {
        codigo: "/colors red 123 2D4466 F3E731",
        nombreEquipo: "SUECIA"
    },
    "swe/titular/blue": {
        codigo: "/colors blue 123 2D4466 F3E731",
        nombreEquipo: "SUECIA"
    },
    "swe/alternativa/red": {
        codigo: "/colors red 90 F3EA5D F0EB0B 152A49 1B2E4E",
        nombreEquipo: "SUECIA"
    },
    "swe/alternativa/blue": {
        codigo: "/colors blue 90 F3EA5D F0EB0B 152A49 1B2E4E",
        nombreEquipo: "SUECIA"
    },

    // CRUCERO DEL NORTE
    "cdn/titular/red": {
        codigo: "/colors red 90 000000 FEED6B FEED6B 5F5D58",
        nombreEquipo: "CRUCERO DEL NORTE"
    },
    "cdn/titular/blue": {
        codigo: "/colors blue 90 000000 FEED6B FEED6B 5F5D58",
        nombreEquipo: "CRUCERO DEL NORTE"
    },
    "cdn/titular/2014/red": {
        codigo: "/colors red 0 1E1E1E F8E409 F58603",
        nombreEquipo: "CRUCERO DEL NORTE"
    },
    "cdn/titular/2014/blue": {
        codigo: "/colors blue 0 1E1E1E F8E409 F58603",
        nombreEquipo: "CRUCERO DEL NORTE"
    },
    "cdn/alternativa/2014/red": {
        codigo: "/colors red 0 1E1D2D EB5C32 EEED33",
        nombreEquipo: "CRUCERO DEL NORTE"
    },
    "cdn/alternativa/2014/blue": {
        codigo: "/colors blue 0 1E1D2D EB5C32 EEED33",
        nombreEquipo: "CRUCERO DEL NORTE"
    },
    "cdn/titular/2013/red": {
        codigo: "/colors red 116 1D1E10 E74A03 F8E622 F8E622",
        nombreEquipo: "CRUCERO DEL NORTE"
    },
    "cdn/titular/2013/blue": {
        codigo: "/colors blue 116 1D1E10 E74A03 F8E622 F8E622",
        nombreEquipo: "CRUCERO DEL NORTE"
    },

    // SC BRAGA
    "scb/titular/red": {
        codigo: "/colors red 127 C2C2C2 FFFFFF FD2F22 FD2F22",
        nombreEquipo: "SC BRAGA"
    },
    "scb/titular/blue": {
        codigo: "/colors blue 127 C2C2C2 FFFFFF FD2F22 FD2F22",
        nombreEquipo: "SC BRAGA"
    },

    // SPORTING CP
    "spo/titular/red": {
        codigo: "/colors red 90 252A30 0F8469 FFFFFF 0F8469",
        nombreEquipo: "SPORTING CP"
    },
    "spo/titular/blue": {
        codigo: "/colors blue 90 252A30 0F8469 FFFFFF 0F8469",
        nombreEquipo: "SPORTING CP"
    },

    // FC PORTO
    "fcp/titular/red": {
        codigo: "/colors red 180 F83539 013FBB FFFFFF 013FBB",
        nombreEquipo: "FC PORTO"
    },
    "fcp/titular/blue": {
        codigo: "/colors blue 180 F83539 013FBB FFFFFF 013FBB",
        nombreEquipo: "FC PORTO"
    },

    // SL BENFICA
    "ben/titular/red": {
        codigo: "/colors red 90 FFFFFF E62B32",
        nombreEquipo: "SL BENFICA"
    },
    "ben/titular/blue": {
        codigo: "/colors blue 90 FFFFFF E62B32",
        nombreEquipo: "SL BENFICA"
    },
    // CAMERÚN
    "cmr/titular/red": {
        codigo: "/colors red 110 F7D504 CF1F24 016D3C 016D3C",
        nombreEquipo: "CAMERÚN"
    },
    "cmr/titular/blue": {
        codigo: "/colors blue 110 F7D504 CF1F24 016D3C 016D3C",
        nombreEquipo: "CAMERÚN"
    },
    "cmr/alternativa/red": {
        codigo: "/colors red 110 048350 E22B31 F6E000 FAD701",
        nombreEquipo: "CAMERÚN"
    },
    "cmr/alternativa/blue": {
        codigo: "/colors blue 110 048350 E22B31 F6E000 FAD701",
        nombreEquipo: "CAMERÚN"
    },

    // COSTA DE MARFIL
    "cdm/titular/red": {
        codigo: "/colors red 90 EEEEEE 038650 FE9D01 F26909",
        nombreEquipo: "COSTA DE MARFIL"
    },
    "cdm/titular/blue": {
        codigo: "/colors blue 90 EEEEEE 038650 FE9D01 F26909",
        nombreEquipo: "COSTA DE MARFIL"
    },
    "cdm/alternativa/red": {
        codigo: "/colors red 90 FFAD2F F7F7F9",
        nombreEquipo: "COSTA DE MARFIL"
    },
    "cdm/alternativa/blue": {
        codigo: "/colors blue 90 FFAD2F F7F7F9",
        nombreEquipo: "COSTA DE MARFIL"
    },

    // UCRANIA
    "ukr/titular/red": {
        codigo: "/colors red 90 0083D5 019FE0 FAEA59 FAEA59",
        nombreEquipo: "UCRANIA"
    },
    "ukr/titular/blue": {
        codigo: "/colors blue 90 0083D5 019FE0 FAEA59 FAEA59",
        nombreEquipo: "UCRANIA"
    },
    "ukr/alternativa/red": {
        codigo: "/colors red 90 EEDD30 129CEA 12A9ED 12A9ED",
        nombreEquipo: "UCRANIA"
    },
    "ukr/alternativa/blue": {
        codigo: "/colors blue 90 EEDD30 129CEA 12A9ED 12A9ED",
        nombreEquipo: "UCRANIA"
    },
    "ukr/bandera/red": {
        codigo: "/colors red 90 24167D 005BBB FFD500",
        nombreEquipo: "UCRANIA"
    },
    "ukr/bandera/blue": {
        codigo: "/colors blue 90 24167D 005BBB FFD500",
        nombreEquipo: "UCRANIA"
    },

    // SAN MIGUEL
    "sm/titular/red": {
        codigo: "/colors red 180 0366C1 00933F FFFFFF 00933F",
        nombreEquipo: "SAN MIGUEL"
    },
    "sm/titular/blue": {
        codigo: "/colors blue 180 0366C1 00933F FFFFFF 00933F",
        nombreEquipo: "SAN MIGUEL"
    },
    "sm/alternativa/red": {
        codigo: "/colors red 55 80E7A6 2F485E 25374D 243145",
        nombreEquipo: "SAN MIGUEL"
    },
    "sm/alternativa/blue": {
        codigo: "/colors blue 55 80E7A6 2F485E 25374D 243145",
        nombreEquipo: "SAN MIGUEL"
    },

    // LAFERRERE
    "laf/titular/red": {
        codigo: "/colors red 180 D71E3E 346838 FFFFFF 346838",
        nombreEquipo: "LAFERRERE"
    },
    "laf/titular/blue": {
        codigo: "/colors blue 180 D71E3E 346838 FFFFFF 346838",
        nombreEquipo: "LAFERRERE"
    },

    // MÉXICO
    "mex/titular/red": {
        codigo: "/colors red 90 FFFFFF 045D55 067957 08A56C",
        nombreEquipo: "MÉXICO"
    },
    "mex/titular/blue": {
        codigo: "/colors blue 90 FFFFFF 045D55 067957 08A56C",
        nombreEquipo: "MÉXICO"
    },
    "mex/alternativa/red": {
        codigo: "/colors red 70 E53A4C 048545 FFFFFF FFFFFF",
        nombreEquipo: "MÉXICO"
    },
    "mex/alternativa/blue": {
        codigo: "/colors blue 70 E53A4C 048545 FFFFFF FFFFFF",
        nombreEquipo: "MÉXICO"
    },
    "mex/bandera/red": {
        codigo: "/colors red 0 4D2A15 006847 FFFFFF CE1126",
        nombreEquipo: "MÉXICO"
    },
    "mex/bandera/blue": {
        codigo: "/colors blue 0 4D2A15 006847 FFFFFF CE1126",
        nombreEquipo: "MÉXICO"
    },
    "mex/tercera/red": {
        codigo: "/colors red 70 19744A 8A2F3E F1F1F3 F6F6F6",
        nombreEquipo: "MÉXICO"
    },
    "mex/tercera/blue": {
        codigo: "/colors blue 70 19744A 8A2F3E F1F1F3 F6F6F6",
        nombreEquipo: "MÉXICO"
    },

    // SENEGAL
    "sen/titular/red": {
        codigo: "/colors red 90 01A283 E3EFF2 F4F2E3 F9E7EC",
        nombreEquipo: "SENEGAL"
    },
    "sen/titular/blue": {
        codigo: "/colors blue 90 01A283 E3EFF2 F4F2E3 F9E7EC",
        nombreEquipo: "SENEGAL"
    },
    "sen/alternativa/red": {
        codigo: "/colors red 90 C3EC31 C0E933 38543F 38543F",
        nombreEquipo: "SENEGAL"
    },
    "sen/alternativa/blue": {
        codigo: "/colors blue 90 C3EC31 C0E933 38543F 38543F",
        nombreEquipo: "SENEGAL"
    },
    "sen/bandera/red": {
        codigo: "/colors red 0 028768 02AF94 F6DC47 FC1A2E",
        nombreEquipo: "SENEGAL"
    },
    "sen/bandera/blue": {
        codigo: "/colors blue 0 028768 02AF94 F6DC47 FC1A2E",
        nombreEquipo: "SENEGAL"
    },

    // IRÁN
    "irn/titular/red": {
        codigo: "/colors red 120 C52936 5CC26E FFFFFF FFFFFF",
        nombreEquipo: "IRÁN"
    },
    "irn/titular/blue": {
        codigo: "/colors blue 120 C52936 5CC26E FFFFFF FFFFFF",
        nombreEquipo: "IRÁN"
    },
    "irn/alternativa/red": {
        codigo: "/colors red 120 FFFFFF 88DC91 F0273A F0273A",
        nombreEquipo: "IRÁN"
    },
    "irn/alternativa/blue": {
        codigo: "/colors blue 120 FFFFFF 88DC91 F0273A F0273A",
        nombreEquipo: "IRÁN"
    },

    // POLONIA
    "pol/titular/red": {
        codigo: "/colors red 63 AB0C28 F1F2F7",
        nombreEquipo: "POLONIA"
    },
    "pol/titular/blue": {
        codigo: "/colors blue 63 AB0C28 F1F2F7",
        nombreEquipo: "POLONIA"
    },
    "pol/alternativa/red": {
        codigo: "/colors red 63 FFFFFF AD011B",
        nombreEquipo: "POLONIA"
    },
    "pol/alternativa/blue": {
        codigo: "/colors blue 63 FFFFFF AD011B",
        nombreEquipo: "POLONIA"
    },

    // COSTA RICA
    "crc/titular/red": {
        codigo: "/colors red 90 FFFFFF 0252B0 D80122 D80122",
        nombreEquipo: "COSTA RICA"
    },
    "crc/titular/blue": {
        codigo: "/colors blue 90 FFFFFF 0252B0 D80122 D80122",
        nombreEquipo: "COSTA RICA"
    },
    "crc/alternativa/red": {
        codigo: "/colors red 90 263849 122A41 FFFFFF FFFFFF",
        nombreEquipo: "COSTA RICA"
    },
    "crc/alternativa/blue": {
        codigo: "/colors blue 90 263849 122A41 FFFFFF FFFFFF",
        nombreEquipo: "COSTA RICA"
    },

    // CANADÁ
    "can/titular/red": {
        codigo: "/colors red 90 FFFFFF F11D34 E20025 E20025",
        nombreEquipo: "CANADÁ"
    },
    "can/titular/blue": {
        codigo: "/colors blue 90 FFFFFF F11D34 E20025 E20025",
        nombreEquipo: "CANADÁ"
    },
    "can/alternativa/red": {
        codigo: "/colors red 65 ED4459 D70125 F8F8FA F8F8FA",
        nombreEquipo: "CANADÁ"
    },
    "can/alternativa/blue": {
        codigo: "/colors blue 65 ED4459 D70125 F8F8FA F8F8FA",
        nombreEquipo: "CANADÁ"
    },

    // MARRUECOS
    "mar/titular/red": {
        codigo: "/colors red 90 FFFFFF 038A4A F4001A F4001A",
        nombreEquipo: "MARRUECOS"
    },
    "mar/titular/blue": {
        codigo: "/colors blue 90 FFFFFF 038A4A F4001A F4001A",
        nombreEquipo: "MARRUECOS"
    },
    "mar/alternativa/red": {
        codigo: "/colors red 90 098468 7F2830 FFFFFF FFFFFF",
        nombreEquipo: "MARRUECOS"
    },
    "mar/alternativa/blue": {
        codigo: "/colors blue 90 098468 7F2830 FFFFFF FFFFFF",
        nombreEquipo: "MARRUECOS"
    },

    // SERBIA
    "srb/titular/red": {
        codigo: "/colors red 120 E1B876 AF0013 CF0221 CF0221",
        nombreEquipo: "SERBIA"
    },
    "srb/titular/blue": {
        codigo: "/colors blue 120 E1B876 AF0013 CF0221 CF0221",
        nombreEquipo: "SERBIA"
    },
    "srb/alternativa/red": {
        codigo: "/colors red 90 C7DE45 1F2545 FFFFFF FFFFFF",
        nombreEquipo: "SERBIA"
    },
    "srb/alternativa/blue": {
        codigo: "/colors blue 90 C7DE45 1F2545 FFFFFF FFFFFF",
        nombreEquipo: "SERBIA"
    },
    // GHANA
    "gha/titular/red": {
        codigo: "/colors red 90 0A745C 211C22 D3D2D9 FFFFFF",
        nombreEquipo: "GHANA"
    },
    "gha/titular/blue": {
        codigo: "/colors blue 90 0A745C 211C22 D3D2D9 FFFFFF",
        nombreEquipo: "GHANA"
    },
    "gha/alternativa/red": {
        codigo: "/colors red 90 006E49 1A241C F4E100 F4E100",
        nombreEquipo: "GHANA"
    },
    "gha/alternativa/blue": {
        codigo: "/colors blue 90 006E49 1A241C F4E100 F4E100",
        nombreEquipo: "GHANA"
    },

    // TÚNEZ
    "tun/titular/red": {
        codigo: "/colors red 90 FE4C4F F1F2F8 FFFFFF",
        nombreEquipo: "TÚNEZ"
    },
    "tun/titular/blue": {
        codigo: "/colors blue 90 FE4C4F F1F2F8 FFFFFF",
        nombreEquipo: "TÚNEZ"
    },
    "tun/alternativa/red": {
        codigo: "/colors red 90 FFFFFF FC2539 EB0A2F",
        nombreEquipo: "TÚNEZ"
    },
    "tun/alternativa/blue": {
        codigo: "/colors blue 90 FFFFFF FC2539 EB0A2F",
        nombreEquipo: "TÚNEZ"
    },

    // DINAMARCA
    "den/titular/red": {
        codigo: "/colors red 90 FFFFFF F2F1F7 BD0215 DD0023",
        nombreEquipo: "DINAMARCA"
    },
    "den/titular/blue": {
        codigo: "/colors blue 90 FFFFFF F2F1F7 BD0215 DD0023",
        nombreEquipo: "DINAMARCA"
    },
    "den/alternativa/red": {
        codigo: "/colors red 65 E02435 CA0B2C FFFFFF FFFFFF",
        nombreEquipo: "DINAMARCA"
    },
    "den/alternativa/blue": {
        codigo: "/colors blue 65 E02435 CA0B2C FFFFFF FFFFFF",
        nombreEquipo: "DINAMARCA"
    },

    // ARABIA SAUDITA
    "ksa/titular/red": {
        codigo: "/colors red 90 02906A FFFFFF",
        nombreEquipo: "ARABIA SAUDITA"
    },
    "ksa/titular/blue": {
        codigo: "/colors blue 90 02906A FFFFFF",
        nombreEquipo: "ARABIA SAUDITA"
    },
    "ksa/alternativa/red": {
        codigo: "/colors red 130 EBF0F3 033D31 033D31 02906A",
        nombreEquipo: "ARABIA SAUDITA"
    },
    "ksa/alternativa/blue": {
        codigo: "/colors blue 130 EBF0F3 033D31 033D31 02906A",
        nombreEquipo: "ARABIA SAUDITA"
    },

    // COREA DEL SUR
    "kor/titular/red": {
        codigo: "/colors red 90 0F0C0F FFB6D1 FF859E EF3A46",
        nombreEquipo: "COREA DEL SUR"
    },
    "kor/titular/blue": {
        codigo: "/colors blue 90 0F0C0F FFB6D1 FF859E EF3A46",
        nombreEquipo: "COREA DEL SUR"
    },
    "kor/alternativa/red": {
        codigo: "/colors red 76 DEBF80 1C1D24 FFFFFF FFFFFF",
        nombreEquipo: "COREA DEL SUR"
    },
    "kor/alternativa/blue": {
        codigo: "/colors blue 76 DEBF80 1C1D24 FFFFFF FFFFFF",
        nombreEquipo: "COREA DEL SUR"
    },

    // PLAZA COLONIA
    "pcol/titular/red": {
        codigo: "/colors red 114 095320 5FB286 A8C3B2 FFFFFF",
        nombreEquipo: "PLAZA COLONIA"
    },
    "pcol/titular/blue": {
        codigo: "/colors blue 114 095320 5FB286 A8C3B2 FFFFFF",
        nombreEquipo: "PLAZA COLONIA"
    },
    "pcol/alternativa/red": {
        codigo: "/colors red 63 1BA470 151F29",
        nombreEquipo: "PLAZA COLONIA"
    },
    "pcol/alternativa/blue": {
        codigo: "/colors blue 63 1BA470 151F29",
        nombreEquipo: "PLAZA COLONIA"
    },

    // DEPORTIVO TACHIRA
    "tach/titular/red": {
        codigo: "/colors red 180 FFFFFF FFD401 171918 FFD401",
        nombreEquipo: "DEPORTIVO TACHIRA"
    },
    "tach/titular/blue": {
        codigo: "/colors blue 180 FFFFFF FFD401 171918 FFD401",
        nombreEquipo: "DEPORTIVO TACHIRA"
    },
    "tach/alternativa/red": {
        codigo: "/colors red 124 000100 FFCD00 CECBD2 F1F1F1",
        nombreEquipo: "DEPORTIVO TACHIRA"
    },
    "tach/alternativa/blue": {
        codigo: "/colors blue 124 000100 FFCD00 CECBD2 F1F1F1",
        nombreEquipo: "DEPORTIVO TACHIRA"
    },

    // CARACAS
    "carc/titular/red": {
        codigo: "/colors red 128 FFFFFF 271B1D C72F2C C72F2C",
        nombreEquipo: "CARACAS"
    },
    "carc/titular/blue": {
        codigo: "/colors blue 128 FFFFFF 271B1D C72F2C C72F2C",
        nombreEquipo: "CARACAS"
    },
    "carc/alternativa/red": {
        codigo: "/colors red 128 000000 FFFFFF EAEAEA",
        nombreEquipo: "CARACAS"
    },
    "carc/alternativa/blue": {
        codigo: "/colors blue 128 000000 FFFFFF EAEAEA",
        nombreEquipo: "CARACAS"
    },

    // MONAGAS
    "mng/titular/red": {
        codigo: "/colors red 180 FFFFFF 000045 A10000 000045",
        nombreEquipo: "MONAGAS"
    },
    "mng/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 000045 A10000 000045",
        nombreEquipo: "MONAGAS"
    },
    "mng/alternativa/red": {
        codigo: "/colors red 128 000000 DDFF00",
        nombreEquipo: "MONAGAS"
    },
    "mng/alternativa/blue": {
        codigo: "/colors blue 128 000000 DDFF00",
        nombreEquipo: "MONAGAS"
    },

    // DEPORTIVO LARA
    "dlar/titular/red": {
        codigo: "/colors red 180 F0F0F0 E70026 302A2E E70026",
        nombreEquipo: "DEP. LARA"
    },
    "dlar/titular/blue": {
        codigo: "/colors blue 180 F0F0F0 E70026 302A2E E70026",
        nombreEquipo: "DEP. LARA"
    },
    "dlar/alternativa/red": {
        codigo: "/colors red 128 B31F2B FFFFFF",
        nombreEquipo: "DEP. LARA"
    },
    "dlar/alternativa/blue": {
        codigo: "/colors blue 128 B31F2B FFFFFF",
        nombreEquipo: "DEP. LARA"
    },

    // UNIVERSIDAD CESAR VALLEJO
    "ucv/titular/red": {
        codigo: "/colors red 180 FFFFFF F9591D FD6617 FD6617",
        nombreEquipo: "U. CESAR VALLEJO"
    },
    "ucv/titular/blue": {
        codigo: "/colors blue 180 FFFFFF F9591D FD6617 FD6617",
        nombreEquipo: "U. CESAR VALLEJO"
    },
    "ucv/alternativa/red": {
        codigo: "/colors red 180 FFFFFF 031B47 03173D 03173D",
        nombreEquipo: "U. CESAR VALLEJO"
    },
    "ucv/alternativa/blue": {
        codigo: "/colors blue 180 FFFFFF 031B47 03173D 03173D",
        nombreEquipo: "U. CESAR VALLEJO"
    },

    // CLUB DEPORTIVO UNIVERSIDAD CATOLICA
    "depuca/titular/red": {
        codigo: "/colors red 180 042544 9DCCE1 96C8E1",
        nombreEquipo: "CLUB DEP. UNIVERSIDAD CATOLICA"
    },
    "depuca/titular/blue": {
        codigo: "/colors blue 180 042544 9DCCE1 96C8E1",
        nombreEquipo: "CLUB DEP. UNIVERSIDAD CATOLICA"
    },
    "depuca/alternativa/red": {
        codigo: "/colors red 180 D9EBF4 141414 000000 141414",
        nombreEquipo: "CLUB DEP. UNIVERSIDAD CATOLICA"
    },
    "depuca/alternativa/blue": {
        codigo: "/colors blue 180 D9EBF4 141414 000000 141414",
        nombreEquipo: "CLUB DEP. UNIVERSIDAD CATOLICA"
    },

    // DEPORTES TOLIMA
    "deptol/titular/red": {
        codigo: "/colors red 180 BF9A4A 700A1D 771124",
        nombreEquipo: "DEPORTES TOLIMA"
    },
    "deptol/titular/blue": {
        codigo: "/colors blue 180 BF9A4A 700A1D 771124",
        nombreEquipo: "DEPORTES TOLIMA"
    },
    "deptol/alternativa/red": {
        codigo: "/colors red 90 771124 BF9A4A FFFFFF FFFFFF",
        nombreEquipo: "DEPORTES TOLIMA"
    },
    "deptol/alternativa/blue": {
        codigo: "/colors blue 90 771124 BF9A4A FFFFFF FFFFFF",
        nombreEquipo: "DEPORTES TOLIMA"
    },

    // INDEPENDIENTE PETROLERO
    "pet/titular/red": {
        codigo: "/colors red 180 636363 AA0515 FFFFFF AA0515",
        nombreEquipo: "INDEPENDIENTE PETROLERO"
    },
    "pet/titular/blue": {
        codigo: "/colors blue 180 636363 AA0515 FFFFFF AA0515",
        nombreEquipo: "INDEPENDIENTE PETROLERO"
    },
    "pet/alternativa/red": {
        codigo: "/colors red 90 FFFFFF 8A0D15 C6121E 8A0D15",
        nombreEquipo: "INDEPENDIENTE PETROLERO"
    },
    "pet/alternativa/blue": {
        codigo: "/colors blue 90 FFFFFF 8A0D15 C6121E 8A0D15",
        nombreEquipo: "INDEPENDIENTE PETROLERO"
    },

    // ALWAYS READY
    "alwr/titular/red": {
        codigo: "/colors red 33 1A1A1C FFFFFF FE323D FFFFFF",
        nombreEquipo: "ALWAYS READY"
    },
    "alwr/titular/blue": {
        codigo: "/colors blue 33 1A1A1C FFFFFF FE323D FFFFFF",
        nombreEquipo: "ALWAYS READY"
    },
    "alwr/alternativa/red": {
        codigo: "/colors red 34 FFFFFF 9F2240 D43742 9F2240",
        nombreEquipo: "ALWAYS READY"
    },
    "alwr/alternativa/blue": {
        codigo: "/colors blue 34 FFFFFF 9F2240 D43742 9F2240",
        nombreEquipo: "ALWAYS READY"
    },

    // FORTALEZA
    "fort/titular/red": {
        codigo: "/colors red 90 FFFFFF F91838 11328F F91838",
        nombreEquipo: "FORTALEZA"
    },
    "fort/titular/blue": {
        codigo: "/colors blue 90 FFFFFF F91838 11328F F91838",
        nombreEquipo: "FORTALEZA"
    },
    "fort/alternativa/red": {
        codigo: "/colors red 34 040A5E FAFAFA",
        nombreEquipo: "FORTALEZA"
    },
    "fort/alternativa/blue": {
        codigo: "/colors blue 34 040A5E FAFAFA",
        nombreEquipo: "FORTALEZA"
    },

    // RB BRAGANTINO
    "rbb/titular/red": {
        codigo: "/colors red -50 FE0302 E9E9E9 FFFFFF E9E9E9",
        nombreEquipo: "RB BRAGANTINO"
    },
    "rbb/titular/blue": {
        codigo: "/colors blue -50 FE0302 E9E9E9 FFFFFF E9E9E9",
        nombreEquipo: "RB BRAGANTINO"
    },
    "rbb/alternativa/red": {
        codigo: "/colors red -50 FFFFFF 000000 151515 000000",
        nombreEquipo: "RB BRAGANTINO"
    },
    "rbb/alternativa/blue": {
        codigo: "/colors blue -50 FFFFFF 000000 151515 000000",
        nombreEquipo: "RB BRAGANTINO"
    },
    "rbb/tercera/red": {
        codigo: "/colors red -50 FFFFFF FF1112 DE0609 FF1112",
        nombreEquipo: "RB BRAGANTINO"
    },
    "rbb/tercera/blue": {
        codigo: "/colors blue -50 FFFFFF FF1112 DE0609 FF1112",
        nombreEquipo: "RB BRAGANTINO"
    },

    // AMÉRICA MINEIRO
    "amcmin/titular/red": {
        codigo: "/colors red 180 FFFFFF 6EC576 27272F 6EC576",
        nombreEquipo: "AMÉRICA MINEIRO"
    },
    "amcmin/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 6EC576 27272F 6EC576",
        nombreEquipo: "AMÉRICA MINEIRO"
    },
    "amcmin/alternativa/red": {
        codigo: "/colors red 90 107837 026B2E EFEFEF FAFAFA",
        nombreEquipo: "AMÉRICA MINEIRO"
    },
    "amcmin/alternativa/blue": {
        codigo: "/colors blue 90 107837 026B2E EFEFEF FAFAFA",
        nombreEquipo: "AMÉRICA MINEIRO"
    },
    // TORINO
    "tor/titular/red": {
        codigo: "/colors red 90 FBFAF8 900A23",
        nombreEquipo: "TORINO"
    },
    "tor/titular/blue": {
        codigo: "/colors blue 90 FBFAF8 900A23",
        nombreEquipo: "TORINO"
    },
    "tor/alternativa/red": {
        codigo: "/colors red 60 A2374B F0F1F6",
        nombreEquipo: "TORINO"
    },
    "tor/alternativa/blue": {
        codigo: "/colors blue 60 A2374B F0F1F6",
        nombreEquipo: "TORINO"
    },

    // GENOA
    "gen/titular/red": {
        codigo: "/colors red 0 E2BF61 DB001E 262E45",
        nombreEquipo: "GENOA"
    },
    "gen/titular/blue": {
        codigo: "/colors blue 0 E2BF61 DB001E 262E45",
        nombreEquipo: "GENOA"
    },
    "gen/alternativa/red": {
        codigo: "/colors red 90 F6D903 FFFFFF F8011E 27305B",
        nombreEquipo: "GENOA"
    },
    "gen/alternativa/blue": {
        codigo: "/colors blue 90 F6D903 FFFFFF F8011E 27305B",
        nombreEquipo: "GENOA"
    },

    // PALERMO
    "plm/titular/red": {
        codigo: "/colors red 0 2E272E F8C6E1",
        nombreEquipo: "PALERMO"
    },
    "plm/titular/blue": {
        codigo: "/colors blue 0 2E272E F8C6E1",
        nombreEquipo: "PALERMO"
    },
    "plm/alternativa/red": {
        codigo: "/colors red 90 2F2C33 FDC7DF F0F3FA F0F3FA",
        nombreEquipo: "PALERMO"
    },
    "plm/alternativa/blue": {
        codigo: "/colors blue 90 2F2C33 FDC7DF F0F3FA F0F3FA",
        nombreEquipo: "PALERMO"
    },

    // CHIEVO VERONA
    "chver/titular/red": {
        codigo: "/colors red 90 0BA3EE F8C6E1 F4EF5F F4EF5F",
        nombreEquipo: "CHIEVO VERONA"
    },
    "chver/titular/blue": {
        codigo: "/colors blue 90 0BA3EE F8C6E1 F4EF5F F4EF5F",
        nombreEquipo: "CHIEVO VERONA"
    },
    "chver/alternativa/red": {
        codigo: "/colors red 0 FFFFFF 06ACFA 069DF0 06ACFA",
        nombreEquipo: "CHIEVO VERONA"
    },
    "chver/alternativa/blue": {
        codigo: "/colors blue 0 FFFFFF 06ACFA 069DF0 06ACFA",
        nombreEquipo: "CHIEVO VERONA"
    },

    // BARRACAS CENTRAL
    "barr/titular/red": {
        codigo: "/colors red 180 7D1622 E20613 FFFFFF E20613",
        nombreEquipo: "BARRACAS CENTRAL"
    },
    "barr/titular/blue": {
        codigo: "/colors blue 180 7D1622 E20613 FFFFFF E20613",
        nombreEquipo: "BARRACAS CENTRAL"
    },
    "barr/alternativa/red": {
        codigo: "/colors red 180 EF2233 E8E8E8 FFFFFF E8E8E8",
        nombreEquipo: "BARRACAS CENTRAL"
    },
    "barr/alternativa/blue": {
        codigo: "/colors blue 180 EF2233 E8E8E8 FFFFFF E8E8E8",
        nombreEquipo: "BARRACAS CENTRAL"
    },
    "barr/tercera/red": {
        codigo: "/colors red 180 EE4F3A 3D3F3E 768282 3D3F3E",
        nombreEquipo: "BARRACAS CENTRAL"
    },
    "barr/tercera/blue": {
        codigo: "/colors blue 180 EE4F3A 3D3F3E 768282 3D3F3E",
        nombreEquipo: "BARRACAS CENTRAL"
    },

    // GALES
    "gal/titular/red": {
        codigo: "/colors red 180 FFFFFF ED051F",
        nombreEquipo: "GALES"
    },
    "gal/titular/blue": {
        codigo: "/colors blue 180 FFFFFF ED051F",
        nombreEquipo: "GALES"
    },
    "gal/alternativa/red": {
        codigo: "/colors red 90 F40719 017457 F9E10F F9E10F",
        nombreEquipo: "GALES"
    },
    "gal/alternativa/blue": {
        codigo: "/colors blue 90 F40719 017457 F9E10F F9E10F",
        nombreEquipo: "GALES"
    },

    // AUSTRALIA
    "aus/titular/red": {
        codigo: "/colors red 90 204B44 F4C91A",
        nombreEquipo: "AUSTRALIA"
    },
    "aus/titular/blue": {
        codigo: "/colors blue 90 204B44 F4C91A",
        nombreEquipo: "AUSTRALIA"
    },
    "aus/alternativa/red": {
        codigo: "/colors red 70 FDE140 323556 1A8692 1A8692",
        nombreEquipo: "AUSTRALIA"
    },
    "aus/alternativa/blue": {
        codigo: "/colors blue 70 FDE140 323556 1A8692 1A8692",
        nombreEquipo: "AUSTRALIA"
    },

    // SARMIENTO DE JUNÍN
    "sar/titular/red": {
        codigo: "/colors red 90 FFFFFF 377039 2D6332 225228",
        nombreEquipo: "SARMIENTO DE JUNÍN"
    },
    "sar/titular/blue": {
        codigo: "/colors blue 90 FFFFFF 377039 2D6332 225228",
        nombreEquipo: "SARMIENTO DE JUNÍN"
    },
    "sar/alternativa/red": {
        codigo: "/colors red 90 15402F 9FD2C3 FFFFFF FFFFFF",
        nombreEquipo: "SARMIENTO DE JUNÍN"
    },
    "sar/alternativa/blue": {
        codigo: "/colors blue 90 15402F 9FD2C3 FFFFFF FFFFFF",
        nombreEquipo: "SARMIENTO DE JUNÍN"
    },

    // 1K
    "1k/titular/red": {
        codigo: "/colors red 60 FFFFFF E873B3 352770 352770",
        nombreEquipo: "1K"
    },
    "1k/titular/blue": {
        codigo: "/colors blue 60 FFFFFF E873B3 352770 352770",
        nombreEquipo: "1K"
    },

    // ANIQUILADORES FC
    "aniquiladores/titular/red": {
        codigo: "/colors red 180 110E0F CB2C37 FFFFFF CB2C37",
        nombreEquipo: "ANIQUILADORES FC"
    },
    "aniquiladores/titular/blue": {
        codigo: "/colors blue 180 110E0F CB2C37 FFFFFF CB2C37",
        nombreEquipo: "ANIQUILADORES FC"
    },

    // JIJANTES FC
    "jijantes/titular/red": {
        codigo: "/colors red 180 FFFFFF 01317E B50E2A 01317E",
        nombreEquipo: "JIJANTES FC"
    },
    "jijantes/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 01317E B50E2A 01317E",
        nombreEquipo: "JIJANTES FC"
    },

    // ULTIMATE MOSTOLES
    "mostoles/titular/red": {
        codigo: "/colors red 180 BEA06D 0A0A0C 17171C 0A0A0C",
        nombreEquipo: "ULTIMATE MOSTOLES"
    },
    "mostoles/titular/blue": {
        codigo: "/colors blue 180 BEA06D 0A0A0C 17171C 0A0A0C",
        nombreEquipo: "ULTIMATE MOSTOLES"
    },

    // XBUYER TEAM
    "xbuyer/titular/red": {
        codigo: "/colors red 180 EEEE65 23477A 145EAB 0A71D0",
        nombreEquipo: "XBUYER TEAM"
    },
    "xbuyer/titular/blue": {
        codigo: "/colors blue 180 EEEE65 23477A 145EAB 0A71D0",
        nombreEquipo: "XBUYER TEAM"
    },

    // RAYO DE BARCELONA
    "rayo/titular/red": {
        codigo: "/colors red 66 F5ED07 171717 171717 F5ED07",
        nombreEquipo: "RAYO DE BARCELONA"
    },
    "rayo/titular/blue": {
        codigo: "/colors blue 66 F5ED07 171717 171717 F5ED07",
        nombreEquipo: "RAYO DE BARCELONA"
    },

    // PÍO FC
    "pio/titular/red": {
        codigo: "/colors red 1 1D1D1D E4E3E8",
        nombreEquipo: "PÍO FC"
    },
    "pio/titular/blue": {
        codigo: "/colors blue 1 1D1D1D E4E3E8",
        nombreEquipo: "PÍO FC"
    },

    // 9Z TEAM
    "9z/titular/red": {
        codigo: "/colors red 62 FFFFFF 342971 42266F",
        nombreEquipo: "9Z TEAM"
    },
    "9z/titular/blue": {
        codigo: "/colors blue 62 FFFFFF 342971 42266F",
        nombreEquipo: "9Z TEAM"
    },

    // FURIA
    "furia/titular/red": {
        codigo: "/colors red 62 FFFFFF 1D2127 1D2127 61646C",
        nombreEquipo: "FURIA"
    },
    "furia/titular/blue": {
        codigo: "/colors blue 62 FFFFFF 1D2127 1D2127 61646C",
        nombreEquipo: "FURIA"
    },

    // ISURUS GAMING
    "isurus/titular/red": {
        codigo: "/colors red 180 000000 EBEBEB 00FFBB EBEBEB",
        nombreEquipo: "ISURUS GAMING"
    },
    "isurus/titular/blue": {
        codigo: "/colors blue 180 000000 EBEBEB 00FFBB EBEBEB",
        nombreEquipo: "ISURUS GAMING"
    },

    // FURIUS GAMING
    "furius/titular/red": {
        codigo: "/colors red 40 AF2268 19232B",
        nombreEquipo: "FURIUS GAMING"
    },
    "furius/titular/blue": {
        codigo: "/colors blue 40 AF2268 19232B",
        nombreEquipo: "FURIUS GAMING"
    },

    // TRONCOS FC
    "troncos/titular/red": {
        codigo: "/colors red 180 104D3B 07B16F FFFFFF 07B16F",
        nombreEquipo: "TRONCOS FC"
    },
    "troncos/titular/blue": {
        codigo: "/colors blue 180 104D3B 07B16F FFFFFF 07B16F",
        nombreEquipo: "TRONCOS FC"
    },

    // KUNISPORTS
    "kunisports/titular/red": {
        codigo: "/colors red 90 FF0165 FFFFFF 797677 191418",
        nombreEquipo: "KUNISPORTS"
    },
    "kunisports/titular/blue": {
        codigo: "/colors blue 90 FF0165 FFFFFF 797677 191418",
        nombreEquipo: "KUNISPORTS"
    },

    // SAIYANS FC
    "saiyans/titular/red": {
        codigo: "/colors red 56 FFFFFF 033894 E54718 E23D15",
        nombreEquipo: "SAIYANS FC"
    },
    "saiyans/titular/blue": {
        codigo: "/colors blue 56 FFFFFF 033894 E54718 E23D15",
        nombreEquipo: "SAIYANS FC"
    },

    // PORCINOS FC
    "porcinos/titular/red": {
        codigo: "/colors red 65 FFFFFF FFBAD4 FFBAD4 FDE7F3",
        nombreEquipo: "PORCINOS FC"
    },
    "porcinos/titular/blue": {
        codigo: "/colors blue 65 FFFFFF FFBAD4 FFBAD4 FDE7F3",
        nombreEquipo: "PORCINOS FC"
    },

    // EL BARRIO FC
    "barrio/titular/red": {
        codigo: "/colors red 65 FFFFFF 012168 012168 00183C",
        nombreEquipo: "EL BARRIO FC"
    },
    "barrio/titular/blue": {
        codigo: "/colors blue 65 FFFFFF 012168 012168 00183C",
        nombreEquipo: "EL BARRIO FC"
    },

    // DOUGLAS HAIG
    "dou/titular/red": {
        codigo: "/colors red 180 FFFFFF 000000 FF1111 000000",
        nombreEquipo: "DOUGLAS HAIG"
    },
    "dou/titular/blue": {
        codigo: "/colors blue 180 FFFFFF 000000 FF1111 000000",
        nombreEquipo: "DOUGLAS HAIG"
    },
    "dou/alternativa/red": {
        codigo: "/colors red 65 000000 FF1111 FFFFFF FFFFFF",
        nombreEquipo: "DOUGLAS HAIG"
    },
    "dou/alternativa/blue": {
        codigo: "/colors blue 65 000000 FF1111 FFFFFF FFFFFF",
        nombreEquipo: "DOUGLAS HAIG"
    }
};


// ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ CÓDIGOS DE LAS BANDERAS ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇

var codigosBanderas = {
  Haxball: 'FAM',
  Afghanistan: 'AF', 
  Albania: 'AL', 
  Algeria: 'DZ', 
  Andorra: 'AD', 
  Angola: 'AO', 
  Anguilla: 'AI',
  Antarctica: 'AQ',
  AntiguaAndBarbuda: 'AG',
  Argentina: 'AR',
  Armenia: 'AM',
  Aruba: 'AW',
  Australia: 'AU',
  Austria: 'AT',
  Azerbaijan: 'AZ',
  Bahamas: 'BS',
  Bahrain: 'BH',
  Bangladesh: 'BD',
  Barbados: 'BB',
  Belarus: 'BY',
  Belgium: 'BE',
  Belize: 'BZ',
  Benin: 'BJ',
  Bermuda: 'BM',
  Bhutan: 'BT',
  Bolivia: 'BO',
  BonaireSaintEustatiusAndSaba: 'BQ',
  BosniaAndHerzegovina: 'BA',
  Botswana: 'BW',
  BouvetIsland: 'BV',
  Brazil: 'BR',
  BritishIndianOceanTerritory: 'IO',
  Brunei: 'BN',
  Bulgaria: 'BG',
  BurkinaFaso: 'BF',
  Burundi: 'BI',
  Cambodia: 'KH',
  Cameroon: 'CM',
  Canada: 'CA',
  CapeVerde: 'CV',
  CaymanIslands: 'KY',
  CentralAfricanRepublic: 'CF',
  Chad: 'TD',
  Chile: 'CL',
  China: 'CN',
  ChristmasIsland: 'CX',
  CocosKeelingIslands: 'CC',
  Colombia: 'CO',
  Comoros: 'KM',
  Congo: 'CG',
  CongoTheDemocraticRepublicOfThe: 'CD',
  CookIslands: 'CK',
  CostaRica: 'CR',
  CoteDIvoire: 'CI',
  Croatia: 'HR',
  Cuba: 'CU',
  Curacao: 'CW',
  Cyprus: 'CY',
  CzechRepublic: 'CZ',
  Denmark: 'DK',
  Djibouti: 'DJ',
  Dominica: 'DM',
  DominicanRepublic: 'DO',
  Ecuador: 'EC',
  Egypt: 'EG',
  ElSalvador: 'SV',
  EnglandUnitedKingdom: 'GB',
  EquatorialGuinea: 'GQ',
  Eritrea: 'ER',
  Estonia: 'EE',
  Ethiopia: 'ET',
  FalklandIslandsMalvinas: 'FK',
  FaroeIslands: 'FO',
  Fiji: 'FJ',
  Finland: 'FI',
  France: 'FR',
  FrenchPolynesia: 'PF',
  FrenchSouthernTerritories: 'TF',
  Gabon: 'GA',
  Gambia: 'GM',
  Georgia: 'GE',
  Germany: 'DE',
  Ghana: 'GH',
  Gibraltar: 'GI',
  GreatBritain: 'GB',
  Greece: 'GR',
  Greenland: 'GL',
  Grenada: 'GD',
  Guam: 'GU',
  Guatemala: 'GT',
  Guernsey: 'GG',
  Guinea: 'GN',
  GuineaBissau: 'GW',
  Guyana: 'GY',
  Haiti: 'HT',
  HeardIslandAndMcDonaldIslands: 'HM',
  HolySeeVaticanCityState: 'VA',
  Honduras: 'HN',
  HongKong: 'HK',
  Hungary: 'HU',
  Iceland: 'IS',
  India: 'IN',
  Indonesia: 'ID',
  Iran: 'IR',
  Iraq: 'IQ',
  Ireland: 'IE',
  IsleOfMan: 'IM',
  Israel: 'IL',
  Italy: 'IT',
  Jamaica: 'JM',
  Japan: 'JP',
  Jersey: 'JE',
  Jordan: 'JO',
  Kazakhstan: 'KZ',
  Kenya: 'KE',
  Kiribati: 'KI',
  KoreaDemocraticPeoplesRepublicOfNorthKorea: 'KP',
  KoreaRepublicOfSouthKorea: 'KR',
  Kosovo: 'XK',
  Kuwait: 'KW',
  Kyrgyzstan: 'KG',
  LaoPeoplesDemocraticRepublic: 'LA',
  Latvia: 'LV',
  Lebanon: 'LB',
  Lesotho: 'LS',
  Liberia: 'LR',
  LibyanArabJamahiriya: 'LY',
  Liechtenstein: 'LI',
  Lithuania: 'LT',
  Luxembourg: 'LU',
  Macao: 'MO',
  MacedoniaTheFormerYugoslavRepublicOf: 'MK',
  Madagascar: 'MG',
  Malawi: 'MW',
  Malaysia: 'MY',
  Maldives: 'MV',
  Mali: 'ML',
  Malta: 'MT',
  MarshallIslands: 'MH',
  Mauritania: 'MR',
  Mauritius: 'MU',
  Mexico: 'MX',
  MicronesiaFederatedStatesOf: 'FM',
  MissingData: 'U9',
  MoldovaRepublicOf: 'MD',
  Monaco: 'MC',
  Mongolia: 'MN',
  Montenegro: 'ME',
  Montserrat: 'MS',
  Morocco: 'MA',
  Mozambique: 'MZ',
  Myanmar: 'MM',
  Namibia: 'NA',
  Nauru: 'NR',
  Nepal: 'NP',
  Netherlands: 'NL',
  NetherlandsAntilles: 'AN',
  NewCaledonia: 'NC',
  NewZealand: 'NZ',
  Nicaragua: 'NI',
  Niger: 'NE',
  Nigeria: 'NG',
  Niue: 'NU',
  NorfolkIsland: 'NF',
  NorthernIrelandUnitedKingdom: 'GB',
  NorthernMarianaIslands: 'MP',
  Norway: 'NO',
  Oman: 'OM',
  Pakistan: 'PK',
  Palau: 'PW',
  PalestinianTerritoryOccupied: 'PS',
  Panama: 'PA',
  PapuaNewGuinea: 'PG',
  Paraguay: 'PY',
  Peru: 'PE',
  Philippines: 'PH',
  Pitcairn: 'PN',
  Poland: 'PL',
  Portugal: 'PT',
  PuertoRico: 'PR',
  Qatar: 'QA',
  Romania: 'RO',
  Russia: 'RU',
  Rwanda: 'RW',
  SaintLucia: 'LC',
  Samoa: 'WS',
  SanMarino: 'SM',
  SaoTomeAndPrincipe: 'ST',
  SaudiArabia: 'SA',
  ScotlandUnitedKingdom: 'GB',
  Senegal: 'SN',
  Serbia: 'RS',
  Seychelles: 'SC',
  SierraLeone: 'SL',
  Singapore: 'SG',
  SintMaartenDutchPart: 'SX',
  Slovakia: 'SK',
  Slovenia: 'SI',
  SolomonIslands: 'SB',
  Somalia: 'SO',
  SouthAfrica: 'ZA',
  SouthGeorgiaAndTheSouthSandwichIslands: 'GS',
  SouthSudan: 'SS',
  Spain: 'ES',
  SriLanka: 'LK',
  StHelena: 'SH',
  StKittsAndNevis: 'KN',
  StVincentAndTheGrenadines: 'VC',
  Sudan: 'SD',
  Suriname: 'SR',
  Swaziland: 'SZ',
  Sweden: 'SE',
  Switzerland: 'CH',
  SyrianArabRepublic: 'SY',
  Taiwan: 'TW',
  Tajikistan: 'TJ',
  Tanzania: 'TZ',
  Thailand: 'TH',
  TimorLeste: 'TL',
  Togo: 'TG',
  Tokelau: 'TK',
  Tonga: 'TO',
  TrinidadAndTobago: 'TT',
  Tunisia: 'TN',
  Turkey: 'TR',
  Turkmenistan: 'TM',
  TurksAndCaicosIslands: 'TC',
  Tuvalu: 'TV',
  Uganda: 'UG',
  Ukraine: 'UA',
  UnitedArabEmirates: 'AE',
  UnitedKingdom: 'GB',
  UnitedStates: 'US',
  UnitedStatesMinorOutlyingIslands: 'UM',
  Uruguay: 'UY',
  Uzbekistan: 'UZ',
  Vanuatu: 'VU',
  Venezuela: 'VE',
  VietNam: 'VN',
  VirginIslandsBritish: 'VG',
  VirginIslandsUS: 'VI',
  Yemen: 'YE',
  Zambia: 'ZM',
  Zimbabwe: 'ZW'
};

var countryCoords = {
    "argentina": [-34.6882652, -58.5685501], // Buenos Aires
    "haxarg": [-34.61, -58.42], // HaxARG Ubication
    "chile": [-33.45, -70.66], // Santiago
    "uruguay": [-34.90, -56.19], // Montevideo
    "brasil": [-23.55, -46.64], // São Paulo
    "peru": [-12.04, -77.03], // Lima
    "colombia": [4.61, -74.08], // Bogotá
    "venezuela": [10.49, -66.88], // Caracas
    "costa rica": [9.934739, -84.087502], // San José
    "mexico": [19.43, -99.13], // Ciudad de México
    "united states": [40.71, -74.01], // Nueva York
    "marruecos": [33.57, -7.65], // Casablanca
    "spain": [40.42, -3.70], // Madrid
    "portugal": [38.71, -9.14], // Lisboa
    "italy": [41.89, 12.49], // Milán
    "united kingdom": [51.51, -0.13], // Londres
    "germany": [52.52, 13.40], // Berlín
    "turkey": [41.01, 28.97], // Estambul
    "serbia": [44.8167494, 20.4654671], // Belgrado
    "poland": [52.2298, 21.0118], // Varsovia
    "ukraine": [50.45, 30.52], // Kiev
    "russia": [55.75, 37.62], // Moscú
    "china": [31.23, 121.47], // Shanghái
    "south korea": [37.56, 126.97], // Seúl
    "vietnam": [21.03, 105.85], // Hanói
    "france": [48.86, 2.34], // París
    "croatia": [45.8131406, 15.9772235], // Zagreb
    "macedonia": [41.61, 21.74], // Skopie
    "israel": [31.76, 35.21], // Tel Aviv (Israel)
    "canada": [45.42, -75.69], // Ottawa (Canadá)
    "bolivia": [-16.50, -68.12], // La Paz (Bolivia)
    "paraguay": [-25.27, -57.67], // Asunción (Paraguay)
    "honduras": [14.08, -87.21], // Tegucigalpa (Honduras)
    "myubication": null,

};

var VersionDelScript = "``📅 ᴠᴇʀsɪᴏ́ɴ ᴅᴇʟ sᴄʀɪᴘᴛ 25.05.11 ``"

let equipoAzulPosesion = 0;
let equipoRojoPosesion = 0;
var currentMap = MapaPorDefecto; // Define y asigna un valor a currentMap antes de llamar a sendGameInfo
// Variables globales
var posesionEquipoA = 0;
var posesionEquipoB = 0;
var ColorFondoRS = '6d945b'
var RSRMap;
var PartidoArrancado;
const afkPlayerIDs = new Set()
var mutedPlayers = []; // Array where will be added muted players
var isTimeAddedShownseis = false;
var DetenerAnuncio = false;
var DetenerAviso = false;
var ReiniciarStatsEnCero = false;
var redTeam = [0, 0, 0, 0, 0, 0];
var blueTeam = [0, 0, 0, 0, 0, 0];
const votedPlayers = new Set()
let votekickTimes = {};
let votekickCount = {};
var votekickTimeout = 60000;

var PlayerFound = false;
var ListaDeJugadores = [];
var conexion = [];

var whoTouchedLast; // var representing the last player who touched the ball

var teamRed
var teamBlue
var palabrasSilenciadas = [];
// Variables para almacenar los datos de la publicidad
let advertisingInterval;
let advertisingMessage = '';
let advertisingMinutes = 0;
let lastAdvertisingTime = 0;

var _0x24f1 = ['floor', 'getPlayerDiscProperties', '      👋 Bɪᴇɴᴠᴇɴɪᴅᴏ ᴀʟ ʜᴏsᴛ ᴅᴇ G L H      ', 'ballOutPositionY', 'court', 'blueGK', 'toFixed', 'RSR', 'onRoomLink', 'secondLastKickerTeam', 'auth', 'method', 'El administrador se encuentra presente', 'ceil', 'clearBans', 'sendAnnouncement', 'blueScore', 'secondLastKickerId', 'secondLastKicker', 'normal', '50nCLuSN', '0x00ccff', '🔥 ÚLTIMA JUGADA DEL PARTIDO 🔥 - Si la pelota sale del terreno de juego, se finalizará el partido.', 'radius', '🚫 NO puedes cambiar el fondo del mapa cuando un partido se esta jugando.', 'xgravity', '𝗖𝗢𝗠𝗔𝗡𝗗𝗢𝗦 💬 ⌨: !rs, !rr, !bb, !clearbans, !swap, t [mensaje a tu equipo], !court, !court [hexcolor], !court reset', 'setPlayerDiscProperties', 'round', '478VrIjpd', 'team', 'onGameStop', 'lastKicker', '"},"playerPhysics":{"acceleration":0.12,"kickStrength":5.65},"ballPhysics":{"radius":9,"invMass":1.05,"color":"FFFF00","cGroup":["ball","kick","score"]},"vertexes":[{"x":0,"y":660,"trait":"kickOffBarrier"},{"x":0,"y":180,"trait":"kickOffBarrier"},{"x":0,"y":-180,"trait":"kickOffBarrier"},{"x":0,"y":-660,"trait":"kickOffBarrier"},{"x":1150,"y":320,"trait":"line"},{"x":840,"y":320,"trait":"line"},{"x":1150,"y":-320,"trait":"line"},{"x":840,"y":-320,"trait":"line"},{"x":1150,"y":180,"trait":"line"},{"x":1030,"y":180,"trait":"line"},{"x":1150,"y":-180,"trait":"line"},{"x":1030,"y":-180,"trait":"line"},{"x":840,"y":-130,"trait":"line","curve":-130},{"x":840,"y":130,"trait":"line","curve":-130},{"x":-1150,"y":-320,"trait":"line"},{"x":-840,"y":-320,"trait":"line"},{"x":-1150,"y":320,"trait":"line"},{"x":-840,"y":320,"trait":"line"},{"x":-1150,"y":-175,"trait":"line"},{"x":-1030,"y":-175,"trait":"line"},{"x":-1150,"y":175,"trait":"line"},{"x":-1030,"y":175,"trait":"line"},{"x":-840,"y":130,"trait":"line","curve":-130},{"x":-840,"y":-130,"trait":"line","curve":-130},{"x":935,"y":3,"trait":"line"},{"x":935,"y":-3,"trait":"line"},{"x":-935,"y":3,"trait":"line"},{"x":-935,"y":-3,"trait":"line"},{"x":-1150,"y":570,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"x":-1120,"y":600,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"x":-1120,"y":-600,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"x":-1150,"y":-570,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"x":1120,"y":600,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"x":1150,"y":570,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"x":1150,"y":-570,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"x":1120,"y":-600,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"x":0,"y":180,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["blueKO"],"trait":"kickOffBarrier","curve":-180},{"x":0,"y":-180,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO"],"trait":"kickOffBarrier","curve":180},{"x":0,"y":180,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO"],"trait":"kickOffBarrier","curve":180},{"x":-1030,"y":-40,"bCoef":-5.7,"cMask":["ball"],"cGroup":["c0"],"trait":"line","curve":70,"color":"576C46","vis":false},{"x":-1030,"y":40,"bCoef":-5.7,"cMask":["ball"],"cGroup":["c0"],"trait":"line","curve":70,"color":"576C46","vis":false},{"x":1030,"y":-40,"bCoef":-5.7,"cMask":["ball"],"cGroup":["c0"],"trait":"line","curve":-70,"color":"576C46","vis":false},{"x":1030,"y":40,"bCoef":-5.7,"cMask":["ball"],"cGroup":["c0"],"trait":"line","curve":-70,"color":"576C46","vis":false},{"x":1030,"y":-40,"trait":"line","color":"576C46"},{"x":1030,"y":40,"trait":"line","color":"576C46"},{"x":-1030,"y":-40,"trait":"line","color":"576C46"},{"x":-1030,"y":40,"trait":"line","color":"576C46"},{"x":0,"y":3,"trait":"line"},{"x":0,"y":-3,"trait":"line"},{"x":-1157,"y":605,"bCoef":0,"cMask":["ball"],"trait":"ballArea"},{"x":-1157,"y":655,"bCoef":0,"cMask":["ball"],"trait":"ballArea"},{"x":-1157,"y":-655,"bCoef":0,"cMask":["ball"],"trait":"ballArea"},{"x":-1157,"y":-605,"bCoef":0,"cMask":["ball"],"trait":"ballArea"},{"x":1157,"y":605,"bCoef":0,"cMask":["ball"],"trait":"ballArea"},{"x":1157,"y":655,"bCoef":0,"cMask":["ball"],"trait":"ballArea"},{"x":1157,"y":-655,"bCoef":0,"cMask":["ball"],"trait":"ballArea"},{"x":1157,"y":-605,"bCoef":0,"cMask":["ball"],"trait":"ballArea"},{"x":-1300,"y":-485,"bCoef":0,"cMask":["c1"],"cGroup":["red","blue"],"color":"ec644b","vis":false},{"x":1300,"y":-485,"bCoef":0,"cMask":["c1"],"cGroup":["red","blue"],"color":"ec644b","vis":false},{"x":-1300,"y":485,"bCoef":0,"cMask":["c1"],"cGroup":["red","blue"],"color":"ec644b","vis":false},{"x":1300,"y":485,"bCoef":0,"cMask":["c1"],"cGroup":["red","blue"],"color":"ec644b","vis":false},{"x":-1295,"y":-320,"cMask":["c0"],"cGroup":["red","blue"]},{"x":-840,"y":-320,"cMask":["c0"],"cGroup":["red","blue"]},{"x":-840,"y":320,"cMask":["c0"],"cGroup":["red","blue"]},{"x":-1295,"y":320,"cMask":["c0"],"cGroup":["red","blue"]},{"x":1295,"y":-320,"cMask":["c0"],"cGroup":["red","blue"]},{"x":840,"y":-320,"cMask":["c0"],"cGroup":["red","blue"]},{"x":840,"y":320,"cMask":["c0"],"cGroup":["red","blue"]},{"x":1295,"y":320,"cMask":["c0"],"cGroup":["red","blue"]},{"x":-1150,"y":-124,"bCoef":0,"cMask":["ball"]},{"x":-1210,"y":-124,"bCoef":0,"cMask":["ball"],"bias":0,"curve":5},{"x":-1150,"y":124,"bCoef":0,"cMask":["ball"]},{"x":-1210,"y":124,"bCoef":0,"cMask":["ball"],"bias":0,"curve":5},{"x":-1250,"y":-158,"bCoef":0,"cMask":["ball"]},{"x":-1250,"y":158,"bCoef":0,"cMask":["ball"]},{"x":1150,"y":124,"bCoef":0,"cMask":["ball"]},{"x":1210,"y":124,"bCoef":0,"cMask":["ball"],"curve":-5},{"x":1150,"y":-124,"bCoef":0,"cMask":["ball"]},{"x":1210,"y":-124,"bCoef":0,"cMask":["ball"],"curve":-5},{"x":1250,"y":-158,"bCoef":0,"cMask":["ball"]},{"x":1250,"y":158,"bCoef":0,"cMask":["ball"]}],"segments":[{"v0":0,"v1":1,"trait":"kickOffBarrier"},{"v0":2,"v1":3,"trait":"kickOffBarrier"},{"v0":4,"v1":5,"trait":"line","y":320},{"v0":5,"v1":7,"trait":"line","x":840},{"v0":6,"v1":7,"trait":"line","y":-320},{"v0":8,"v1":9,"trait":"line","y":180},{"v0":9,"v1":11,"trait":"line","x":1030},{"v0":10,"v1":11,"trait":"line","y":-180},{"v0":12,"v1":13,"curve":-130,"trait":"line","x":840},{"v0":14,"v1":15,"trait":"line","y":-320},{"v0":15,"v1":17,"trait":"line","x":-840},{"v0":16,"v1":17,"trait":"line","y":320},{"v0":18,"v1":19,"trait":"line","y":-175},{"v0":19,"v1":21,"trait":"line","x":-1030},{"v0":20,"v1":21,"trait":"line","y":175},{"v0":22,"v1":23,"curve":-130,"trait":"line","x":-840},{"v0":24,"v1":25,"curve":-180,"trait":"line","x":935},{"v0":26,"v1":27,"curve":-180,"trait":"line","x":-935},{"v0":24,"v1":25,"curve":180,"trait":"line","x":935},{"v0":26,"v1":27,"curve":180,"trait":"line","x":-935},{"v0":24,"v1":25,"curve":90,"trait":"line","x":935},{"v0":26,"v1":27,"curve":90,"trait":"line","x":-935},{"v0":24,"v1":25,"curve":-90,"trait":"line","x":935},{"v0":26,"v1":27,"curve":-90,"trait":"line","x":-935},{"v0":24,"v1":25,"trait":"line","x":935},{"v0":26,"v1":27,"trait":"line","x":-935},{"v0":28,"v1":29,"curve":90,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"v0":30,"v1":31,"curve":90,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"v0":32,"v1":33,"curve":90,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"v0":34,"v1":35,"curve":90,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"v0":37,"v1":36,"curve":-180,"vis":false,"bCoef":0.1,"cGroup":["blueKO"],"trait":"kickOffBarrier"},{"v0":39,"v1":40,"curve":70,"vis":false,"color":"576C46","bCoef":-5.7,"cMask":["ball"],"cGroup":["c0"],"trait":"line","x":-1030},{"v0":41,"v1":42,"curve":-70,"vis":false,"color":"576C46","bCoef":-5.7,"cMask":["ball"],"cGroup":["c0"],"trait":"line","x":1030},{"v0":37,"v1":38,"curve":180,"vis":false,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO"],"trait":"kickOffBarrier"},{"v0":43,"v1":44,"vis":true,"color":"576C46","trait":"line","x":1030},{"v0":45,"v1":46,"vis":true,"color":"576C46","trait":"line","x":-1030},{"v0":47,"v1":48,"curve":-180,"trait":"line","x":-935},{"v0":47,"v1":48,"curve":180,"trait":"line","x":-935},{"v0":47,"v1":48,"curve":90,"trait":"line","x":-935},{"v0":47,"v1":48,"curve":-90,"trait":"line","x":-935},{"v0":47,"v1":48,"trait":"line","x":-935},{"v0":49,"v1":50,"color":"FFFF00","bCoef":0,"cMask":["ball"],"trait":"ballArea","x":-1157},{"v0":51,"v1":52,"color":"FFFF00","bCoef":0,"cMask":["ball"],"trait":"ballArea","x":-1157},{"v0":53,"v1":54,"color":"FFFF00","bCoef":0,"cMask":["ball"],"trait":"ballArea","x":1157},{"v0":55,"v1":56,"color":"FFFF00","bCoef":0,"cMask":["ball"],"trait":"ballArea","x":1157},{"v0":57,"v1":58,"vis":false,"color":"ec644b","bCoef":0,"cMask":["c1"],"cGroup":["red","blue"],"y":-485},{"v0":59,"v1":60,"vis":false,"color":"ec644b","bCoef":0,"cMask":["c1"],"cGroup":["red","blue"],"y":485},{"v0":61,"v1":62,"vis":false,"color":"ec644b","cMask":["c0"],"cGroup":["red","blue"]},{"v0":62,"v1":63,"vis":false,"color":"ec644b","cMask":["c0"],"cGroup":["red","blue"]},{"v0":63,"v1":64,"vis":false,"color":"ec644b","cMask":["c0"],"cGroup":["red","blue"]},{"v0":65,"v1":66,"vis":false,"cMask":["c0"],"cGroup":["red","blue"]},{"v0":66,"v1":67,"vis":false,"cMask":["c0"],"cGroup":["red","blue"]},{"v0":67,"v1":68,"vis":false,"cMask":["c0"],"cGroup":["red","blue"]},{"v0":69,"v1":70,"color":"FFFFFF","bCoef":0,"cMask":["ball"],"y":-124},{"v0":71,"v1":72,"color":"FFFFFF","bCoef":0,"cMask":["ball"],"y":124},{"v0":72,"v1":70,"curve":5,"color":"FFFFFF","bCoef":0,"cMask":["ball"],"bias":0},{"v0":70,"v1":73,"color":"FFFFFF","bCoef":0,"cMask":["ball"]},{"v0":72,"v1":74,"color":"FFFFFF","bCoef":0,"cMask":["ball"]},{"v0":75,"v1":76,"color":"FFFFFF","bCoef":0,"cMask":["ball"],"y":124},{"v0":77,"v1":78,"color":"FFFFFF","bCoef":0,"cMask":["ball"],"y":-124},{"v0":76,"v1":78,"curve":-5,"color":"FFFFFF","bCoef":0,"cMask":["ball"]},{"v0":78,"v1":79,"color":"FFFFFF","bCoef":0,"cMask":["ball"]},{"v0":76,"v1":80,"color":"FFFFFF","bCoef":0,"cMask":["ball"]}],"goals":[{"p0":[-1162,124],"p1":[-1162,-124],"team":"red"},{"p0":[1162,124],"p1":[1162,-124],"team":"blue","radius":0,"invMass":1}],"discs":[{"radius":0,"invMass":0,"pos":[-1311,-19],"color":"ffffffff","bCoef":0,"cMask":["red"],"cGroup":["ball"]},{"radius":0,"invMass":0,"pos":[-1310,29],"color":"ffffffff","bCoef":0,"cMask":["blue"],"cGroup":["ball"]},{"radius":0,"invMass":0,"pos":[-1308,62],"color":"ffffffff","bCoef":0,"cMask":["red","blue"],"cGroup":["ball"]},{"radius":2.7,"pos":[-1150,600],"cGroup":["ball"],"trait":"cornerflag"},{"radius":2.7,"pos":[1150,-600],"cGroup":["ball"],"trait":"cornerflag"},{"radius":2.7,"pos":[1150,600],"cGroup":["ball"],"trait":"cornerflag"},{"radius":5,"invMass":0,"pos":[-1150,-124],"bCoef":0.5,"trait":"goalPost"},{"radius":5,"invMass":0,"pos":[-1150,124],"bCoef":0.5,"trait":"goalPost"},{"radius":2,"invMass":0,"pos":[-1250,-158],"color":"000000","bCoef":1,"trait":"goalPost"},{"radius":2,"invMass":0,"pos":[-1250,158],"color":"000000","bCoef":1,"trait":"goalPost"},{"radius":5,"invMass":0,"pos":[1150,-124],"bCoef":0.5,"trait":"goalPost"},{"radius":5,"invMass":0,"pos":[1150,124],"bCoef":0.5,"trait":"goalPost"},{"radius":2,"invMass":0,"pos":[1250,-158],"color":"000000","bCoef":1,"trait":"goalPost"},{"radius":2,"invMass":0,"pos":[1250,158],"color":"000000","bCoef":1,"trait":"goalPost"},{"radius":2.7,"pos":[-1150,-600],"cGroup":["ball"],"trait":"cornerflag"},{"radius":0,"pos":[-1149,-485],"cMask":["none"]},{"radius":0,"pos":[1149,-485],"cMask":["none"]},{"radius":0,"pos":[-1149,-485],"cMask":["none"]},{"radius":0,"pos":[1149,-485],"cMask":["none"]},{"radius":0,"pos":[-1149,485],"cMask":["none"]},{"radius":0,"pos":[1149,485],"cMask":["none"]},{"radius":0,"pos":[-1149,485],"cMask":["none"]},{"radius":0,"pos":[1149,485],"cMask":["none"]},{"pos":[-6.5,-3],"radius":0.8,"invMass":1e+250,"color":"0","cGroup":["c0"]},{"radius":1.4,"invMass":1e+250,"color":"0","cGroup":["c0"]},{"pos":[6.5,-3],"radius":0.8,"invMass":1e+250,"color":"0","cGroup":["c0"]},{"pos":[0,-6.5],"radius":0.8,"invMass":1e+250,"color":"0","cGroup":["c0"]},{"pos":[-4.5,5.5],"radius":0.8,"invMass":1e+250,"color":"0","cGroup":["c0"]},{"pos":[4.5,5.5],"radius":0.8,"invMass":1e+250,"color":"0","cGroup":["c0"]},{"radius":0.8,"invMass":1e+250,"color":"transparent","cGroup":["c0"]}],"planes":[{"normal":[0,1],"dist":-627,"bCoef":0,"cGroup":["ball"],"trait":"ballArea","_data":{"extremes":{"normal":[0,1],"dist":-627,"canvas_rect":[-1311,-660,1300,660],"a":[-1311,-627],"b":[1300,-627]}}},{"normal":[0,-1],"dist":-627,"bCoef":0,"cGroup":["ball"],"trait":"ballArea","_data":{"extremes":{"normal":[0,-1],"dist":-627,"canvas_rect":[-1311,-660,1300,660],"a":[-1311,627],"b":[1300,627]}}},{"normal":[0,1],"dist":-660,"bCoef":0,"_data":{"extremes":{"normal":[0,1],"dist":-660,"canvas_rect":[-1311,-660,1300,660],"a":[-1311,-660],"b":[1300,-660]}}},{"normal":[0,-1],"dist":-660,"bCoef":0,"_data":{"extremes":{"normal":[0,-1],"dist":-660,"canvas_rect":[-1311,-660,1300,660],"a":[-1311,660],"b":[1300,660]}}},{"normal":[1,0],"dist":-1300,"bCoef":0,"_data":{"extremes":{"normal":[1,0],"dist":-1300,"canvas_rect":[-1311,-660,1300,660],"a":[-1300,-660],"b":[-1300,660]}}},{"normal":[-1,0],"dist":-1300,"bCoef":0.1,"_data":{"extremes":{"normal":[-1,0],"dist":-1300,"canvas_rect":[-1311,-660,1300,660],"a":[1300,-660],"b":[1300,660]}}},{"normal":[1,0],"dist":-1230,"bCoef":0,"cMask":["ball"],"cGroup":["ball"],"_data":{"extremes":{"normal":[1,0],"dist":-1230,"canvas_rect":[-1311,-660,1300,660],"a":[-1230,-660],"b":[-1230,660]}}},{"normal":[-1,0],"dist":-1230,"bCoef":0,"cMask":["ball"],"cGroup":["ball"],"_data":{"extremes":{"normal":[-1,0],"dist":-1230,"canvas_rect":[-1311,-660,1300,660],"a":[1230,-660],"b":[1230,660]}}}],"traits":{"ballArea":{"vis":false,"bCoef":0,"cMask":["ball"],"cGroup":["ball"]},"goalPost":{"radius":5,"invMass":0,"bCoef":1,"cGroup":["ball"]},"rightNet":{"radius":0,"invMass":1,"bCoef":0,"cGroup":["ball","c3"]},"leftNet":{"radius":0,"invMass":1,"bCoef":0,"cGroup":["ball","c2"]},"stanchion":{"radius":3,"invMass":0,"bCoef":3,"cMask":["none"]},"cornerflag":{"radius":3,"invMass":0,"bCoef":0.2,"color":"FFFF00","cMask":["ball"]},"reargoalNetleft":{"vis":true,"bCoef":0.1,"cMask":["ball","red","blue"],"curve":10,"color":"C7E6BD"},"reargoalNetright":{"vis":true,"bCoef":0.1,"cMask":["ball","red","blue"],"curve":-10,"color":"C7E6BD"},"sidegoalNet":{"vis":true,"bCoef":1,"cMask":["ball","red","blue"],"color":"C7E6BD"},"kickOffBarrier":{"vis":false,"bCoef":0.1,"cGroup":["redKO","blueKO"],"cMask":["red","blue"]},"line":{"vis":true,"cMask":[],"color":"C7E6BD"}},"joints":[{"d0":16,"d1":17,"strength":"rigid","color":"678859","length":null},{"d0":18,"d1":19,"strength":"rigid","color":"678859","length":null},{"d0":20,"d1":21,"strength":"rigid","color":"678859","length":null},{"d0":22,"d1":23,"strength":"rigid","color":"678859","length":null},{"d0":0,"d1":25,"length":0,"color":"transparent"},{"d0":0,"d1":24,"length":7.158910531638177,"color":"transparent"},{"d0":0,"d1":26,"length":7.158910531638177,"color":"transparent"},{"d0":0,"d1":27,"length":6.5,"color":"transparent"},{"d0":0,"d1":28,"length":7.106335201775948,"color":"transparent"},{"d0":0,"d1":29,"length":7.106335201775948,"color":"transparent"},{"d0":24,"d1":25,"length":7.158910531638177,"color":"transparent"},{"d0":25,"d1":26,"length":7.158910531638177,"color":"transparent"},{"d0":25,"d1":27,"length":6.5,"color":"transparent"},{"d0":25,"d1":28,"length":7.106335201775948,"color":"transparent"},{"d0":25,"d1":29,"length":7.106335201775948,"color":"transparent"},{"d0":24,"d1":27,"length":7.3824115301167,"color":"transparent"},{"d0":24,"d1":28,"length":8.73212459828649,"color":"transparent"},{"d0":28,"d1":29,"length":9,"color":"transparent"},{"d0":26,"d1":29,"length":8.73212459828649,"color":"transparent"},{"d0":26,"d1":27,"length":7.3824115301167,"color":"transparent"},{"d0":26,"d1":28,"length":13.901438774457844,"color":"transparent"},{"d0":27,"d1":28,"length":12.816005617976296,"color":"transparent"},{"d0":27,"d1":29,"length":12.816005617976296,"color":"transparent"},{"d0":24,"d1":29,"length":13.901438774457844,"color":"transparent"},{"d0":24,"d1":26,"length":13,"color":"transparent"},{"d0":0,"d1":25,"length":0,"color":"transparent"},{"d0":0,"d1":24,"length":7.158910531638177,"color":"transparent"},{"d0":0,"d1":26,"length":7.158910531638177,"color":"transparent"},{"d0":0,"d1":27,"length":6.5,"color":"transparent"},{"d0":0,"d1":28,"length":7.106335201775948,"color":"transparent"},{"d0":0,"d1":29,"length":7.106335201775948,"color":"transparent"},{"d0":24,"d1":25,"length":7.158910531638177,"color":"transparent"},{"d0":25,"d1":26,"length":7.158910531638177,"color":"transparent"},{"d0":25,"d1":27,"length":6.5,"color":"transparent"},{"d0":25,"d1":28,"length":7.106335201775948,"color":"transparent"},{"d0":25,"d1":29,"length":7.106335201775948,"color":"transparent"},{"d0":24,"d1":27,"length":7.3824115301167,"color":"transparent"},{"d0":24,"d1":28,"length":8.73212459828649,"color":"transparent"},{"d0":28,"d1":29,"length":9,"color":"transparent"},{"d0":26,"d1":29,"length":8.73212459828649,"color":"transparent"},{"d0":26,"d1":27,"length":7.3824115301167,"color":"transparent"},{"d0":26,"d1":28,"length":13.901438774457844,"color":"transparent"},{"d0":27,"d1":28,"length":12.816005617976296,"color":"transparent"},{"d0":27,"d1":29,"length":12.816005617976296,"color":"transparent"},{"d0":0,"d1":30,"length":0,"color":"transparent"},{"d0":25,"d1":30,"length":0,"color":"transparent"}],"redSpawnPoints":[],"blueSpawnPoints":[],"canBeStored":false}', 'onPlayerLeave', 'setCustomStadium', 'extraTimeAnnounced', 'onPlayerJoin', 'application/json', '                                        ▒█▀▀█ ▒█░░░ ▒█░▒█', '⏱ FINAL DEL PARTIDO | Si empataron selecciona penales con: !pensred (para que pateen los rojos🔴) y !pensblue (para que pateen los azules🔵)', 'rsCorner', 'yspeed', 'kickPlayer', 'log', '                                        ▒█░▄▄ ▒█░░░ ▒█▀▀█', 'onPlayerTeamChange', 'lat', 'pauseGame', 'blueCK', '505050', 'boosterCount', 'invMass', 'warningCount', '811oRJfWz', 'stringify', 'ballRadius', 'extraTime', '0xff223c', 'getPlayerList', 'admin', 'rsSwingTimer', 'cGroup', ' 🟦 ⚊ 🕒 ', '✅ 🧹 Lᴏs ʙᴀɴs ғᴜᴇʀᴏɴ ʀᴇᴍᴏᴠɪᴅᴏs ᴘᴏʀ ', 'swap', 'ballOutPositionX', '{"name":"🗦⚽🗧𝚁𝙴𝙰𝙻 𝚂𝙾𝙲𝙲𝙴𝚁 🙼  ᴿ ᴱ ⱽ ᴼ ᴸ ᵁ ᵀ ᴵ ᴼ ᴺ  🙼","width":1300,"height":660,"spawnDistance":560,"bg":{"type":"grass","width":1150,"height":600,"kickOffRadius":180,"cornerRadius":0,"color":"', '👋 Hasta pronto! ', 'extraTimeCount', '2vpbxKS', '      ℹ Escribe !help para ver los comandos ⌨     ', 'secondLastKickerName', 'ticks', 'rsTimer', '] - [', 'help', 'substr', '🔥 ⚽ 𝙂𝙊𝙇! ', 'throwInPosY', '463eHQvaF', 'roomName', ColorFondoRS, 'clearbans', 'setPlayerAvatar', '🔐La clave ha sido cambiada por: ', 'redScore', 'name', 'Real Soccer Revolution', 'No hay admin, escribe el comando para ser administrador.', 'code', 'rsGoalKick', 'setpassword', '🏟🌈 El color del fondo del mapa actual es: ', NombreHost, 'noPlayer', 'clearpassword', 'time', 'lastKickerTeam', '🔐 Comando habilitado sólo para Admistradores ⚙️👤', 'cMask', 'rsReady', 'onPositionsReset', ' 🟥 ', 'getScores', '1823YwCEsH', 'then', 'POST', ' - ', 'username', 'bringThrowBack', 'outStatus', 'normal', 'xspeed', 'length', 'replace', 'position', '145825HWBoCM', '🔗 𝗗𝗶𝘀𝗰𝗼𝗿𝗱 𝗥𝗦𝗜: https://discord.gg/BZkDuSV', 'getDiscProperties', 'color', 'geo', ' (👟 Asistencia: ', 'boosterState', '134249tMXEkv', '🔄 Se han intercambiado los equipos', 'stopGame', 'rsActive', 'redCK', '84221WxdGJY', 'startsWith', 'lastPlayAnnounced', 'split', 'redThrow', 'setPlayerTeam', 'getBallPosition', 'extraTimeEnd', 'sqrt', '❌⚽ GOL EN CONTRA! ', 'setDiscProperties', 'onGameStart', '** Ha quitado la contraseña 🗝🔓 ', 'ygravity', '👟', 'forEach', 'redGK', 'onGameTick', 'paused', 'pushedOut', '107sAuBDh', 'public', ' 🗝🔓 La contraseña fue eliminada por ', 'reset', 'throwinKicked', '                                        ▒█▄▄█ ▒█▄▄█ ▒█░▒█', 'trim', 'lon', '0xFFFF00', 'setTimeLimit', '274921JuGtNr', 'rsTouchTeam', '🌐 𝐖𝐞𝐛 𝐆𝐋𝐇: https://grandesligashaxball.wixsite.com/grandesligashaxball/', 'blueThrow', 'token', 'onTeamGoal', 'timeLimit', 'startGame', 'content', 'body', 'setPassword', 'Content-Type', 'updateLastKicker', 'substring', 'custom', 'https://discord.com/api/webhooks/816061374504763402/Us5kMMIjcwUHylZ7-SBGnH2wkODNDHi24wvPk85wj6XecLB754wIHe-iEM776Sfk9_-Y', 'filter', ' Segundos', 'lastKickerId', 'onStadiumChange', ' by ', 'lastKickerName', 'headers', 'find', 'conn', 'maxPlayers'];
var _0x2ffa = function (_0x2ee94c, _0x596748) {
	_0x2ee94c = _0x2ee94c - 0x11f;
	var _0x24f126 = _0x24f1[_0x2ee94c];
	return _0x24f126;
};
var _0x3c81f9 = _0x2ffa;
(function (_0x35acd1, _0x5111e2) {
	var _0x22a73d = _0x2ffa;
	while (!![]) {
		try {
			var _0x4b7342 = parseInt(_0x22a73d(0x186)) * parseInt(_0x22a73d(0x150)) + -parseInt(_0x22a73d(0x140)) * parseInt(_0x22a73d(0x1d7)) + parseInt(_0x22a73d(0x173)) * parseInt(_0x22a73d(0x19f)) + -parseInt(_0x22a73d(0x1a9)) + -parseInt(_0x22a73d(0x17f)) + parseInt(_0x22a73d(0x15a)) * parseInt(_0x22a73d(0x127)) + -parseInt(_0x22a73d(0x18b));
			if (_0x4b7342 === _0x5111e2) break;
			else _0x35acd1['push'](_0x35acd1['shift']());
		} catch (_0x1c7a16) {
			_0x35acd1['push'](_0x35acd1['shift']());
		}
	}
}(_0x24f1, 0x2205c));
var throwTimeOut = 0x1a4,
	gkTimeOut = 0x258,
	ckTimeOut = 0x258,
	throwinDistance = 0x10e,
	mapBGColor = _0x3c81f9(0x15c),
	superAdminCode = _0x3c81f9(0x13c);

var allowPublicAdmin = true; // if true then !admin command is enabled



function obtenerDiscos() {
    let discos = [];

    if (TipoPelotaFutsal === "oveja") {
        discos = [
            {"pos":[-5,-1],"radius":0.7,"invMass":1e+300,"color":"0","cMask":[],"cGroup":[]},
            {"pos":[5,-1],"radius":0.7,"invMass":1e+300,"color":"0","cMask":[],"cGroup":[]},
            {"pos":[0,-5],"radius":0.7,"invMass":1e+300,"color":"0","cMask":[],"cGroup":[]},
            {"pos":[-3,4],"radius":0.7,"invMass":1e+300,"color":"0","cMask":[],"cGroup":[]},
            {"pos":[3,4],"radius":0.7,"invMass":1e+300,"color":"0","cMask":[],"cGroup":[]},
            {"radius":1.7,"invMass":1e+300,"color":"0","cMask":[],"cGroup":[]}
        ];
    } else if (TipoPelotaFutsal === "bazinga") {
        discos = [
            {"pos":[-5,-1],"radius":0.01,"invMass":1e+300,"color":"0","cMask":[],"cGroup":[]},
            {"pos":[5,-1],"radius":0.01,"invMass":1e+300,"color":"0","cMask":[],"cGroup":[]},
            {"pos":[0,-5],"radius":0.01,"invMass":1e+300,"color":"0","cMask":[],"cGroup":[]},
            {"pos":[-3,4],"radius":0.01,"invMass":1e+300,"color":"0","cMask":[],"cGroup":[]},
            {"pos":[3,4],"radius":0.01,"invMass":1e+300,"color":"0","cMask":[],"cGroup":[]},
            {"radius":0.01,"invMass":1e+300,"color":"0","cMask":[],"cGroup":[]}
        ];
    } else if (TipoPelotaFutsal === "glh") {
        discos = [
            {"pos":[-5,-1],"radius":0.4,"invMass":1e+300,"color":"0","cMask":[],"cGroup":[]},
            {"pos":[5,-1],"radius":0.4,"invMass":1e+300,"color":"0","cMask":[],"cGroup":[]},
            {"pos":[0,-5],"radius":0.4,"invMass":1e+300,"color":"0","cMask":[],"cGroup":[]},
            {"pos":[-3,4],"radius":0.4,"invMass":1e+300,"color":"0","cMask":[],"cGroup":[]},
            {"pos":[3,4],"radius":0.4,"invMass":1e+300,"color":"0","cMask":[],"cGroup":[]},
            {"radius":0.45,"invMass":1e+300,"color":"0","cMask":[],"cGroup":[]}
        ];
    }

    return discos;
}

/*-------------------------------- STADIUMS ---------------------------------*/






function getPremiosMap() {
	var PremiosMap = `{

	"name" : "🌟 ɢᴀʟᴀ ᴅᴇ ᴘʀᴇᴍɪᴀᴄɪᴏɴᴇs 🎖️",

	"width" : 500,

	"height" : 300,

	"redSpawnPoints" : [
		[ -206, 47
		],
		[ -147, 47
		],
		[ -88, 47
		],
		[ -32, 47
		],
		[ 82, 47
		],
		[ 139, 47
		],
		[ 198, 47
		],
		[ 256, 47
		],
		[ -206, 130
		],
		[ -147, 130
		],
		[ -89, 130
		],
		[ -32, 130
		],
		[ 82, 130
		],
		[ 139, 130
		],
		[ 198, 130
		],
		[ 256, 130
		],
		[ -206, 202
		],
		[ -147, 202
		],
		[ -89, 202
		],
		[ -32, 202
		],
		[ 82, 202
		],
		[ 139, 202
		],
		[ 198, 202
		],
		[ 256, 202
		],
		[ -206, 263
		],
		[ -147, 263
		],
		[ -88, 263
		],
		[ -32, 263
		]

	],

	"blueSpawnPoints" : [
		[ -121, -125
		],
		[ -331, -75
		],
		[ 393, -75
		],
		[ -275, -75
		],
		[ 336, -75
		]

	],

	"bg" : { "type" : "none", "width" : 368, "height" : 171, "kickOffRadius" : 50, "cornerRadius" : 0, "color" : "51443f" },

	"vertexes" : [
		/* 0 */ { "x" : -224.5, "y" : 61.5, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 1 */ { "x" : -189.5, "y" : 61.5, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 2 */ { "x" : -226.16666666666666, "y" : 61.83333333333333, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 3 */ { "x" : -187.5, "y" : 62.16666666666666, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 4 */ { "x" : -166, "y" : 61.33333333333334, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 5 */ { "x" : -131, "y" : 61.33333333333334, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 6 */ { "x" : -167.66666666666666, "y" : 61.66666666666667, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 7 */ { "x" : -129, "y" : 62, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 8 */ { "x" : -108.83333333333333, "y" : 61.16666666666666, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 9 */ { "x" : -73.83333333333333, "y" : 61.16666666666666, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 10 */ { "x" : -110.49999999999999, "y" : 61.499999999999986, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 11 */ { "x" : -71.83333333333333, "y" : 61.833333333333314, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 12 */ { "x" : -50.333333333333336, "y" : 61, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 13 */ { "x" : -15.333333333333332, "y" : 61, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 14 */ { "x" : -51.99999999999999, "y" : 61.33333333333333, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 15 */ { "x" : -13.333333333333332, "y" : 61.66666666666666, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 16 */ { "x" : 63.5, "y" : 59.5, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 17 */ { "x" : 98.5, "y" : 59.5, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 18 */ { "x" : 61.83333333333334, "y" : 59.83333333333333, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 19 */ { "x" : 100.5, "y" : 60.16666666666666, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 20 */ { "x" : 122, "y" : 59.33333333333334, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 21 */ { "x" : 157, "y" : 59.33333333333334, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 22 */ { "x" : 120.33333333333334, "y" : 59.66666666666667, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 23 */ { "x" : 159, "y" : 60, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 24 */ { "x" : 179.16666666666669, "y" : 59.16666666666666, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 25 */ { "x" : 214.16666666666669, "y" : 59.16666666666666, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 26 */ { "x" : 177.5, "y" : 59.499999999999986, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 27 */ { "x" : 216.16666666666669, "y" : 59.833333333333314, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 28 */ { "x" : 237.66666666666666, "y" : 59, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 29 */ { "x" : 272.6666666666667, "y" : 59, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 30 */ { "x" : 236, "y" : 59.33333333333333, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 31 */ { "x" : 274.6666666666667, "y" : 59.66666666666666, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 32 */ { "x" : 64, "y" : 140, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 33 */ { "x" : 99, "y" : 140, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 34 */ { "x" : 62.33333333333334, "y" : 140.33333333333331, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 35 */ { "x" : 101, "y" : 140.66666666666666, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 36 */ { "x" : 122.5, "y" : 139.83333333333334, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 37 */ { "x" : 157.5, "y" : 139.83333333333334, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 38 */ { "x" : 120.83333333333334, "y" : 140.16666666666669, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 39 */ { "x" : 159.5, "y" : 140.5, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 40 */ { "x" : 179.66666666666669, "y" : 139.66666666666666, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 41 */ { "x" : 214.66666666666669, "y" : 139.66666666666666, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 42 */ { "x" : 178, "y" : 140, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 43 */ { "x" : 216.66666666666669, "y" : 140.33333333333331, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 44 */ { "x" : 238.16666666666666, "y" : 139.5, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 45 */ { "x" : 273.1666666666667, "y" : 139.5, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 46 */ { "x" : 236.5, "y" : 139.83333333333331, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 47 */ { "x" : 275.1666666666667, "y" : 140.16666666666666, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		
		/* 48 */ { "x" : -242, "y" : -50, "bCoef" : 0.2, "cMask" : ["red","blue" ], "color" : "5C3824" },
		/* 49 */ { "x" : 300, "y" : -50, "bCoef" : 0.2, "cMask" : ["all" ], "color" : "5C3824" },
		/* 50 */ { "x" : -242, "y" : -47.66666666666667, "bCoef" : 0.2, "cMask" : ["red","blue" ], "color" : "8F5738" },
		/* 51 */ { "x" : 300, "y" : -47.66666666666667, "bCoef" : 0.2, "cMask" : ["all" ], "color" : "8F5738" },
		/* 52 */ { "x" : -1000, "y" : -46, "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "A6A619" },
		/* 53 */ { "x" : -241, "y" : -46, "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "A6A619" },
		/* 54 */ { "x" : -1000, "y" : -43.66666666666667, "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "D1D11F" },
		/* 55 */ { "x" : -241, "y" : -43.66666666666667, "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "D1D11F" },
		/* 56 */ { "x" : 1000, "y" : -50, "bCoef" : 0.2, "cMask" : ["red","blue" ], "color" : "5C3824" },
		/* 57 */ { "x" : 1000, "y" : -47.66666666666667, "bCoef" : 0.2, "cMask" : ["red","blue" ], "color" : "8F5738" },
		/* 58 */ { "x" : 300, "y" : -46, "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "A6A619" },
		/* 59 */ { "x" : 1000, "y" : -46, "bCoef" : 0.2, "cMask" : ["red","blue" ], "color" : "A6A619" },
		/* 60 */ { "x" : 300, "y" : -43.66666666666667, "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "D1D11F" },
		/* 61 */ { "x" : 1000, "y" : -43.66666666666667, "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "D1D11F" },
		/* 62 */ { "x" : 1000, "y" : -45.5, "bCoef" : 0.2, "cMask" : ["red","blue" ], "color" : "5C3824" },
		/* 63 */ { "x" : 1000, "y" : -43.16666666666667, "bCoef" : 0.2, "cMask" : ["red","blue" ], "color" : "8F5738" },
		/* 64 */ { "x" : 303.5, "y" : -41.5, "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "A6A619" },
		/* 65 */ { "x" : 1000, "y" : -41.5, "bCoef" : 0.2, "cMask" : ["red","blue" ], "color" : "A6A619" },
		/* 66 */ { "x" : 303.5, "y" : -39.16666666666667, "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "D1D11F" },
		/* 67 */ { "x" : 1000, "y" : -39.16666666666667, "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "D1D11F" },
		/* 68 */ { "x" : 1000, "y" : -40.5, "bCoef" : 0.2, "cMask" : ["red","blue" ], "color" : "5C3824" },
		/* 69 */ { "x" : 1000, "y" : -38.16666666666667, "bCoef" : 0.2, "cMask" : ["red","blue" ], "color" : "8F5738" },
		/* 70 */ { "x" : 1000, "y" : -34.16666666666667, "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "D1D11F" },
		/* 71 */ { "x" : -242, "y" : -52.8, "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "7A0B0B" },
		/* 72 */ { "x" : 300, "y" : -52.8, "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "7A0B0B" },
		
		/* 73 */ { "x" : -120, "y" : -52.8, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "292929" },
		/* 74 */ { "x" : -120, "y" : -100, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "292929" },
		/* 75 */ { "x" : -67, "y" : -100, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		/* 76 */ { "x" : -67, "y" : -52.8, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		/* 77 */ { "x" : -100, "y" : -100.66666666666667, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "D4D4D4" },
		/* 78 */ { "x" : -95, "y" : -114.66666666666667, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "D4D4D4" },
		/* 79 */ { "x" : -90, "y" : -100.66666666666667, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "D4D4D4" },
		/* 80 */ { "x" : 51.83333333333334, "y" : -53.3, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -30, "color" : "292929" },
		/* 81 */ { "x" : 51.83333333333334, "y" : -100, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -30, "color" : "292929" },
		/* 82 */ { "x" : 117.33333333333334, "y" : -100, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -30 },
		/* 83 */ { "x" : 117.33333333333334, "y" : -52.8, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -30 },
		/* 84 */ { "x" : 62.16666666666667, "y" : -99.66666666666667, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "D4D4D4" },
		/* 85 */ { "x" : 67.16666666666667, "y" : -113.66666666666667, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "D4D4D4" },
		/* 86 */ { "x" : 72.16666666666667, "y" : -99.66666666666667, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "D4D4D4" },
		/* 87 */ { "x" : 71.96808055783823, "y" : -59.40878679783998, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "FEC83C" },
		/* 88 */ { "x" : 76.34148676363853, "y" : -71.90423310012652, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "FEC83C" },
		/* 89 */ { "x" : 65.72035740669497, "y" : -81.27581782684139, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "FEC83C" },
		/* 90 */ { "x" : 80.09012065432448, "y" : -81.27581782684139, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "FEC83C" },
		/* 91 */ { "x" : 84.46352686012476, "y" : -93.77126412912794, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "FEC83C" },
		/* 92 */ { "x" : 88.83693306592504, "y" : -81.27581782684139, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "FEC83C" },
		/* 93 */ { "x" : 103.20669631355456, "y" : -81.27581782684139, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "FEC83C" },
		/* 94 */ { "x" : 92.585566956611, "y" : -71.90423310012652, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "FEC83C" },
		/* 95 */ { "x" : 96.95897316241128, "y" : -59.40878679783998, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "FEC83C" },
		/* 96 */ { "x" : 84.46352686012476, "y" : -68.78037152455488, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "FEC83C" },
		/* 97 */ { "x" : -86.13703320742341, "y" : -116.66084959237983, "bCoef" : 1, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "trait" : "line" },
		/* 98 */ { "x" : -86.13703320742341, "y" : -102.0964097434717, "bCoef" : 1, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "trait" : "line" },
		/* 99 */ { "x" : -61.862966792576586, "y" : -102.0964097434717, "bCoef" : 1, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "trait" : "line" },
		/* 100 */ { "x" : -61.862966792576586, "y" : -116.66084959237983, "bCoef" : 1, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "trait" : "line" },
		/* 101 */ { "x" : -74, "y" : -106.95122302644108, "bCoef" : 1, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "trait" : "line" },
		/* 102 */ { "x" : -74.08971147925712, "y" : -115.2889203852038, "bCoef" : 1, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "trait" : "line", "curve" : -180 },
		/* 103 */ { "x" : -74.08971147925712, "y" : -109.90623162977636, "bCoef" : 1, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "trait" : "line", "curve" : -180 },
		/* 104 */ { "x" : -74.08971147925712, "y" : -115.2889203852038, "bCoef" : 1, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "trait" : "line", "curve" : 180 },
		/* 105 */ { "x" : -74.08971147925712, "y" : -109.90623162977636, "bCoef" : 1, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "trait" : "line", "curve" : 180 },
		/* 106 */ { "x" : 88.33333333333333, "y" : -101.66666666666667, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		/* 107 */ { "x" : 91.33333333333333, "y" : -107.33333333333333, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "D92323" },
		/* 108 */ { "x" : 111, "y" : -106.66666666666666, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "D92323" },
		/* 109 */ { "x" : 114.66666666666667, "y" : -101.33333333333333, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		/* 110 */ { "x" : 116, "y" : -113, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		/* 111 */ { "x" : 86, "y" : -113, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		/* 112 */ { "x" : 116, "y" : -113, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "911717" },
		/* 113 */ { "x" : 86, "y" : -113, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "911717" },
		/* 114 */ { "x" : 94.19352169927113, "y" : -112.03852397514932, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		/* 115 */ { "x" : 97.20544760874235, "y" : -117.05840049093467, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		/* 116 */ { "x" : 104.23327473084184, "y" : -117.05840049093467, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		/* 117 */ { "x" : 106.74321298873453, "y" : -112.03852397514932, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		/* 118 */ { "x" : 93.23397862552042, "y" : -117.67709682008017, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "FEC83C" },
		/* 119 */ { "x" : 95.81530409297012, "y" : -125.05231244136505, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "FEC83C" },
		/* 120 */ { "x" : 89.54637081487797, "y" : -130.58372415732867, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "FEC83C" },
		/* 121 */ { "x" : 98.02786877935559, "y" : -130.58372415732867, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "FEC83C" },
		/* 122 */ { "x" : 100.60919424680529, "y" : -137.95893977861357, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "FEC83C" },
		/* 123 */ { "x" : 103.190519714255, "y" : -130.58372415732867, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "FEC83C" },
		/* 124 */ { "x" : 111.67201767873262, "y" : -130.58372415732867, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "FEC83C" },
		/* 125 */ { "x" : 105.40308440064047, "y" : -125.05231244136505, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "FEC83C" },
		/* 126 */ { "x" : 107.98440986809017, "y" : -117.67709682008017, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "FEC83C" },
		/* 127 */ { "x" : 100.60919424680529, "y" : -123.20850853604382, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "FEC83C" },
		/* 128 */ { "x" : 100.62717983328598, "y" : -117.05840049093467, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		/* 129 */ { "x" : 100.75925602846796, "y" : -122.17538599981056, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		/* 130 */ { "x" : -204.55878787878788, "y" : -54.666666666666664, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		/* 131 */ { "x" : -208.4448484848485, "y" : -64.33333333333334, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		/* 132 */ { "x" : -214.55151515151516, "y" : -54.666666666666664, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		/* 133 */ { "x" : -210.3878787878788, "y" : -73, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		/* 134 */ { "x" : -208.4448484848485, "y" : -64.33333333333334, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180 },
		/* 135 */ { "x" : -210.3878787878788, "y" : -73, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180 },
		/* 136 */ { "x" : -208.4426825275565, "y" : -66.04321728691477, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "FFFFFF" },
		/* 137 */ { "x" : -209.88945869256796, "y" : -72.49639855942377, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "FFFFFF" },
		
		/* 138 */ { "x" : -203.72606060606057, "y" : -71.66666666666669, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "C2C2C2" },
		/* 139 */ { "x" : -195.67636363636362, "y" : -76.00000000000003, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "C2C2C2" },
		/* 140 */ { "x" : -205.72606060606057, "y" : -74.66666666666669, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "C2C2C2" },
		/* 141 */ { "x" : -202.00969696969693, "y" : -83.00000000000003, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "C2C2C2" },
		/* 142 */ { "x" : -202.05939393939389, "y" : -67.33333333333337, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "C2C2C2" },
		/* 143 */ { "x" : -193.6763636363636, "y" : -66.66666666666671, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "C2C2C2" },
		
		/* 144 */ { "x" : 277.3545454545455, "y" : -54.666666666666664, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		/* 145 */ { "x" : 280.5929292929293, "y" : -64.33333333333334, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		/* 146 */ { "x" : 285.6818181818182, "y" : -54.666666666666664, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		/* 147 */ { "x" : 282.2121212121212, "y" : -73, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		/* 148 */ { "x" : 280.5929292929293, "y" : -64.33333333333334, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180 },
		/* 149 */ { "x" : 282.2121212121212, "y" : -73, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180 },
		/* 150 */ { "x" : 280.5911243285193, "y" : -66.04321728691477, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "FFFFFF" },
		/* 151 */ { "x" : 281.7967711326955, "y" : -72.49639855942377, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "FFFFFF" },
		
		/* 152 */ { "x" : 276.660606060606, "y" : -71.66666666666669, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "C2C2C2" },
		/* 153 */ { "x" : 268.9525252525252, "y" : -74.33333333333336, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "C2C2C2" },
		/* 154 */ { "x" : 278.32727272727266, "y" : -74.66666666666669, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "C2C2C2" },
		/* 155 */ { "x" : 273.8969696969696, "y" : -80.66666666666669, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "C2C2C2" },
		/* 156 */ { "x" : 274.5494949494949, "y" : -66.33333333333334, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "C2C2C2" },
		/* 157 */ { "x" : 267.5080808080808, "y" : -64.00000000000004, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "C2C2C2" },
		/* 158 */ { "x" : -1000, "y" : -41.5, "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "A6A619" },
		/* 159 */ { "x" : -243.5, "y" : -41.5, "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "A6A619" },
		/* 160 */ { "x" : -1000, "y" : -39.16666666666667, "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "D1D11F" },
		/* 161 */ { "x" : -243.5, "y" : -39.16666666666667, "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "D1D11F" },
		/* 162 */ { "x" : -1000, "y" : -34.66666666666667, "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "color" : "D1D11F" },
		
		/* 163 */ { "x" : -99.1, "y" : -115, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "080808" },
		/* 164 */ { "x" : -91.1, "y" : -115, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "080808" },
		/* 165 */ { "x" : 63.1, "y" : -115, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "080808" },
		/* 166 */ { "x" : 71.1, "y" : -115, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "color" : "080808" },
		/* 167 */ { "x" : -224, "y" : 142, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 168 */ { "x" : -189, "y" : 142, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 169 */ { "x" : -225.66666666666666, "y" : 142.33333333333331, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 170 */ { "x" : -187, "y" : 142.66666666666666, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 171 */ { "x" : -165.5, "y" : 141.83333333333334, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 172 */ { "x" : -130.5, "y" : 141.83333333333334, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 173 */ { "x" : -167.16666666666666, "y" : 142.16666666666669, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 174 */ { "x" : -128.5, "y" : 142.5, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 175 */ { "x" : -108.33333333333333, "y" : 141.66666666666666, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 176 */ { "x" : -73.33333333333333, "y" : 141.66666666666666, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 177 */ { "x" : -109.99999999999999, "y" : 142, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 178 */ { "x" : -71.33333333333333, "y" : 142.33333333333331, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 179 */ { "x" : -49.833333333333336, "y" : 141.5, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 180 */ { "x" : -14.833333333333332, "y" : 141.5, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 181 */ { "x" : -51.49999999999999, "y" : 141.83333333333331, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 182 */ { "x" : -12.833333333333332, "y" : 142.16666666666666, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 183 */ { "x" : 63.89140381106196, "y" : 213.38340409507845, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 184 */ { "x" : 98.89140381106196, "y" : 213.38340409507845, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 185 */ { "x" : 62.224737144395306, "y" : 213.71673742841176, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 186 */ { "x" : 100.89140381106196, "y" : 214.0500707617451, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 187 */ { "x" : 122.39140381106196, "y" : 213.2167374284118, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 188 */ { "x" : 157.39140381106196, "y" : 213.2167374284118, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 189 */ { "x" : 120.7247371443953, "y" : 213.55007076174513, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 190 */ { "x" : 159.39140381106196, "y" : 213.88340409507845, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 191 */ { "x" : 179.55807047772865, "y" : 213.0500707617451, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 192 */ { "x" : 214.55807047772865, "y" : 213.0500707617451, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 193 */ { "x" : 177.89140381106196, "y" : 213.38340409507845, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 194 */ { "x" : 216.55807047772865, "y" : 213.71673742841176, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 195 */ { "x" : 238.05807047772862, "y" : 212.88340409507845, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 196 */ { "x" : 273.0580704777287, "y" : 212.88340409507845, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 197 */ { "x" : 236.39140381106196, "y" : 213.21673742841176, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 198 */ { "x" : 275.0580704777287, "y" : 213.5500707617451, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 199 */ { "x" : -224.51184317670894, "y" : 215.55641597444708, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 200 */ { "x" : -189.51184317670894, "y" : 215.55641597444708, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 201 */ { "x" : -226.1785098433756, "y" : 215.8897493077804, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 202 */ { "x" : -187.51184317670894, "y" : 216.22308264111373, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 203 */ { "x" : -166.01184317670894, "y" : 215.38974930778042, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 204 */ { "x" : -131.01184317670894, "y" : 215.38974930778042, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 205 */ { "x" : -167.6785098433756, "y" : 215.72308264111376, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 206 */ { "x" : -129.01184317670894, "y" : 216.05641597444708, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 207 */ { "x" : -108.84517651004226, "y" : 215.22308264111373, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 208 */ { "x" : -73.84517651004226, "y" : 215.22308264111373, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 209 */ { "x" : -110.51184317670892, "y" : 215.55641597444708, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 210 */ { "x" : -71.84517651004226, "y" : 215.8897493077804, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 211 */ { "x" : -50.345176510042286, "y" : 215.05641597444708, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 212 */ { "x" : -15.345176510042279, "y" : 215.05641597444708, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 213 */ { "x" : -52.01184317670894, "y" : 215.3897493077804, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 214 */ { "x" : -13.345176510042279, "y" : 215.72308264111373, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 215 */ { "x" : -224.51184317670894, "y" : 274.76287997444706, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 216 */ { "x" : -189.51184317670894, "y" : 274.76287997444706, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 217 */ { "x" : -226.1785098433756, "y" : 275.09621330778043, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 218 */ { "x" : -187.51184317670894, "y" : 275.42954664111375, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 219 */ { "x" : -166.01184317670894, "y" : 274.59621330778043, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 220 */ { "x" : -131.01184317670894, "y" : 274.59621330778043, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 221 */ { "x" : -167.6785098433756, "y" : 274.9295466411138, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 222 */ { "x" : -129.01184317670894, "y" : 275.26287997444706, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 223 */ { "x" : -108.84517651004226, "y" : 274.42954664111375, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 224 */ { "x" : -73.84517651004226, "y" : 274.42954664111375, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 225 */ { "x" : -110.51184317670892, "y" : 274.76287997444706, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 226 */ { "x" : -71.84517651004226, "y" : 275.09621330778043, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 227 */ { "x" : -50.345176510042286, "y" : 274.26287997444706, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : -180, "color" : "400000" },
		/* 228 */ { "x" : -15.345176510042279, "y" : 274.26287997444706, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 180, "color" : "400000" },
		/* 229 */ { "x" : -52.01184317670894, "y" : 274.59621330778043, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" },
		/* 230 */ { "x" : -13.345176510042279, "y" : 274.92954664111375, "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "5E0000" }

	],

	"segments" : [
		{ "v0" : 0, "v1" : 1, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 2, "v1" : 3, "curve" : -182.6127857129582, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 4, "v1" : 5, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 6, "v1" : 7, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 8, "v1" : 9, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 10, "v1" : 11, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 12, "v1" : 13, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 14, "v1" : 15, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 16, "v1" : 17, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 18, "v1" : 19, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 20, "v1" : 21, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 22, "v1" : 23, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 24, "v1" : 25, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 26, "v1" : 27, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 28, "v1" : 29, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 30, "v1" : 31, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 32, "v1" : 33, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 34, "v1" : 35, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 36, "v1" : 37, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 38, "v1" : 39, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 40, "v1" : 41, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 42, "v1" : 43, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 44, "v1" : 45, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 46, "v1" : 47, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		
		{ "v0" : 48, "v1" : 49, "vis" : true, "color" : "5C3824", "bCoef" : 0.2, "cMask" : ["all" ], "y" : -50 },
		{ "v0" : 50, "v1" : 51, "vis" : true, "color" : "8F5738", "bCoef" : 0.2, "cMask" : ["all" ], "y" : -50 },
		{ "v0" : 52, "v1" : 53, "vis" : true, "color" : "A6A619", "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "y" : -50 },
		{ "v0" : 54, "v1" : 55, "vis" : true, "color" : "D1D11F", "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "y" : -50 },
		{ "v0" : 58, "v1" : 59, "vis" : true, "color" : "A6A619", "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "y" : -50 },
		{ "v0" : 60, "v1" : 61, "vis" : true, "color" : "D1D11F", "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "y" : -50 },
		{ "v0" : 64, "v1" : 65, "vis" : true, "color" : "A6A619", "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "y" : -50 },
		{ "v0" : 66, "v1" : 67, "vis" : true, "color" : "D1D11F", "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "y" : -50 },
		{ "v0" : 71, "v1" : 72, "vis" : true, "color" : "7A0B0B", "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ] },
		
		{ "v0" : 73, "v1" : 74, "curve" : 0, "vis" : true, "color" : "292929", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 74, "v1" : 75, "curve" : 0, "vis" : true, "color" : "292929", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 75, "v1" : 76, "curve" : 0, "vis" : true, "color" : "292929", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 77, "v1" : 78, "curve" : 0, "vis" : true, "color" : "D4D4D4", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 78, "v1" : 79, "curve" : 0, "vis" : true, "color" : "D4D4D4", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 80, "v1" : 81, "curve" : -30, "vis" : true, "color" : "292929", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 81, "v1" : 82, "curve" : 0, "vis" : true, "color" : "292929", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 82, "v1" : 83, "curve" : -30, "vis" : true, "color" : "292929", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 84, "v1" : 85, "curve" : 0, "vis" : true, "color" : "D4D4D4", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 85, "v1" : 86, "curve" : 0, "vis" : true, "color" : "D4D4D4", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 87, "v1" : 88, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 88, "v1" : 89, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 89, "v1" : 90, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 90, "v1" : 91, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 91, "v1" : 92, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 92, "v1" : 93, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 93, "v1" : 94, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 94, "v1" : 95, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 95, "v1" : 96, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 96, "v1" : 87, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 97, "v1" : 98, "curve" : 0, "vis" : true, "color" : "292929", "bCoef" : 1, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "trait" : "line" },
		{ "v0" : 98, "v1" : 99, "curve" : 0, "vis" : true, "color" : "292929", "bCoef" : 1, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "trait" : "line" },
		{ "v0" : 99, "v1" : 100, "curve" : 0, "vis" : true, "color" : "292929", "bCoef" : 1, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "trait" : "line" },
		{ "v0" : 100, "v1" : 97, "curve" : 0, "vis" : true, "color" : "292929", "bCoef" : 1, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "trait" : "line" },
		{ "v0" : 97, "v1" : 101, "curve" : 0, "vis" : true, "color" : "292929", "bCoef" : 1, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "trait" : "line" },
		{ "v0" : 101, "v1" : 100, "curve" : 0, "vis" : true, "color" : "292929", "bCoef" : 1, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "trait" : "line" },
		{ "v0" : 102, "v1" : 103, "curve" : -180, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "trait" : "line" },
		{ "v0" : 104, "v1" : 105, "curve" : 180, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "trait" : "line" },
		{ "v0" : 106, "v1" : 107, "curve" : 0, "vis" : true, "color" : "320000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 108, "v1" : 109, "curve" : 0, "vis" : true, "color" : "320000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 107, "v1" : 108, "curve" : 0, "vis" : true, "color" : "D92323", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 108, "v1" : 110, "curve" : 0, "vis" : true, "color" : "D92323", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 107, "v1" : 111, "curve" : 0, "vis" : true, "color" : "D92323", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 111, "v1" : 110, "curve" : -56.17703193745971, "vis" : true, "color" : "D92323", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 113, "v1" : 112, "curve" : -100.21018089318501, "vis" : true, "color" : "911717", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 114, "v1" : 115, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 115, "v1" : 116, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 116, "v1" : 117, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 117, "v1" : 114, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 118, "v1" : 119, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 119, "v1" : 120, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 120, "v1" : 121, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 121, "v1" : 122, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 122, "v1" : 123, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 123, "v1" : 124, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 124, "v1" : 125, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 125, "v1" : 126, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 126, "v1" : 127, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 127, "v1" : 118, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 128, "v1" : 129, "curve" : 0, "vis" : true, "color" : "FEC83C", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 130, "v1" : 131, "curve" : 0, "vis" : true, "color" : "292929", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 131, "v1" : 132, "curve" : 0, "vis" : true, "color" : "292929", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 131, "v1" : 133, "curve" : 0, "vis" : true, "color" : "292929", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 134, "v1" : 135, "curve" : 190.56025297135565, "vis" : true, "color" : "292929", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 136, "v1" : 137, "curve" : -128.73605858799593, "vis" : true, "color" : "FFFFFF", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		
		{ "v0" : 138, "v1" : 139, "curve" : 0, "vis" : true, "color" : "C2C2C2", "cMask" : ["wall" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 140, "v1" : 141, "curve" : 0, "vis" : true, "color" : "C2C2C2", "cMask" : ["wall" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 142, "v1" : 143, "curve" : 0, "vis" : true, "color" : "C2C2C2", "cMask" : ["wall" ], "cGroup" : ["red","blue" ] },
		
		{ "v0" : 144, "v1" : 145, "curve" : 0, "vis" : true, "color" : "292929", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 145, "v1" : 146, "curve" : 0, "vis" : true, "color" : "292929", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 145, "v1" : 147, "curve" : 0, "vis" : true, "color" : "292929", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 148, "v1" : 149, "curve" : -201.24484895072413, "vis" : true, "color" : "292929", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 150, "v1" : 151, "curve" : 114.30593145146108, "vis" : true, "color" : "FFFFFF", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		
		{ "v0" : 152, "v1" : 153, "curve" : 0, "vis" : true, "color" : "C2C2C2", "cMask" : ["wall" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 154, "v1" : 155, "curve" : 0, "vis" : true, "color" : "C2C2C2", "cMask" : ["wall" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 156, "v1" : 157, "curve" : 0, "vis" : true, "color" : "C2C2C2", "cMask" : ["wall" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 158, "v1" : 159, "vis" : true, "color" : "A6A619", "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "y" : -50 },
		{ "v0" : 160, "v1" : 161, "vis" : true, "color" : "D1D11F", "bCoef" : 0.2, "cMask" : ["wall" ], "cGroup" : ["red","blue" ], "y" : -50 },
		
		{ "v0" : 163, "v1" : 164, "curve" : 0, "vis" : true, "color" : "080808", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 165, "v1" : 166, "curve" : 0, "vis" : true, "color" : "080808", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 167, "v1" : 168, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 169, "v1" : 170, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 171, "v1" : 172, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 173, "v1" : 174, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 175, "v1" : 176, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 177, "v1" : 178, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 179, "v1" : 180, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 181, "v1" : 182, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 183, "v1" : 184, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 185, "v1" : 186, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 187, "v1" : 188, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 189, "v1" : 190, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 191, "v1" : 192, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 193, "v1" : 194, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 195, "v1" : 196, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 197, "v1" : 198, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 199, "v1" : 200, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 201, "v1" : 202, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 203, "v1" : 204, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 205, "v1" : 206, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 207, "v1" : 208, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 209, "v1" : 210, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 211, "v1" : 212, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 213, "v1" : 214, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 215, "v1" : 216, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 217, "v1" : 218, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 219, "v1" : 220, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 221, "v1" : 222, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 223, "v1" : 224, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 225, "v1" : 226, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 227, "v1" : 228, "curve" : -180, "vis" : true, "color" : "400000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" },
		{ "v0" : 229, "v1" : 230, "curve" : -180.87452846547475, "vis" : true, "color" : "5E0000", "bCoef" : 1, "cMask" : ["all" ], "cGroup" : ["wall" ], "trait" : "line" }

	],

	"goals" : [
		

	],

	"discs" : [
		{ "radius" : 4, "pos" : [-95,-120 ], "color" : "080808", "cGroup" : ["" ], "trait" : "art" },
		{ "radius" : 4, "pos" : [67,-120 ], "color" : "080808", "cGroup" : ["" ], "trait" : "art" }

	],

	"planes" : [
		{ "normal" : [0,1 ], "dist" : -199, "bCoef" : 0.2, "cMask" : ["all" ] },
		{ "normal" : [0,-1 ], "dist" : -300, "bCoef" : 0.2, "cMask" : ["all" ] },
		{ "normal" : [5,0 ], "dist" : -500, "bCoef" : 0.2, "cMask" : ["all" ] },
		{ "normal" : [-1,0 ], "dist" : -500, "bCoef" : 0.2, "cMask" : ["all" ] }

	],

	"traits" : {
		"ballArea" : { "vis" : false, "bCoef" : 1, "cMask" : ["ball" ] },
		"goalPost" : { "radius" : 8, "invMass" : 0, "bCoef" : 1 },
		"goalNet" : { "vis" : true, "bCoef" : 0.1, "cMask" : ["all" ] },
		"kickOffBarrier" : { "vis" : false, "bCoef" : 0.1, "cGroup" : ["redKO","blueKO" ], "cMask" : ["red","blue" ] },
		"line" : { "vis" : true, "bCoef" : 0, "cMask" : ["" ] },
		"arco" : { "radius" : 2, "cMask" : ["n/d" ], "color" : "cccccc" }

	},

	"playerPhysics" : {
		"acceleration" : 0.11,
		"kickingAcceleration" : 0.1,
		"kickStrength" : 6.5,
		"radius" : 15,
		"bCoef" : 0.5,
		"invMass" : 0.5,
		"damping" : 0.96,
		"cGroup" : [ "red", "blue"
		],
		"gravity" : [ 0, 0
		],
		"kickingDamping" : 0.96,
		"kickback" : 0

	},

	"ballPhysics" : {
		"radius" : 0,
		"color" : "404040",
		"bCoef" : 10,
		"cMask" : [ 
		],
		"damping" : 1000,
		"invMass" : 4,
		"gravity" : [ 0, 0
		],
		"cGroup" : [ 
		]

	},

	"cameraWidth" : 0,

	"cameraHeight" : 0,

	"maxViewWidth" : 0,

	"cameraFollow" : "ball",

	"canBeStored" : true,

	"kickOffReset" : "partial",

	"joints" : [
		

	],

	"spawnDistance" : 170
}`;
	RSRMap = false;
isAFKpaused = true;
	return PremiosMap;
}


// MAPA ADAPTADO AL SCRIPT
function getEntrenamientoRealSoccer() {
	var EntrenamientoRealSoccer = `{

	"name" : "💪 Entrenamiento RS ⚽",

	"width" : 1400,

	"height" : 710,

	"spawnDistance" : 560,

	"maxViewWidth" : 0,

	"cameraFollow" : "player",

	"redSpawnPoints" : [
		[ -380, 0
		],
		[ -380, 0
		],
		[ -380, 0
		],
		[ -380, 0
		],
		[ -380, 0
		],
		[ -380, 0
		],
		[ -380, 0
		],
		[ -132, 681
		]

	],

	"blueSpawnPoints" : [
		[ 380, 0
		],
		[ 380, 0
		],
		[ 380, 0
		],
		[ 380, 0
		],
		[ 380, 0
		],
		[ 380, 0
		],
		[ 380, 0
		],
		[ 132, 681
		]

	],

	"bg" : { "type" : "grass", "width" : 1260, "height" : 650, "kickOffRadius" : 180, "cornerRadius" : 0, "color" : "43774e" },

	"playerPhysics" : {
		"bCoef" : 0.3,
		"invMass" : 0.5,
		"damping" : 0.96,
		"acceleration" : 0.12,
		"kickingAcceleration" : 0.07,
		"kickingDamping" : 0.96,
		"kickStrength" : 5.65

	},

	"ballPhysics" : "disc0",

	"vertexes" : [
		/* 0 */ { "x" : 1150, "y" : 320, "trait" : "line" },
		/* 1 */ { "x" : 840, "y" : 320, "trait" : "line" },
		/* 2 */ { "x" : 1150, "y" : -320, "trait" : "line" },
		/* 3 */ { "x" : 840, "y" : -320, "trait" : "line" },
		/* 4 */ { "x" : 1150, "y" : 180, "trait" : "line" },
		/* 5 */ { "x" : 1030, "y" : 180, "trait" : "line" },
		/* 6 */ { "x" : 1150, "y" : -180, "trait" : "line" },
		/* 7 */ { "x" : 1030, "y" : -180, "trait" : "line" },
		/* 8 */ { "x" : 840, "y" : -130, "trait" : "line", "curve" : -130 },
		/* 9 */ { "x" : 840, "y" : 130, "trait" : "line", "curve" : -130 },
		/* 10 */ { "x" : -1150, "y" : -320, "trait" : "line" },
		/* 11 */ { "x" : -840, "y" : -320, "trait" : "line" },
		/* 12 */ { "x" : -1150, "y" : 320, "trait" : "line" },
		/* 13 */ { "x" : -840, "y" : 320, "trait" : "line" },
		/* 14 */ { "x" : -1150, "y" : -175, "trait" : "line" },
		/* 15 */ { "x" : -1030, "y" : -175, "trait" : "line" },
		/* 16 */ { "x" : -1150, "y" : 175, "trait" : "line" },
		/* 17 */ { "x" : -1030, "y" : 175, "trait" : "line" },
		/* 18 */ { "x" : -840, "y" : 130, "trait" : "line", "curve" : -130 },
		/* 19 */ { "x" : -840, "y" : -130, "trait" : "line", "curve" : -130 },
		/* 20 */ { "x" : 935, "y" : 3, "trait" : "line" },
		/* 21 */ { "x" : 935, "y" : -3, "trait" : "line" },
		/* 22 */ { "x" : -935, "y" : 3, "trait" : "line" },
		/* 23 */ { "x" : -935, "y" : -3, "trait" : "line" },
		/* 24 */ { "x" : -1150, "y" : 570, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 25 */ { "x" : -1120, "y" : 600, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 26 */ { "x" : -1120, "y" : -600, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 27 */ { "x" : -1150, "y" : -570, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 28 */ { "x" : 1120, "y" : 600, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 29 */ { "x" : 1150, "y" : 570, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 30 */ { "x" : 1150, "y" : -570, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 31 */ { "x" : 1120, "y" : -600, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 32 */ { "x" : -1030, "y" : -40, "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "curve" : 70, "color" : "576C46", "vis" : false },
		/* 33 */ { "x" : -1030, "y" : 40, "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "curve" : 70, "color" : "576C46", "vis" : false },
		/* 34 */ { "x" : 1030, "y" : -40, "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "curve" : -70, "color" : "576C46", "vis" : false },
		/* 35 */ { "x" : 1030, "y" : 40, "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "curve" : -70, "color" : "576C46", "vis" : false },
		/* 36 */ { "x" : 1030, "y" : -40, "trait" : "line", "color" : "576C46" },
		/* 37 */ { "x" : 1030, "y" : 40, "trait" : "line", "color" : "576C46" },
		/* 38 */ { "x" : -1030, "y" : -40, "trait" : "line", "color" : "576C46" },
		/* 39 */ { "x" : -1030, "y" : 40, "trait" : "line", "color" : "576C46" },
		/* 40 */ { "x" : 0, "y" : 3, "trait" : "line" },
		/* 41 */ { "x" : 0, "y" : -3, "trait" : "line" },
		
		/* 42 */ { "x" : -1157, "y" : 605, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		/* 43 */ { "x" : -1157, "y" : 655, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		/* 44 */ { "x" : -1157, "y" : -655, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		/* 45 */ { "x" : -1157, "y" : -605, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		/* 46 */ { "x" : 1157, "y" : 605, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		/* 47 */ { "x" : 1157, "y" : 655, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		/* 48 */ { "x" : 1157, "y" : -655, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		/* 49 */ { "x" : 1157, "y" : -605, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		
		/* 50 */ { "x" : -1300, "y" : -485, "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "color" : "ec644b", "vis" : false },
		/* 51 */ { "x" : 1300, "y" : -485, "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "color" : "ec644b", "vis" : false },
		/* 52 */ { "x" : -1300, "y" : 485, "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "color" : "ec644b", "vis" : false },
		/* 53 */ { "x" : 1300, "y" : 485, "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "color" : "ec644b", "vis" : false },
		/* 54 */ { "x" : -1295, "y" : -320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 55 */ { "x" : -840, "y" : -320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 56 */ { "x" : -840, "y" : 320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 57 */ { "x" : -1295, "y" : 320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 58 */ { "x" : 1295, "y" : -320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 59 */ { "x" : 840, "y" : -320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 60 */ { "x" : 840, "y" : 320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 61 */ { "x" : 1295, "y" : 320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 62 */ { "x" : -1150, "y" : -124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		/* 63 */ { "x" : -1210, "y" : -124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "bias" : 0, "curve" : 5, "radius" : 4.5, "color" : "f2d8d8" },
		/* 64 */ { "x" : -1150, "y" : 124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		/* 65 */ { "x" : -1210, "y" : 124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "bias" : 0, "curve" : 5, "radius" : 4.5, "vis" : false, "color" : "f2d8d8" },
		/* 66 */ { "x" : -1250, "y" : -158, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "color" : "f2d8d8" },
		/* 67 */ { "x" : -1250, "y" : 158, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "color" : "f2d8d8" },
		/* 68 */ { "x" : 1150, "y" : 124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "color" : "ffffff" },
		/* 69 */ { "x" : 1210, "y" : 124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "curve" : -5, "color" : "ffffff" },
		/* 70 */ { "x" : 1150, "y" : -124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "color" : "ffffff" },
		/* 71 */ { "x" : 1210, "y" : -124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "curve" : -5, "radius" : 6, "color" : "ffffff" },
		/* 72 */ { "x" : 1250, "y" : -158, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "color" : "e3f9fe" },
		/* 73 */ { "x" : 1250, "y" : 158, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "color" : "e3f9fe" },
		
		/* 74 */ { "x" : -1150, "y" : 600, "trait" : "line" },
		/* 75 */ { "x" : 1150, "y" : 600, "trait" : "line" },
		/* 76 */ { "x" : -1150, "y" : 600, "trait" : "line" },
		/* 77 */ { "x" : -1150, "y" : 600, "trait" : "line" },
		/* 78 */ { "x" : -1150, "y" : -600, "trait" : "line" },
		/* 79 */ { "x" : 1150, "y" : -600, "trait" : "line" },
		/* 80 */ { "x" : 1150, "y" : 600, "trait" : "line" },
		/* 81 */ { "x" : 1150, "y" : -600, "trait" : "line" },
		/* 82 */ { "x" : -1260, "y" : -655, "trait" : "line", "color" : "43774e" },
		/* 83 */ { "x" : -1260, "y" : 655, "trait" : "line", "color" : "43774e" },
		/* 84 */ { "x" : -1262, "y" : -655, "trait" : "line", "color" : "43774e" },
		/* 85 */ { "x" : -1262, "y" : 655, "trait" : "line", "color" : "43774e" },
		/* 86 */ { "x" : -1258, "y" : -655, "trait" : "line", "color" : "43774e" },
		/* 87 */ { "x" : -1258, "y" : 655, "trait" : "line", "color" : "43774e" },
		/* 88 */ { "x" : 1260, "y" : -665, "trait" : "line", "color" : "43774e" },
		/* 89 */ { "x" : 1260, "y" : 665, "trait" : "line", "color" : "43774e" },
		/* 90 */ { "x" : 1258, "y" : -665, "trait" : "line", "color" : "43774e" },
		/* 91 */ { "x" : 1258, "y" : 665, "trait" : "line", "color" : "43774e" },
		/* 92 */ { "x" : 1280, "y" : -665, "trait" : "line", "color" : "43774e" },
		/* 93 */ { "x" : 1280, "y" : 665, "trait" : "line", "color" : "43774e" },
		/* 94 */ { "x" : -2, "y" : -646.5, "trait" : "line", "color" : "6e965d", "curve" : 0 },
		/* 95 */ { "x" : -2, "y" : -601.5, "trait" : "line", "color" : "6e965d", "curve" : 0 },
		/* 96 */ { "x" : 0, "y" : -646.5, "trait" : "line", "color" : "6e965d", "curve" : 0 },
		/* 97 */ { "x" : 0, "y" : -601.5, "trait" : "line", "color" : "6e965d", "curve" : 0 },
		/* 98 */ { "x" : 2, "y" : -646.5, "trait" : "line", "color" : "6e965d", "curve" : 0 },
		/* 99 */ { "x" : 2, "y" : -601.5, "trait" : "line", "color" : "6e965d", "curve" : 0 },
		/* 100 */ { "x" : 0, "y" : 601.5, "trait" : "line", "color" : "7ea170", "curve" : 0 },
		/* 101 */ { "x" : 0, "y" : 646.5, "trait" : "line", "color" : "7ea170", "curve" : 0 },
		/* 102 */ { "x" : -2, "y" : 601.5, "trait" : "line", "color" : "7ea170", "curve" : 0 },
		/* 103 */ { "x" : -2, "y" : 646.5, "trait" : "line", "color" : "7ea170", "curve" : 0 },
		/* 104 */ { "x" : 2, "y" : 601.5, "trait" : "line", "color" : "7ea170", "curve" : 0 },
		/* 105 */ { "x" : 2, "y" : 646.5, "trait" : "line", "color" : "7ea170", "curve" : 0 },
		/* 106 */ { "x" : 1.142081210865527, "y" : -647.4445926432836, "trait" : "line", "color" : "7ea170", "curve" : 0 },
		/* 107 */ { "x" : -30.602942100934982, "y" : -615.5501809864863, "trait" : "line", "color" : "7ea170", "curve" : 0 },
		/* 108 */ { "x" : 2.559610617834295, "y" : -646.0337027183147, "trait" : "line", "color" : "7ea170", "curve" : 0 },
		/* 109 */ { "x" : -29.185412693966214, "y" : -614.1392910615175, "trait" : "line", "color" : "7ea170", "curve" : 0 },
		/* 110 */ { "x" : -1265, "y" : -650, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 111 */ { "x" : 1265, "y" : -650, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 112 */ { "x" : -1265, "y" : -648, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 113 */ { "x" : 1265, "y" : -648, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 114 */ { "x" : -1265, "y" : -652, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 115 */ { "x" : 1265, "y" : -652, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 116 */ { "x" : 28.41038434498239, "y" : 618.0793890634807, "trait" : "line", "color" : "6e965d", "curve" : 0 },
		/* 117 */ { "x" : -3.6831242630433323, "y" : 649.6231159394631, "trait" : "line", "color" : "6e965d", "curve" : 0 },
		/* 118 */ { "x" : 27.008440928272066, "y" : 616.6530109031239, "trait" : "line", "color" : "6e965d", "curve" : 0 },
		/* 119 */ { "x" : -5.085067679753664, "y" : 648.1967377791065, "trait" : "line", "color" : "6e965d", "curve" : 0 },
		/* 120 */ { "x" : -1265, "y" : 650, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 121 */ { "x" : 1265, "y" : 650, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 122 */ { "x" : -1265, "y" : 652, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 123 */ { "x" : 1265, "y" : 652, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 124 */ { "x" : -1265, "y" : 648, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 125 */ { "x" : 1265, "y" : 648, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 126 */ { "x" : -1239.5240259394243, "y" : -652.4006293133806, "trait" : "line", "curve" : -90 },
		/* 127 */ { "x" : -1260.3289235748528, "y" : -633.661466194945, "trait" : "line", "curve" : -90 },
		/* 128 */ { "x" : -1238.1855142881075, "y" : -650.9145651965642, "trait" : "line", "curve" : -90 },
		/* 129 */ { "x" : -1258.990411923536, "y" : -632.1754020781286, "trait" : "line", "curve" : -90 },
		/* 130 */ { "x" : -1236.8470026367906, "y" : -649.428501079748, "trait" : "line", "curve" : -90 },
		/* 131 */ { "x" : -1257.651900272219, "y" : -630.6893379613123, "trait" : "line", "curve" : -90 },
		/* 132 */ { "x" : -1260.8893083322516, "y" : 631.2171531285527, "trait" : "line", "curve" : -90 },
		/* 133 */ { "x" : -1241.9730164936645, "y" : 651.8611329550639, "trait" : "line", "curve" : -90 },
		/* 134 */ { "x" : -1259.4147383446436, "y" : 629.8659894257964, "trait" : "line", "curve" : -90 },
		/* 135 */ { "x" : -1240.4984465060566, "y" : 650.5099692523077, "trait" : "line", "curve" : -90 },
		/* 136 */ { "x" : -1257.9401683570356, "y" : 628.5148257230403, "trait" : "line", "curve" : -90 },
		/* 137 */ { "x" : -1239.0238765184486, "y" : 649.1588055495515, "trait" : "line", "curve" : -90 },
		/* 138 */ { "x" : 1240.6332966050222, "y" : 651.0394293358713, "trait" : "line", "curve" : -90 },
		/* 139 */ { "x" : 1261.114850634535, "y" : 631.9473905621797, "trait" : "line", "curve" : -90 },
		/* 140 */ { "x" : 1239.2695795497584, "y" : 649.5764611909061, "trait" : "line", "curve" : -90 },
		/* 141 */ { "x" : 1259.7511335792713, "y" : 630.4844224172144, "trait" : "line", "curve" : -90 },
		/* 142 */ { "x" : 1237.9058624944948, "y" : 648.1134930459408, "trait" : "line", "curve" : -90 },
		/* 143 */ { "x" : 1258.3874165240077, "y" : 629.0214542722492, "trait" : "line", "curve" : -90 },
		/* 144 */ { "x" : 1260.3945318749338, "y" : -631.2611957749441, "trait" : "line", "curve" : -90 },
		/* 145 */ { "x" : 1241.3024931012424, "y" : -651.7427498044569, "trait" : "line", "curve" : -90 },
		/* 146 */ { "x" : 1258.9315637299687, "y" : -629.8974787196803, "trait" : "line", "curve" : -90 },
		/* 147 */ { "x" : 1239.8395249562768, "y" : -650.3790327491931, "trait" : "line", "curve" : -90 },
		/* 148 */ { "x" : 1257.4685955850032, "y" : -628.5337616644167, "trait" : "line", "curve" : -90 },
		/* 149 */ { "x" : 1238.3765568113117, "y" : -649.0153156939296, "trait" : "line", "curve" : -90 },
		
		/* 150 */ { "x" : 1149, "y" : -635, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		/* 151 */ { "x" : 1149, "y" : -600, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		
		/* 152 */ { "x" : 1161, "y" : -633, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 153 */ { "x" : 1175, "y" : -633, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 154 */ { "x" : 1147, "y" : -633, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 155 */ { "x" : 1161, "y" : -630, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 156 */ { "x" : 1147, "y" : -630, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 157 */ { "x" : 1175, "y" : -630, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 158 */ { "x" : 1161, "y" : -635, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 159 */ { "x" : 1175, "y" : -635, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 160 */ { "x" : 1147, "y" : -635, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 161 */ { "x" : 1161, "y" : -628, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 162 */ { "x" : 1147, "y" : -628, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 163 */ { "x" : 1175, "y" : -628, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		
		/* 164 */ { "x" : 1169.3924124236926, "y" : 572.0916290810089, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		/* 165 */ { "x" : 1148.4570005362957, "y" : 600.139953970475, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		
		/* 166 */ { "x" : 1177.8126717065154, "y" : 580.8722460075145, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 167 */ { "x" : 1189.0320016623018, "y" : 589.2464107624734, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 168 */ { "x" : 1166.593341750729, "y" : 572.4980812525557, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 169 */ { "x" : 1176.0182078304529, "y" : 583.2763881408973, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 170 */ { "x" : 1164.7988778746665, "y" : 574.9022233859386, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 171 */ { "x" : 1187.2375377862393, "y" : 591.6505528958561, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 172 */ { "x" : 1179.008980957224, "y" : 579.2694845852593, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 173 */ { "x" : 1190.22831091301, "y" : 587.6436493402181, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 174 */ { "x" : 1167.7896510014373, "y" : 570.8953198303005, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 175 */ { "x" : 1174.8218985797444, "y" : 584.8791495631525, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 176 */ { "x" : 1163.602568623958, "y" : 576.5049848081937, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 177 */ { "x" : 1186.0412285355308, "y" : 593.2533143181114, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		
		/* 178 */ { "x" : -1149, "y" : -632, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		/* 179 */ { "x" : -1149, "y" : -597, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		
		/* 180 */ { "x" : -1161, "y" : -631, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 181 */ { "x" : -1147, "y" : -631, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 182 */ { "x" : -1175, "y" : -631, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 183 */ { "x" : -1161, "y" : -628, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 184 */ { "x" : -1175, "y" : -628, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 185 */ { "x" : -1147, "y" : -628, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 186 */ { "x" : -1161, "y" : -633, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 187 */ { "x" : -1147, "y" : -633, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 188 */ { "x" : -1175, "y" : -633, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 189 */ { "x" : -1161, "y" : -626, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 190 */ { "x" : -1175, "y" : -626, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 191 */ { "x" : -1147, "y" : -626, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		
		/* 192 */ { "x" : -1168.2406115927063, "y" : 572.9938153222878, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		/* 193 */ { "x" : -1147.8317517070022, "y" : 601.4275705819381, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		
		/* 194 */ { "x" : -1177.4062173992804, "y" : 580.8035317190905, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 195 */ { "x" : -1166.0327152954208, "y" : 572.6399877648089, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 196 */ { "x" : -1188.779719503141, "y" : 588.9670756733724, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 197 */ { "x" : -1175.6568865519346, "y" : 583.2407107413463, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 198 */ { "x" : -1187.0303886557947, "y" : 591.4042546956281, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 199 */ { "x" : -1164.2833844480745, "y" : 575.0771667870647, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 200 */ { "x" : -1178.5724379641779, "y" : 579.1787457042534, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 201 */ { "x" : -1167.198935860318, "y" : 571.0152017499719, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 202 */ { "x" : -1189.9459400680385, "y" : 587.3422896585353, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 203 */ { "x" : -1174.4906659870371, "y" : 584.8654967561835, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 204 */ { "x" : -1185.8641680908975, "y" : 593.0290407104652, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 205 */ { "x" : -1163.117163883177, "y" : 576.7019528019019, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 206 */ { "x" : -42, "y" : 682, "trait" : "line" },
		/* 207 */ { "x" : -42, "y" : 668, "trait" : "line" },
		/* 208 */ { "x" : -42, "y" : 662, "trait" : "line" },
		/* 209 */ { "x" : -42, "y" : 653, "trait" : "line" },
		/* 210 */ { "x" : -62, "y" : 653, "trait" : "line" },
		/* 211 */ { "x" : -223, "y" : 682, "trait" : "line" },
		/* 212 */ { "x" : -223, "y" : 668, "trait" : "line" },
		/* 213 */ { "x" : -223, "y" : 662, "trait" : "line" },
		/* 214 */ { "x" : -223, "y" : 653, "trait" : "line" },
		/* 215 */ { "x" : -205, "y" : 653, "trait" : "line" },
		/* 216 */ { "x" : -120, "y" : 653, "trait" : "line" },
		/* 217 */ { "x" : -96, "y" : 653, "trait" : "line" },
		/* 218 */ { "x" : -172, "y" : 653, "trait" : "line" },
		/* 219 */ { "x" : -148, "y" : 653, "trait" : "line" },
		/* 220 */ { "x" : -42, "y" : 704, "trait" : "line" },
		/* 221 */ { "x" : -42, "y" : 690, "trait" : "line" },
		/* 222 */ { "x" : -223, "y" : 704, "trait" : "line" },
		/* 223 */ { "x" : -223, "y" : 690, "trait" : "line" },
		/* 224 */ { "x" : 223, "y" : 682, "trait" : "line" },
		/* 225 */ { "x" : 223, "y" : 668, "trait" : "line" },
		/* 226 */ { "x" : 223, "y" : 662, "trait" : "line" },
		/* 227 */ { "x" : 223, "y" : 653, "trait" : "line" },
		/* 228 */ { "x" : 203, "y" : 653, "trait" : "line" },
		/* 229 */ { "x" : 42, "y" : 682, "trait" : "line" },
		/* 230 */ { "x" : 42, "y" : 668, "trait" : "line" },
		/* 231 */ { "x" : 42, "y" : 662, "trait" : "line" },
		/* 232 */ { "x" : 42, "y" : 653, "trait" : "line" },
		/* 233 */ { "x" : 60, "y" : 653, "trait" : "line" },
		/* 234 */ { "x" : 145, "y" : 653, "trait" : "line" },
		/* 235 */ { "x" : 169, "y" : 653, "trait" : "line" },
		/* 236 */ { "x" : 93, "y" : 653, "trait" : "line" },
		/* 237 */ { "x" : 117, "y" : 653, "trait" : "line" },
		/* 238 */ { "x" : 223, "y" : 704, "trait" : "line" },
		/* 239 */ { "x" : 223, "y" : 690, "trait" : "line" },
		/* 240 */ { "x" : 42, "y" : 704, "trait" : "line" },
		/* 241 */ { "x" : 42, "y" : 690, "trait" : "line" },
		
		/* 242 */ { "x" : -1210, "y" : 627, "cMask" : ["ball" ], "bias" : -12, "vis" : false, "_selected" : "segment" },
		/* 243 */ { "x" : -1210, "y" : -627, "cMask" : ["ball" ], "bias" : -12, "vis" : false, "_selected" : "segment" },
		/* 244 */ { "x" : 1210, "y" : 627, "cMask" : ["ball" ], "bias" : 12, "vis" : false },
		/* 245 */ { "x" : 1210, "y" : -627, "cMask" : ["ball" ], "bias" : 12, "vis" : false },
		/* 246 */ { "x" : 1260, "y" : 627, "cMask" : ["red","blue" ], "bias" : 12, "vis" : false },
		/* 247 */ { "x" : 1260, "y" : -627, "cMask" : ["red","blue" ], "bias" : 12, "vis" : false },
		/* 248 */ { "x" : -1260, "y" : 627, "cMask" : ["red","blue" ], "bias" : -12, "vis" : false },
		/* 249 */ { "x" : -1260, "y" : -627, "cMask" : ["red","blue" ], "bias" : -12, "vis" : false }

	],

	"segments" : [
		{ "v0" : 0, "v1" : 1, "trait" : "line", "y" : 320 },
		{ "v0" : 1, "v1" : 3, "trait" : "line", "x" : 840 },
		{ "v0" : 2, "v1" : 3, "trait" : "line", "y" : -320 },
		{ "v0" : 4, "v1" : 5, "trait" : "line", "y" : 180 },
		{ "v0" : 5, "v1" : 7, "trait" : "line", "x" : 1030 },
		{ "v0" : 6, "v1" : 7, "trait" : "line", "y" : -180 },
		{ "v0" : 8, "v1" : 9, "curve" : -130, "trait" : "line", "x" : 840 },
		{ "v0" : 10, "v1" : 11, "trait" : "line", "y" : -320 },
		{ "v0" : 11, "v1" : 13, "trait" : "line", "x" : -840 },
		{ "v0" : 12, "v1" : 13, "trait" : "line", "y" : 320 },
		{ "v0" : 14, "v1" : 15, "trait" : "line", "y" : -175 },
		{ "v0" : 15, "v1" : 17, "trait" : "line", "x" : -1030 },
		{ "v0" : 16, "v1" : 17, "trait" : "line", "y" : 175 },
		{ "v0" : 18, "v1" : 19, "curve" : -130, "trait" : "line", "x" : -840 },
		{ "v0" : 20, "v1" : 21, "curve" : -180, "trait" : "line", "x" : 935 },
		{ "v0" : 22, "v1" : 23, "curve" : -180, "trait" : "line", "x" : -935 },
		{ "v0" : 20, "v1" : 21, "curve" : 180, "trait" : "line", "x" : 935 },
		{ "v0" : 22, "v1" : 23, "curve" : 180, "trait" : "line", "x" : -935 },
		{ "v0" : 20, "v1" : 21, "curve" : 90, "trait" : "line", "x" : 935 },
		{ "v0" : 22, "v1" : 23, "curve" : 90, "trait" : "line", "x" : -935 },
		{ "v0" : 20, "v1" : 21, "curve" : -90, "trait" : "line", "x" : 935 },
		{ "v0" : 22, "v1" : 23, "curve" : -90, "trait" : "line", "x" : -935 },
		{ "v0" : 20, "v1" : 21, "trait" : "line", "x" : 935 },
		{ "v0" : 22, "v1" : 23, "trait" : "line", "x" : -935 },
		{ "v0" : 24, "v1" : 25, "curve" : 90, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		{ "v0" : 26, "v1" : 27, "curve" : 90, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		{ "v0" : 28, "v1" : 29, "curve" : 90, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		{ "v0" : 30, "v1" : 31, "curve" : 90, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		{ "v0" : 32, "v1" : 33, "curve" : 70, "vis" : false, "color" : "576C46", "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "x" : -1030 },
		{ "v0" : 34, "v1" : 35, "curve" : -70, "vis" : false, "color" : "576C46", "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "x" : 1030 },
		{ "v0" : 36, "v1" : 37, "vis" : true, "color" : "576C46", "trait" : "line", "x" : 1030 },
		{ "v0" : 38, "v1" : 39, "vis" : true, "color" : "576C46", "trait" : "line", "x" : -1030 },
		{ "v0" : 40, "v1" : 41, "curve" : -180, "trait" : "line", "x" : -935 },
		{ "v0" : 40, "v1" : 41, "curve" : 180, "trait" : "line", "x" : -935 },
		{ "v0" : 40, "v1" : 41, "curve" : 90, "trait" : "line", "x" : -935 },
		{ "v0" : 40, "v1" : 41, "curve" : -90, "trait" : "line", "x" : -935 },
		{ "v0" : 40, "v1" : 41, "trait" : "line", "x" : -935 },
		
		{ "v0" : 42, "v1" : 43, "color" : "FFFF00", "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea", "x" : -1157 },
		{ "v0" : 44, "v1" : 45, "color" : "FFFF00", "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea", "x" : -1157 },
		{ "v0" : 46, "v1" : 47, "color" : "FFFF00", "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea", "x" : 1157 },
		{ "v0" : 48, "v1" : 49, "color" : "FFFF00", "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea", "x" : 1157 },
		
		{ "v0" : 50, "v1" : 51, "vis" : false, "color" : "ec644b", "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "y" : -485 },
		{ "v0" : 52, "v1" : 53, "vis" : false, "color" : "ec644b", "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "y" : 485 },
		{ "v0" : 54, "v1" : 55, "vis" : false, "color" : "ec644b", "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 55, "v1" : 56, "vis" : false, "color" : "ec644b", "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 56, "v1" : 57, "vis" : false, "color" : "ec644b", "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 58, "v1" : 59, "vis" : false, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 59, "v1" : 60, "vis" : false, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 60, "v1" : 61, "vis" : false, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 62, "v1" : 63, "color" : "FFFFFF", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "y" : -124 },
		{ "v0" : 64, "v1" : 65, "color" : "FFFFFF", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "y" : 124 },
		{ "v0" : 63, "v1" : 66, "color" : "f2d8d8", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 65, "v1" : 67, "color" : "f2d8d8", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 68, "v1" : 69, "color" : "ffffff", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "y" : 124 },
		{ "v0" : 70, "v1" : 71, "color" : "ffffff", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "y" : -124 },
		{ "v0" : 71, "v1" : 72, "color" : "e3f9fe", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 69, "v1" : 73, "color" : "e3f9fe", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		
		{ "v0" : 74, "v1" : 75, "vis" : true, "color" : "C7E6BD", "trait" : "line", "y" : 600 },
		{ "v0" : 76, "v1" : 77, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -1150 },
		{ "v0" : 78, "v1" : 79, "vis" : true, "color" : "C7E6BD", "trait" : "line", "y" : -600 },
		{ "v0" : 80, "v1" : 81, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : 1150 },
		{ "v0" : 78, "v1" : 77, "vis" : true, "color" : "C7E6BD", "trait" : "line" },
		{ "v0" : 82, "v1" : 83, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1260 },
		{ "v0" : 84, "v1" : 85, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1262 },
		{ "v0" : 86, "v1" : 87, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1258 },
		{ "v0" : 88, "v1" : 89, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1260 },
		{ "v0" : 90, "v1" : 91, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1262 },
		{ "v0" : 92, "v1" : 93, "vis" : true, "color" : "43774e", "trait" : "line", "x" : 1280 },
		{ "v0" : 94, "v1" : 95, "curve" : 0, "vis" : true, "color" : "6e965d", "trait" : "line", "x" : -2 },
		{ "v0" : 96, "v1" : 97, "curve" : 0, "vis" : true, "color" : "6e965d", "trait" : "line", "x" : 0 },
		{ "v0" : 98, "v1" : 99, "curve" : 0, "vis" : true, "color" : "6e965d", "trait" : "line", "x" : 2 },
		{ "v0" : 100, "v1" : 101, "curve" : 0, "vis" : true, "color" : "7ea170", "trait" : "line", "x" : 0 },
		{ "v0" : 102, "v1" : 103, "curve" : 0, "vis" : true, "color" : "7ea170", "trait" : "line", "x" : -2 },
		{ "v0" : 104, "v1" : 105, "curve" : 0, "vis" : true, "color" : "7ea170", "trait" : "line", "x" : 2 },
		{ "v0" : 106, "v1" : 107, "curve" : 0, "vis" : true, "color" : "7ea170", "trait" : "line", "x" : 0 },
		{ "v0" : 108, "v1" : 109, "curve" : 0, "vis" : true, "color" : "7ea170", "trait" : "line", "x" : 2 },
		{ "v0" : 110, "v1" : 111, "curve" : 0, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1260, "y" : -650 },
		{ "v0" : 112, "v1" : 113, "curve" : 0, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1262, "y" : -648 },
		{ "v0" : 114, "v1" : 115, "curve" : 0, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1258, "y" : -652 },
		{ "v0" : 116, "v1" : 117, "curve" : 0, "vis" : true, "color" : "6e965d", "trait" : "line", "x" : 0 },
		{ "v0" : 118, "v1" : 119, "curve" : 0, "vis" : true, "color" : "6e965d", "trait" : "line", "x" : -2 },
		{ "v0" : 120, "v1" : 121, "curve" : 0, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1260, "y" : 650 },
		{ "v0" : 122, "v1" : 123, "curve" : 0, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1262, "y" : 652 },
		{ "v0" : 124, "v1" : 125, "curve" : 0, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1258, "y" : 648 },
		{ "v0" : 126, "v1" : 127, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -752 },
		{ "v0" : 128, "v1" : 129, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -750 },
		{ "v0" : 130, "v1" : 131, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -748 },
		{ "v0" : 132, "v1" : 133, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -752 },
		{ "v0" : 134, "v1" : 135, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -750 },
		{ "v0" : 136, "v1" : 137, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -748 },
		{ "v0" : 138, "v1" : 139, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -752 },
		{ "v0" : 140, "v1" : 141, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -750 },
		{ "v0" : 142, "v1" : 143, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -748 },
		{ "v0" : 144, "v1" : 145, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -752 },
		{ "v0" : 146, "v1" : 147, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -750 },
		{ "v0" : 148, "v1" : 149, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -748 },
		
		{ "v0" : 150, "v1" : 151, "curve" : 0, "vis" : true, "color" : "D7D7D9", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "x" : 780 },
		
		{ "v0" : 152, "v1" : 153, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 152, "v1" : 153, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -553 },
		{ "v0" : 153, "v1" : 153, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : 903 },
		
		{ "v0" : 152, "v1" : 154, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -553 },
		
		{ "v0" : 155, "v1" : 156, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 155, "v1" : 156, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -550 },
		{ "v0" : 156, "v1" : 156, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : 875 },
		
		{ "v0" : 155, "v1" : 157, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -550 },
		
		{ "v0" : 158, "v1" : 159, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -555 },
		
		{ "v0" : 158, "v1" : 160, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -555 },
		
		{ "v0" : 161, "v1" : 162, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -548 },
		
		{ "v0" : 161, "v1" : 163, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -548 },
		
		{ "v0" : 164, "v1" : 165, "curve" : 0, "vis" : true, "color" : "D7D7D9", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "x" : 780 },
		
		{ "v0" : 166, "v1" : 167, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 166, "v1" : 167, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -553 },
		{ "v0" : 167, "v1" : 167, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : 903 },
		
		{ "v0" : 166, "v1" : 168, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -553 },
		
		{ "v0" : 169, "v1" : 170, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 169, "v1" : 170, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -550 },
		{ "v0" : 170, "v1" : 170, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : 875 },
		
		{ "v0" : 169, "v1" : 171, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -550 },
		
		{ "v0" : 172, "v1" : 173, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -555 },
		
		{ "v0" : 172, "v1" : 174, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -555 },
		
		{ "v0" : 175, "v1" : 176, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -548 },
		
		{ "v0" : 175, "v1" : 177, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -548 },
		
		{ "v0" : 178, "v1" : 179, "curve" : 0, "vis" : true, "color" : "D7D7D9", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "x" : 877 },
		
		{ "v0" : 180, "v1" : 181, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 180, "v1" : 181, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -553 },
		{ "v0" : 181, "v1" : 181, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : 903 },
		
		{ "v0" : 180, "v1" : 182, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -553 },
		
		{ "v0" : 183, "v1" : 184, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 183, "v1" : 184, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -550 },
		{ "v0" : 184, "v1" : 184, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : 875 },
		
		{ "v0" : 183, "v1" : 185, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -550 },
		
		{ "v0" : 186, "v1" : 187, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -555 },
		
		{ "v0" : 186, "v1" : 188, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -555 },
		
		{ "v0" : 189, "v1" : 190, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -548 },
		
		{ "v0" : 189, "v1" : 191, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -548 },
		
		{ "v0" : 192, "v1" : 193, "curve" : 0, "vis" : true, "color" : "D7D7D9", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "x" : 877 },
		
		{ "v0" : 194, "v1" : 195, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 194, "v1" : 195, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -553 },
		{ "v0" : 195, "v1" : 195, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : 903 },
		
		{ "v0" : 194, "v1" : 196, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -553 },
		
		{ "v0" : 197, "v1" : 198, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 197, "v1" : 198, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -550 },
		{ "v0" : 198, "v1" : 198, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : 875 },
		
		{ "v0" : 197, "v1" : 199, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -550 },
		
		{ "v0" : 200, "v1" : 201, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -555 },
		
		{ "v0" : 200, "v1" : 202, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -555 },
		
		{ "v0" : 203, "v1" : 204, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -548 },
		
		{ "v0" : 203, "v1" : 205, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -548 },
		{ "v0" : 206, "v1" : 207, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -42 },
		{ "v0" : 208, "v1" : 209, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -42 },
		{ "v0" : 209, "v1" : 210, "vis" : true, "color" : "C7E6BD", "trait" : "line", "y" : 653 },
		{ "v0" : 211, "v1" : 212, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -223 },
		{ "v0" : 213, "v1" : 214, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -223 },
		{ "v0" : 214, "v1" : 215, "vis" : true, "color" : "C7E6BD", "trait" : "line" },
		{ "v0" : 216, "v1" : 217, "vis" : true, "color" : "C7E6BD", "trait" : "line", "y" : 653 },
		{ "v0" : 218, "v1" : 219, "vis" : true, "color" : "C7E6BD", "trait" : "line", "y" : 653 },
		{ "v0" : 220, "v1" : 221, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -42 },
		{ "v0" : 222, "v1" : 223, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -223 },
		{ "v0" : 224, "v1" : 225, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -42 },
		{ "v0" : 226, "v1" : 227, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -42 },
		{ "v0" : 227, "v1" : 228, "vis" : true, "color" : "C7E6BD", "trait" : "line", "y" : 653 },
		{ "v0" : 229, "v1" : 230, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -223 },
		{ "v0" : 231, "v1" : 232, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -223 },
		{ "v0" : 232, "v1" : 233, "vis" : true, "color" : "C7E6BD", "trait" : "line", "y" : 653 },
		{ "v0" : 234, "v1" : 235, "vis" : true, "color" : "C7E6BD", "trait" : "line", "y" : 653 },
		{ "v0" : 236, "v1" : 237, "vis" : true, "color" : "C7E6BD", "trait" : "line", "y" : 653 },
		{ "v0" : 238, "v1" : 239, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -42 },
		{ "v0" : 240, "v1" : 241, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -223 },
		
		{ "v0" : 69, "v1" : 71, "color" : "ffffff", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 63, "v1" : 65, "color" : "FFFFFF", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 242, "v1" : 243, "vis" : false, "cMask" : ["ball" ], "bias" : -12, "x" : -1210, "_selected" : true },
		{ "v0" : 244, "v1" : 245, "vis" : false, "cMask" : ["ball" ], "bias" : 12, "x" : 1210 },
		{ "v0" : 246, "v1" : 247, "vis" : false, "cMask" : ["red","blue" ], "bias" : 12, "x" : 1260 },
		{ "v0" : 248, "v1" : 249, "vis" : false, "cMask" : ["red","blue" ], "bias" : -12, "x" : -1260 }

	],

	"goals" : [
		

	],

	"discs" : [
		{ "radius" : 0.01, "invMass" : 1.5, "pos" : [1660,0 ], "color" : "FEBA01", "bCoef" : 0.4, "cGroup" : ["ball","kick","score" ] },
		{ "radius" : 0, "invMass" : 0, "pos" : [-1311,-19 ], "color" : "ffffffff", "bCoef" : 0, "cMask" : ["red" ], "cGroup" : ["ball" ] },
		{ "radius" : 0, "invMass" : 0, "pos" : [-1310,29 ], "color" : "ffffffff", "bCoef" : 0, "cMask" : ["blue" ], "cGroup" : ["ball" ] },
		{ "radius" : 0, "invMass" : 0, "pos" : [-1308,62 ], "color" : "ffffffff", "bCoef" : 0, "cMask" : ["red","blue" ], "cGroup" : ["ball" ] },
		
		{ "radius" : 2.7, "pos" : [-1150,600 ], "color" : "7af769", "cGroup" : ["ball" ], "trait" : "cornerflag" },
		{ "radius" : 2.7, "pos" : [1150,-600 ], "color" : "7af769", "cGroup" : ["ball" ], "trait" : "cornerflag" },
		{ "radius" : 2.7, "pos" : [1150,600 ], "color" : "7af769", "cGroup" : ["ball" ], "trait" : "cornerflag" },
		
		{ "radius" : 5, "invMass" : 0, "pos" : [-1150,-124 ], "color" : "d6cbcb", "bCoef" : 0.5, "trait" : "goalPost" },
		{ "radius" : 5, "invMass" : 0, "pos" : [-1150,124 ], "color" : "d6cbcb", "bCoef" : 0.5, "trait" : "goalPost" },
		{ "radius" : 3, "invMass" : 0, "pos" : [-1250,-158 ], "color" : "dd2e2e", "bCoef" : 1, "trait" : "goalPost" },
		{ "radius" : 3, "invMass" : 0, "pos" : [-1250,158 ], "color" : "dd2e2e", "bCoef" : 1, "trait" : "goalPost" },
		{ "radius" : 5, "invMass" : 0, "pos" : [1150,-124 ], "color" : "cbccd6", "bCoef" : 0.5, "trait" : "goalPost" },
		{ "radius" : 5, "invMass" : 0, "pos" : [1150,124 ], "color" : "cbccd6", "bCoef" : 0.5, "trait" : "goalPost" },
		{ "radius" : 3, "invMass" : 0, "pos" : [1250,-158 ], "color" : "2e51dd", "bCoef" : 1, "trait" : "goalPost" },
		{ "radius" : 3, "invMass" : 0, "pos" : [1250,158 ], "color" : "2e51dd", "bCoef" : 1, "trait" : "goalPost" },
		
		{ "radius" : 2.7, "pos" : [-1150,-600 ], "color" : "7af769", "cGroup" : ["ball" ], "trait" : "cornerflag" },
		
		{ "radius" : 0, "pos" : [-1149,-485 ], "cMask" : ["none" ] },
		{ "radius" : 0, "pos" : [1149,-485 ], "cMask" : ["none" ] },
		{ "radius" : 0, "pos" : [-1149,-485 ], "cMask" : ["none" ] },
		{ "radius" : 0, "pos" : [1149,-485 ], "cMask" : ["none" ] },
		{ "radius" : 0, "pos" : [-1149,485 ], "cMask" : ["none" ] },
		{ "radius" : 0, "pos" : [1149,485 ], "cMask" : ["none" ] },
		{ "radius" : 0, "pos" : [-1149,485 ], "cMask" : ["none" ] },
		{ "radius" : 0, "pos" : [1149,485 ], "cMask" : ["none" ] },
		{ "radius" : 9, "invMass" : 1.05, "pos" : [-7,0 ], "color" : "FFFFFF", "bCoef" : 0.5, "cGroup" : ["ball","kick","score" ], "damping" : 0.99 },
		{ "radius" : 9, "invMass" : 1.05, "pos" : [-2,0 ], "color" : "FFFFFF", "bCoef" : 0.5, "cGroup" : ["ball","kick","score" ], "damping" : 0.99 },
		{ "radius" : 9, "invMass" : 1.05, "pos" : [0,7 ], "color" : "FFFFFF", "bCoef" : 0.5, "cGroup" : ["ball","kick","score" ], "damping" : 0.99 },
		{ "radius" : 9, "invMass" : 1.05, "pos" : [-9,0 ], "color" : "FFFFFF", "bCoef" : 0.5, "cGroup" : ["ball","kick","score" ], "damping" : 0.99 },
		{ "radius" : 9, "invMass" : 1.05, "pos" : [11,0 ], "color" : "FFFFFF", "bCoef" : 0.5, "cGroup" : ["ball","kick","score" ], "damping" : 0.99 },
		{ "radius" : 9, "invMass" : 1.05, "pos" : [5,-4 ], "color" : "FFFFFF", "bCoef" : 0.5, "cGroup" : ["ball","kick","score" ], "damping" : 0.99 },
		{ "radius" : 9, "invMass" : 1.05, "pos" : [8,7 ], "color" : "FFFFFF", "bCoef" : 0.5, "cGroup" : ["ball","kick","score" ], "damping" : 0.99 },
		{ "radius" : 9, "invMass" : 1.05, "pos" : [-9,11 ], "color" : "FFFFFF", "bCoef" : 0.5, "cGroup" : ["ball","kick","score" ], "damping" : 0.99 },
		{ "radius" : 9, "invMass" : 1.05, "pos" : [11,7 ], "color" : "FFFFFF", "bCoef" : 0.5, "cGroup" : ["ball","kick","score" ], "damping" : 0.99 },
		{ "radius" : 9, "invMass" : 1.05, "pos" : [8,-4 ], "color" : "FFFFFF", "bCoef" : 0.5, "cGroup" : ["ball","kick","score" ], "damping" : 0.99 }

	],

	"planes" : [
		{ "normal" : [0,1 ], "dist" : -627, "bCoef" : 0, "cGroup" : ["ball" ], "trait" : "ballArea" },
		{ "normal" : [0,-1 ], "dist" : -627, "bCoef" : 0, "cGroup" : ["ball" ], "trait" : "ballArea" },
		
		{ "normal" : [0,1 ], "dist" : -706, "bCoef" : 0 },
		{ "normal" : [0,-1 ], "dist" : -706, "bCoef" : 0 }

	],

	"traits" : {
		"ballArea" : { "vis" : false, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["ball" ] },
		"goalPost" : { "radius" : 5, "invMass" : 0, "bCoef" : 1, "cGroup" : ["ball" ] },
		"rightNet" : { "radius" : 0, "invMass" : 1, "bCoef" : 0, "cGroup" : ["ball","c3" ] },
		"leftNet" : { "radius" : 0, "invMass" : 1, "bCoef" : 0, "cGroup" : ["ball","c2" ] },
		"stanchion" : { "radius" : 3, "invMass" : 0, "bCoef" : 3, "cMask" : ["none" ] },
		"cornerflag" : { "radius" : 3, "invMass" : 0, "bCoef" : 0.2, "color" : "FFFF00", "cMask" : ["ball" ] },
		"reargoalNetleft" : { "vis" : true, "bCoef" : 0.1, "cMask" : ["ball","red","blue" ], "curve" : 10, "color" : "C7E6BD" },
		"reargoalNetright" : { "vis" : true, "bCoef" : 0.1, "cMask" : ["ball","red","blue" ], "curve" : -10, "color" : "C7E6BD" },
		"sidegoalNet" : { "vis" : true, "bCoef" : 1, "cMask" : ["ball","red","blue" ], "color" : "C7E6BD" },
		"kickOffBarrier" : { "vis" : false, "bCoef" : 0.1, "cGroup" : ["redKO","blueKO" ], "cMask" : ["red","blue" ] },
		"line" : { "vis" : true, "cMask" : [ ], "color" : "C7E6BD" }

	},


"joints":[{"d0":16,"d1":17,"strength":"rigid","color":"f5204b","length":null},{"d0":18,"d1":19,"strength":"rigid","color":"00e1ff","length":null},{"d0":20,"d1":21,"strength":"rigid","color":"f5204b","length":null},{"d0":22,"d1":23,"strength":"rigid","color":"00e1ff","length":null}

	],

	"canBeStored" : false
}


`;
	RSRMap = true;

	return EntrenamientoRealSoccer;
}




function getCampeonesMap() {
	var CampeonesMap = `{

	"name" : "🏆 CAMPEONES 🌿⭐🌿",

	"width" : 500,

	"height" : 150,

	"spawnDistance" : 170,

	"redSpawnPoints" : [
		[ -313.5, 31
		],
		[ -364.5, 31
		],
		[ -413.5, 31
		],
		[ -463.5, 31
		]

	],

	"blueSpawnPoints" : [
		[ 135.5, 131
		],
		[ 180.5, 131
		],
		[ 232.5, 131
		],
		[ 272.5, 131
		]

	],

	"bg" : { "color" : "375946" },

	"vertexes" : [
		/* 0 */ { "x" : 494.7861757312205, "y" : -7.309797894579809, "curve" : -50, "color" : "0f2027" },
		/* 1 */ { "x" : -497.2138242687795, "y" : -17.30979789457981, "curve" : -50, "color" : "112233" },
		/* 2 */ { "x" : 494.7861757312205, "y" : -9.309797894579809, "curve" : -50, "color" : "132434" },
		/* 3 */ { "x" : -497.2138242687795, "y" : -19.30979789457981, "curve" : -50, "color" : "152635" },
		/* 4 */ { "x" : 494.7861757312205, "y" : -11.309797894579809, "curve" : -50, "color" : "172836" },
		/* 5 */ { "x" : -497.2138242687795, "y" : -21.30979789457981, "curve" : -50, "color" : "193037" },
		/* 6 */ { "x" : 494.7861757312205, "y" : -13.309797894579809, "curve" : -50, "color" : "1b4048" },
		/* 7 */ { "x" : -497.2138242687795, "y" : -23.30979789457981, "curve" : -50, "color" : "1d5159" },
		/* 8 */ { "x" : 494.7861757312205, "y" : -15.309797894579809, "curve" : -50, "color" : "1f626a" },
		/* 9 */ { "x" : -497.2138242687795, "y" : -25.30979789457981, "curve" : -50, "color" : "21737b" },
		/* 10 */ { "x" : 494.7861757312205, "y" : -17.30979789457981, "curve" : -50, "color" : "23848c" },
		/* 11 */ { "x" : -497.2138242687795, "y" : -27.30979789457981, "curve" : -50, "color" : "25959d" },
		/* 12 */ { "x" : 494.7861757312205, "y" : -19.30979789457981, "curve" : -50, "color" : "27a6ae" },
		/* 13 */ { "x" : -497.2138242687795, "y" : -29.30979789457981, "curve" : -50, "color" : "29b7bf" },
		/* 14 */ { "x" : 494.7861757312205, "y" : -21.30979789457981, "curve" : -50, "color" : "2bc8d0" },
		/* 15 */ { "x" : -497.2138242687795, "y" : -31.30979789457981, "curve" : -50, "color" : "2dd9e1" },
		/* 16 */ { "x" : 494.7861757312205, "y" : -23.30979789457981, "curve" : -50, "color" : "2feaf2" },
		/* 17 */ { "x" : -497.2138242687795, "y" : -33.30979789457981, "curve" : -50, "color" : "31fbff" },
		/* 18 */ { "x" : 494.7861757312205, "y" : -25.30979789457981, "curve" : -50, "color" : "33fbff" },
		/* 19 */ { "x" : -497.2138242687795, "y" : -35.30979789457981, "curve" : -50, "color" : "35fbff" },
		/* 20 */ { "x" : 494.7861757312205, "y" : -27.30979789457981, "curve" : -50, "color" : "37fbff" },
		/* 21 */ { "x" : -497.2138242687795, "y" : -37.30979789457981, "curve" : -50, "color" : "ffffff" },
		/* 22 */ { "x" : 494.7861757312205, "y" : -29.30979789457981, "curve" : -50, "color" : "ffffff" },
		/* 23 */ { "x" : -497.2138242687795, "y" : -39.30979789457981, "curve" : -50, "color" : "ffffff" },
		/* 24 */ { "x" : 494.7861757312205, "y" : -31.30979789457981, "curve" : -50, "color" : "ffffff" },
		/* 25 */ { "x" : -497.2138242687795, "y" : -41.30979789457981, "curve" : -50, "color" : "ffffff" },
		/* 26 */ { "x" : 494.7861757312205, "y" : -3.309797894579809, "curve" : -50, "color" : "ffffff" },
		/* 27 */ { "x" : -497.2138242687795, "y" : -13.309797894579809, "curve" : -50, "color" : "ffffff" },
		/* 28 */ { "x" : 494.7861757312205, "y" : -5.309797894579809, "curve" : -50, "color" : "ffffff" },
		/* 29 */ { "x" : -497.2138242687795, "y" : -15.309797894579809, "curve" : -50, "color" : "ffffff" },
		/* 30 */ { "x" : 494.7861757312205, "y" : -1.309797894579809, "curve" : -50, "color" : "ffffff" },
		/* 31 */ { "x" : -497.2138242687795, "y" : -11.309797894579809, "curve" : -50, "color" : "ffffff" },
		/* 32 */ { "x" : 494.7861757312205, "y" : 0.690202105420191, "curve" : -50, "color" : "ffffff" },
		/* 33 */ { "x" : -497.2138242687795, "y" : -9.309797894579809, "curve" : -50, "color" : "ffffff" },
		/* 34 */ { "x" : 494.7861757312205, "y" : 2.690202105420191, "curve" : -50, "color" : "ffffff" },
		/* 35 */ { "x" : -497.2138242687795, "y" : -7.309797894579809, "curve" : -50, "color" : "ffffff" },
		/* 36 */ { "x" : 494.7861757312205, "y" : 4.690202105420191, "curve" : -50, "color" : "ffffff" },
		/* 37 */ { "x" : -497.2138242687795, "y" : -5.309797894579809, "curve" : -50, "color" : "ffffff" },
		/* 38 */ { "x" : 494.7861757312205, "y" : 6.690202105420191, "curve" : -50, "color" : "ffffff" },
		/* 39 */ { "x" : -497.2138242687795, "y" : -3.309797894579809, "curve" : -50, "color" : "ffffff" },
		/* 40 */ { "x" : 494.7861757312205, "y" : 8.690202105420191, "curve" : -50, "color" : "ffffff" },
		/* 41 */ { "x" : -497.2138242687795, "y" : -1.309797894579809, "curve" : -50, "color" : "ffffff" },
		/* 42 */ { "x" : -500, "y" : 57.56164977325504, "curve" : 0 },
		/* 43 */ { "x" : 500, "y" : 57.56164977325504, "curve" : 0 },
		/* 44 */ { "x" : -500, "y" : 59.56164977325504, "curve" : 0 },
		/* 45 */ { "x" : 500, "y" : 59.56164977325504, "curve" : 0 },
		/* 46 */ { "x" : -500, "y" : 61.56164977325504, "curve" : 0 },
		/* 47 */ { "x" : 500, "y" : 61.56164977325504, "curve" : 0 },
		/* 48 */ { "x" : -500, "y" : 63.56164977325504, "curve" : 0 },
		/* 49 */ { "x" : 500, "y" : 63.56164977325504, "curve" : 0 },
		/* 50 */ { "x" : -500, "y" : 65.56164977325504, "curve" : 0 },
		/* 51 */ { "x" : 500, "y" : 65.56164977325504, "curve" : 0 },
		/* 52 */ { "x" : -500, "y" : 67.56164977325504, "curve" : 0 },
		/* 53 */ { "x" : 500, "y" : 67.56164977325504, "curve" : 0 },
		/* 54 */ { "x" : -500, "y" : 69.56164977325504, "curve" : 0 },
		/* 55 */ { "x" : 500, "y" : 69.56164977325504, "curve" : 0 },
		/* 56 */ { "x" : -500, "y" : -319.43835022674494, "vis" : false },
		/* 57 */ { "x" : -500, "y" : 160.56164977325506, "vis" : false },
		/* 58 */ { "x" : 500, "y" : 160.56164977325506, "vis" : false },
		/* 59 */ { "x" : 500, "y" : -363.43835022674494, "vis" : false },
		/* 60 */ { "x" : -207, "y" : 43.561649773255034, "curve" : 0, "color" : "23357e" },
		/* 61 */ { "x" : 93, "y" : 43.561649773255034, "curve" : 0, "color" : "23357e" },
		/* 62 */ { "x" : -207, "y" : 45.561649773255034, "curve" : 0, "color" : "23357e" },
		/* 63 */ { "x" : 93, "y" : 45.561649773255034, "curve" : 0, "color" : "23357e" },
		/* 64 */ { "x" : -207, "y" : 47.56164977325504, "curve" : 0, "color" : "23357e" },
		/* 65 */ { "x" : 93, "y" : 47.56164977325504, "curve" : 0, "color" : "23357e" },
		/* 66 */ { "x" : -207, "y" : 49.56164977325504, "curve" : 0, "color" : "23357e" },
		/* 67 */ { "x" : 93, "y" : 49.56164977325504, "curve" : 0, "color" : "23357e" },
		/* 68 */ { "x" : -207, "y" : 51.56164977325504, "curve" : 0, "color" : "23357e" },
		/* 69 */ { "x" : 93, "y" : 51.56164977325504, "curve" : 0, "color" : "23357e" },
		/* 70 */ { "x" : -207, "y" : 53.56164977325504, "curve" : 0, "color" : "23357e" },
		/* 71 */ { "x" : 93, "y" : 53.56164977325504, "curve" : 0, "color" : "23357e" },
		/* 72 */ { "x" : -207, "y" : 55.56164977325504, "curve" : 0, "color" : "23357e" },
		/* 73 */ { "x" : 93, "y" : 55.56164977325504, "curve" : 0, "color" : "23357e" },
		/* 74 */ { "x" : -120, "y" : 30.561649773255034, "curve" : 0, "color" : "27346a" },
		/* 75 */ { "x" : 1, "y" : 30.561649773255034, "curve" : 0, "color" : "27346a" },
		/* 76 */ { "x" : -120, "y" : 32.561649773255034, "curve" : 0, "color" : "27346a" },
		/* 77 */ { "x" : 1, "y" : 32.561649773255034, "curve" : 0, "color" : "27346a" },
		/* 78 */ { "x" : -120, "y" : 34.561649773255034, "curve" : 0, "color" : "27346a" },
		/* 79 */ { "x" : 1, "y" : 34.561649773255034, "curve" : 0, "color" : "27346a" },
		/* 80 */ { "x" : -120, "y" : 36.561649773255034, "curve" : 0, "color" : "27346a" },
		/* 81 */ { "x" : 1, "y" : 36.561649773255034, "curve" : 0, "color" : "27346a" },
		/* 82 */ { "x" : -120, "y" : 38.561649773255034, "curve" : 0, "color" : "27346a" },
		/* 83 */ { "x" : 1, "y" : 38.561649773255034, "curve" : 0, "color" : "27346a" },
		/* 84 */ { "x" : -120, "y" : 40.561649773255034, "curve" : 0, "color" : "27346a" },
		/* 85 */ { "x" : 1, "y" : 40.561649773255034, "curve" : 0, "color" : "27346a" },
		/* 86 */ { "x" : -120, "y" : 42.561649773255034, "curve" : 0, "color" : "27346a" },
		/* 87 */ { "x" : 1, "y" : 42.561649773255034, "curve" : 0, "color" : "27346a" },
		/* 88 */ { "x" : -500, "y" : 70.56164977325504, "curve" : 0 },
		/* 89 */ { "x" : 500, "y" : 70.56164977325504, "curve" : 0 },
		/* 90 */ { "x" : -500, "y" : 72.56164977325504, "curve" : 0 },
		/* 91 */ { "x" : 500, "y" : 72.56164977325504, "curve" : 0 },
		/* 92 */ { "x" : -500, "y" : 74.56164977325504, "curve" : 0 },
		/* 93 */ { "x" : 500, "y" : 74.56164977325504, "curve" : 0 },
		/* 94 */ { "x" : -500, "y" : 76.56164977325504, "curve" : 0 },
		/* 95 */ { "x" : 500, "y" : 76.56164977325504, "curve" : 0 },
		/* 96 */ { "x" : -500, "y" : 78.56164977325504, "curve" : 0 },
		/* 97 */ { "x" : 500, "y" : 78.56164977325504, "curve" : 0 },
		/* 98 */ { "x" : -500, "y" : 80.56164977325504, "curve" : 0 },
		/* 99 */ { "x" : 500, "y" : 80.56164977325504, "curve" : 0 },
		/* 100 */ { "x" : -500, "y" : 82.56164977325504, "curve" : 0 },
		/* 101 */ { "x" : 500, "y" : 82.56164977325504, "curve" : 0 },
		/* 102 */ { "x" : -500, "y" : 83.56164977325504, "curve" : 0 },
		/* 103 */ { "x" : 500, "y" : 83.56164977325504, "curve" : 0 },
		/* 104 */ { "x" : -500, "y" : 85.56164977325504, "curve" : 0 },
		/* 105 */ { "x" : 500, "y" : 85.56164977325504, "curve" : 0 },
		/* 106 */ { "x" : -500, "y" : 87.56164977325504, "curve" : 0 },
		/* 107 */ { "x" : 500, "y" : 87.56164977325504, "curve" : 0 },
		/* 108 */ { "x" : -500, "y" : 89.56164977325504, "curve" : 0 },
		/* 109 */ { "x" : 500, "y" : 89.56164977325504, "curve" : 0 },
		/* 110 */ { "x" : -500, "y" : 91.56164977325504, "curve" : 0 },
		/* 111 */ { "x" : 500, "y" : 91.56164977325504, "curve" : 0 },
		/* 112 */ { "x" : -500, "y" : 93.56164977325504, "curve" : 0 },
		/* 113 */ { "x" : 500, "y" : 93.56164977325504, "curve" : 0 },
		/* 114 */ { "x" : -500, "y" : 95.56164977325504, "curve" : 0, "_selected" : "segment" },
		/* 115 */ { "x" : 500, "y" : 95.56164977325504, "curve" : 0, "_selected" : "segment" },
		/* 116 */ { "x" : -502, "y" : -319.43835022674494, "vis" : false },
		/* 117 */ { "x" : -502, "y" : 160.56164977325506, "vis" : false },
		/* 118 */ { "x" : 502, "y" : 160.56164977325506, "vis" : false },
		/* 119 */ { "x" : 502, "y" : -363.43835022674494, "vis" : false },
		/* 120 */ { "x" : -504, "y" : -319.43835022674494, "vis" : false },
		/* 121 */ { "x" : -504, "y" : 160.56164977325506, "vis" : false },
		/* 122 */ { "x" : 504, "y" : 160.56164977325506, "vis" : false },
		/* 123 */ { "x" : 504, "y" : -363.43835022674494, "vis" : false },
		/* 124 */ { "x" : -500, "y" : 162.56164977325506, "vis" : false },
		/* 125 */ { "x" : 500, "y" : 162.56164977325506, "vis" : false },
		/* 126 */ { "x" : -500, "y" : 164.56164977325506, "vis" : false },
		/* 127 */ { "x" : 500, "y" : 164.56164977325506, "vis" : false },
		/* 128 */ { "x" : -127.26222973756316, "y" : -132.3848081877582, "color" : "1b254e" },
		/* 129 */ { "x" : -139.78385080553804, "y" : -131.61186861566097, "color" : "1b254e" },
		/* 130 */ { "x" : -138.2435726727356, "y" : -106.65936286426175, "color" : "1b254e" },
		/* 131 */ { "x" : -125.72195160476073, "y" : -107.432302436359, "color" : "1b254e" },
		/* 132 */ { "x" : -115.19485069348019, "y" : -106.57926840135603, "color" : "1b254e" },
		/* 133 */ { "x" : -116.91996220221891, "y" : -134.52607484292315, "color" : "1b254e" },
		/* 134 */ { "x" : -102.6732296255053, "y" : -107.35220797345328, "color" : "1b254e" },
		/* 135 */ { "x" : -104.39834113424402, "y" : -135.2990144150204, "color" : "1b254e" },
		/* 136 */ { "x" : -116.05740644784956, "y" : -120.55267162213961, "color" : "1b254e" },
		/* 137 */ { "x" : -103.53578537987467, "y" : -121.32561119423683, "color" : "1b254e" },
		/* 138 */ { "x" : -92.09613786717209, "y" : -107.86943339391858, "color" : "1b254e" },
		/* 139 */ { "x" : -86.67869444925958, "y" : -137.0413105061603, "color" : "1b254e" },
		/* 140 */ { "x" : -79.55610603843748, "y" : -108.23825785946958, "color" : "1b254e" },
		/* 141 */ { "x" : -90.37291322018731, "y" : -119.44526195050672, "color" : "1b254e" },
		/* 142 */ { "x" : -83.19191267202388, "y" : -119.6564678489821, "color" : "1b254e" },
		/* 143 */ { "x" : -69.12077904029292, "y" : -109.04539545799422, "color" : "1b254e" },
		/* 144 */ { "x" : -69.94395248514581, "y" : -137.03329258299613, "color" : "1b254e" },
		/* 145 */ { "x" : -63.08490429293134, "y" : -117.19060736896593, "color" : "1b254e" },
		/* 146 */ { "x" : -57.40392065641119, "y" : -137.4021170485471, "color" : "1b254e" },
		/* 147 */ { "x" : -56.580747211558275, "y" : -109.41421992354522, "color" : "1b254e" },
		/* 148 */ { "x" : -42.99210757349505, "y" : -111.1687489274483, "color" : "1b254e" },
		/* 149 */ { "x" : -42.99210757349505, "y" : -139.1687489274483, "color" : "1b254e" },
		/* 150 */ { "x" : -32.170506543350655, "y" : -127.3206919773853, "color" : "1b254e" },
		/* 151 */ { "x" : -43.847753708043655, "y" : -124.31826551683399, "color" : "1b254e" },
		/* 152 */ { "x" : -22.08301666440413, "y" : -111.1687489274483, "color" : "1b254e" },
		/* 153 */ { "x" : -22.08301666440413, "y" : -139.1687489274483, "color" : "1b254e" },
		/* 154 */ { "x" : -7.744154865484049, "y" : -138.78913817998966, "color" : "1b254e" },
		/* 155 */ { "x" : -9.172540581262744, "y" : -113.82997725164593, "color" : "1b254e" },
		/* 156 */ { "x" : 3.352420175506116, "y" : -113.1131873288188, "color" : "1b254e" },
		/* 157 */ { "x" : 4.78080589128481, "y" : -138.0723482571625, "color" : "1b254e" },
		/* 158 */ { "x" : 13.704184329866749, "y" : -111.0183127374289, "color" : "1b254e" },
		/* 159 */ { "x" : 15.303976331538887, "y" : -138.97257297717385, "color" : "1b254e" },
		/* 160 */ { "x" : 26.229145086635608, "y" : -110.30152281460177, "color" : "1b254e" },
		/* 161 */ { "x" : 27.828937088307747, "y" : -138.25578305434675, "color" : "1b254e" },
		/* 162 */ { "x" : 37.95992786504899, "y" : -114.95818205451785, "color" : "1b254e" },
		/* 163 */ { "x" : 48.770332351744344, "y" : -121.76104744662534, "color" : "1b254e" },
		/* 164 */ { "x" : 41.5368568277516, "y" : -129.14249252312544, "color" : "1b254e" },
		/* 165 */ { "x" : 53.42996588548224, "y" : -130.771544446721, "color" : "1b254e" },
		/* 166 */ { "x" : -127.26222973756316, "y" : -135.88575055933103 },
		/* 167 */ { "x" : -139.78385080553804, "y" : -135.1128109872338 },
		/* 168 */ { "x" : -138.2435726727356, "y" : -110.16030523583457 },
		/* 169 */ { "x" : -125.72195160476073, "y" : -110.93324480793179 },
		/* 170 */ { "x" : -115.19485069348019, "y" : -110.08021077292885 },
		/* 171 */ { "x" : -116.9199622022189, "y" : -138.02701721449597 },
		/* 172 */ { "x" : -102.6732296255053, "y" : -110.85315034502607 },
		/* 173 */ { "x" : -104.39834113424402, "y" : -138.7999567865932 },
		/* 174 */ { "x" : -116.05740644784956, "y" : -124.05361399371243 },
		/* 175 */ { "x" : -103.53578537987467, "y" : -124.82655356580962 },
		/* 176 */ { "x" : -92.09613786717209, "y" : -111.3703757654914 },
		/* 177 */ { "x" : -86.67869444925958, "y" : -140.54225287773312 },
		/* 178 */ { "x" : -79.55610603843748, "y" : -111.7392002310424 },
		/* 179 */ { "x" : -90.37291322018731, "y" : -122.94620432207954 },
		/* 180 */ { "x" : -83.19191267202388, "y" : -123.1574102205549 },
		/* 181 */ { "x" : -69.12077904029292, "y" : -112.54633782956704 },
		/* 182 */ { "x" : -69.94395248514581, "y" : -140.53423495456894 },
		/* 183 */ { "x" : -63.08490429293134, "y" : -120.69154974053875 },
		/* 184 */ { "x" : -57.40392065641119, "y" : -140.90305942011992 },
		/* 185 */ { "x" : -56.580747211558275, "y" : -112.91516229511804 },
		/* 186 */ { "x" : -42.99210757349505, "y" : -114.66969129902112 },
		/* 187 */ { "x" : -42.99210757349505, "y" : -142.6696912990211 },
		/* 188 */ { "x" : -32.170506543350655, "y" : -130.82163434895813 },
		/* 189 */ { "x" : -43.847753708043655, "y" : -127.81920788840681 },
		/* 190 */ { "x" : -22.083016664404127, "y" : -114.66969129902112 },
		/* 191 */ { "x" : -22.083016664404127, "y" : -142.6696912990211 },
		/* 192 */ { "x" : -7.744154865484045, "y" : -142.29008055156243 },
		/* 193 */ { "x" : -9.17254058126274, "y" : -117.33091962321875 },
		/* 194 */ { "x" : 3.3524201755061185, "y" : -116.61412970039162 },
		/* 195 */ { "x" : 4.780805891284814, "y" : -141.57329062873532 },
		/* 196 */ { "x" : 13.704184329866752, "y" : -114.51925510900172 },
		/* 197 */ { "x" : 15.303976331538891, "y" : -142.47351534874667 },
		/* 198 */ { "x" : 26.22914508663561, "y" : -113.80246518617459 },
		/* 199 */ { "x" : 27.82893708830775, "y" : -141.7567254259195 },
		/* 200 */ { "x" : 37.959927865048996, "y" : -118.45912442609064 },
		/* 201 */ { "x" : 48.770332351744344, "y" : -125.26198981819813 },
		/* 202 */ { "x" : 41.536856827751606, "y" : -132.64343489469826 },
		/* 203 */ { "x" : 53.42996588548225, "y" : -134.27248681829377 }

	],

	"segments" : [
		{ "v0" : 0, "v1" : 1, "curve" : -50, "color" : "0f2027", "y" : 30 },
		{ "v0" : 2, "v1" : 3, "curve" : -50, "color" : "001a26", "y" : 28 },
		{ "v0" : 4, "v1" : 5, "curve" : -50, "color" : "001c2e", "y" : 26 },
		{ "v0" : 6, "v1" : 7, "curve" : -50, "color" : "001d3c", "y" : 24 },
		{ "v0" : 8, "v1" : 9, "curve" : -50, "color" : "001e4a", "y" : 22 },
		{ "v0" : 10, "v1" : 11, "curve" : -50, "color" : "001f58", "y" : 20 },
		{ "v0" : 12, "v1" : 13, "curve" : -50, "color" : "002047", "y" : 18 },
		{ "v0" : 14, "v1" : 15, "curve" : -50, "color" : "002250", "y" : 16 },
		{ "v0" : 16, "v1" : 17, "curve" : -50, "color" : "002359", "y" : 14 },
		{ "v0" : 18, "v1" : 19, "curve" : -50, "color" : "002462", "y" : 12 },
		{ "v0" : 20, "v1" : 21, "curve" : -50, "color" : "00256b", "y" : 10 },
		{ "v0" : 22, "v1" : 23, "curve" : -50, "color" : "002774", "y" : 8 },
		{ "v0" : 24, "v1" : 25, "curve" : -50, "color" : "00287d", "y" : 6 },
		{ "v0" : 26, "v1" : 27, "curve" : -50, "color" : "002986", "y" : 34 },
		{ "v0" : 28, "v1" : 29, "curve" : -50, "color" : "002a8f", "y" : 32 },
		{ "v0" : 30, "v1" : 31, "curve" : -50, "color" : "002b98", "y" : 36 },
		{ "v0" : 32, "v1" : 33, "curve" : -50, "color" : "002ca1", "y" : 38 },
		{ "v0" : 34, "v1" : 35, "curve" : -50, "color" : "002daf", "y" : 40 },
		{ "v0" : 36, "v1" : 37, "curve" : -50, "color" : "002eb7", "y" : 42 },
		{ "v0" : 38, "v1" : 39, "curve" : -50, "color" : "002fc0", "y" : 44 },
		{ "v0" : 40, "v1" : 41, "curve" : -50, "color" : "0030c9", "y" : 46 },
	{ "v0" : 42, "v1" : 43, "curve" : 0, "color" : "001a26", "y" : 125 },
	{ "v0" : 44, "v1" : 45, "curve" : 0, "color" : "001c2e", "y" : 127 },
	{ "v0" : 46, "v1" : 47, "curve" : 0, "color" : "001d3c", "y" : 129 },
	{ "v0" : 48, "v1" : 49, "curve" : 0, "color" : "001e4a", "y" : 131 },
	{ "v0" : 50, "v1" : 51, "curve" : 0, "color" : "001f58", "y" : 133 },
	{ "v0" : 52, "v1" : 53, "curve" : 0, "color" : "002047", "y" : 135 },
	{ "v0" : 54, "v1" : 55, "curve" : 0, "color" : "002250", "y" : 137 },
	{ "v0" : 56, "v1" : 57, "curve" : 0, "vis" : false, "color" : "001a26", "x" : -500 },
	{ "v0" : 58, "v1" : 59, "curve" : 0, "vis" : false, "color" : "001a26", "x" : 500 },
	{ "v0" : 60, "v1" : 61, "curve" : 0, "color" : "00203e", "y" : 125 },
	{ "v0" : 62, "v1" : 63, "curve" : 0, "color" : "002249", "y" : 127 },
	{ "v0" : 64, "v1" : 65, "curve" : 0, "color" : "002554", "y" : 129 },
	{ "v0" : 66, "v1" : 67, "curve" : 0, "color" : "00275f", "y" : 131 },
	{ "v0" : 68, "v1" : 69, "curve" : 0, "color" : "002969", "y" : 133 },
	{ "v0" : 70, "v1" : 71, "curve" : 0, "color" : "002b74", "y" : 135 },
	{ "v0" : 72, "v1" : 73, "curve" : 0, "color" : "002d7f", "y" : 137 },
	{ "v0" : 74, "v1" : 75, "curve" : 0, "color" : "001f58", "y" : 125 },
	{ "v0" : 76, "v1" : 77, "curve" : 0, "color" : "002047", "y" : 127 },
	{ "v0" : 78, "v1" : 79, "curve" : 0, "color" : "002250", "y" : 129 },
	{ "v0" : 80, "v1" : 81, "curve" : 0, "color" : "002459", "y" : 131 },
	{ "v0" : 82, "v1" : 83, "curve" : 0, "color" : "002663", "y" : 133 },
	{ "v0" : 84, "v1" : 85, "curve" : 0, "color" : "00286e", "y" : 135 },
	{ "v0" : 86, "v1" : 87, "curve" : 0, "color" : "002a79", "y" : 137 },
	{ "v0" : 88, "v1" : 89, "curve" : 0, "color" : "001a26", "y" : 125 },
	{ "v0" : 90, "v1" : 91, "curve" : 0, "color" : "001c2e", "y" : 127 },
	{ "v0" : 92, "v1" : 93, "curve" : 0, "color" : "001d3c", "y" : 129 },
	{ "v0" : 94, "v1" : 95, "curve" : 0, "color" : "001e4a", "y" : 131 },
	{ "v0" : 96, "v1" : 97, "curve" : 0, "color" : "001f58", "y" : 133 },
	{ "v0" : 98, "v1" : 99, "curve" : 0, "color" : "002047", "y" : 135 },
	{ "v0" : 100, "v1" : 101, "curve" : 0, "color" : "002250", "y" : 137 },
	{ "v0" : 102, "v1" : 103, "curve" : 0, "color" : "002459", "y" : 125 },
	{ "v0" : 104, "v1" : 105, "curve" : 0, "color" : "002663", "y" : 127 },
	{ "v0" : 106, "v1" : 107, "curve" : 0, "color" : "00286e", "y" : 129 },
	{ "v0" : 108, "v1" : 109, "curve" : 0, "color" : "002a79", "y" : 131 },
	{ "v0" : 110, "v1" : 111, "curve" : 0, "color" : "002c83", "y" : 133 },
	{ "v0" : 112, "v1" : 113, "curve" : 0, "color" : "002e8e", "y" : 135 },
	{ "v0" : 114, "v1" : 115, "curve" : 0, "color" : "003097", "y" : 137, "_selected" : true },
	{ "v0" : 57, "v1" : 58, "curve" : 0, "vis" : false, "color" : "001a26", "y" : 228 },
	{ "v0" : 116, "v1" : 117, "curve" : 0, "vis" : false, "color" : "001a26", "x" : -502 },
	{ "v0" : 118, "v1" : 119, "curve" : 0, "vis" : false, "color" : "001a26", "x" : 502 },
	{ "v0" : 120, "v1" : 121, "curve" : 0, "vis" : false, "color" : "001a26", "x" : -504 },
	{ "v0" : 122, "v1" : 123, "curve" : 0, "vis" : false, "color" : "001a26", "x" : 504 },
	{ "v0" : 124, "v1" : 125, "curve" : 0, "vis" : false, "color" : "001a26", "y" : 230 },
	{ "v0" : 126, "v1" : 127, "curve" : 0, "vis" : false, "color" : "001a26", "y" : 232 },
		{ "v0" : 128, "v1" : 129, "curve" : 0, "color" : "1b254e", "y" : -237 },
		{ "v0" : 129, "v1" : 130, "curve" : 0, "color" : "1b254e", "x" : 0 },
		{ "v0" : 130, "v1" : 131, "curve" : 0, "color" : "1b254e", "y" : -212 },
		{ "v0" : 132, "v1" : 133, "curve" : 0, "color" : "1b254e", "x" : 22 },
		{ "v0" : 134, "v1" : 135, "curve" : 0, "color" : "1b254e", "x" : 34 },
		{ "v0" : 136, "v1" : 137, "curve" : 0, "color" : "1b254e", "y" : -224.5 },
		{ "v0" : 138, "v1" : 139, "curve" : 0, "color" : "1b254e" },
		{ "v0" : 139, "v1" : 140, "curve" : 0, "color" : "1b254e" },
		{ "v0" : 141, "v1" : 142, "curve" : 0, "color" : "1b254e" },
		{ "v0" : 143, "v1" : 144, "curve" : 0, "color" : "1b254e", "x" : 66 },
		{ "v0" : 144, "v1" : 145, "curve" : 0, "color" : "1b254e" },
		{ "v0" : 145, "v1" : 146, "curve" : 0, "color" : "1b254e" },
		{ "v0" : 146, "v1" : 147, "curve" : 0, "color" : "1b254e", "x" : 78 },
		{ "v0" : 148, "v1" : 149, "curve" : 0, "color" : "1b254e", "x" : 88 },
		{ "v0" : 149, "v1" : 150, "curve" : 109.07645543215052, "color" : "1b254e" },
		{ "v0" : 150, "v1" : 151, "curve" : 90.20791541461715, "color" : "1b254e" },
		{ "v0" : 152, "v1" : 153, "curve" : 0, "color" : "1b254e", "x" : 108 },
		{ "v0" : 154, "v1" : 155, "curve" : 0, "color" : "1b254e", "x" : 118 },
		{ "v0" : 155, "v1" : 156, "curve" : 0, "color" : "1b254e", "y" : -212 },
		{ "v0" : 156, "v1" : 157, "curve" : 0, "color" : "1b254e", "x" : 130 },
		{ "v0" : 157, "v1" : 154, "curve" : 0, "color" : "1b254e", "y" : -237 },
		{ "v0" : 158, "v1" : 159, "curve" : 0, "color" : "1b254e", "x" : 140 },
		{ "v0" : 159, "v1" : 160, "curve" : 0, "color" : "1b254e" },
		{ "v0" : 160, "v1" : 161, "curve" : 0, "color" : "1b254e", "x" : 152 },
		{ "v0" : 162, "v1" : 163, "curve" : -210.20993926461884, "color" : "1b254e" },
		{ "v0" : 163, "v1" : 164, "curve" : 141.85752234867013, "color" : "1b254e" },
		{ "v0" : 164, "v1" : 165, "curve" : 170.7328685934713, "color" : "1b254e" },
		{ "v0" : 166, "v1" : 167, "curve" : 0, "color" : "f1cc7b", "y" : -237 },
		{ "v0" : 167, "v1" : 168, "curve" : 0, "color" : "f1cc7b", "x" : 0 },
		{ "v0" : 168, "v1" : 169, "curve" : 0, "color" : "f1cc7b", "y" : -212 },
		{ "v0" : 170, "v1" : 171, "curve" : 0, "color" : "f1cc7b", "x" : 22 },
		{ "v0" : 172, "v1" : 173, "curve" : 0, "color" : "f1cc7b", "x" : 34 },
		{ "v0" : 174, "v1" : 175, "curve" : 0, "color" : "f1cc7b", "y" : -224.5 },
		{ "v0" : 176, "v1" : 177, "curve" : 0, "color" : "f1cc7b" },
		{ "v0" : 177, "v1" : 178, "curve" : 0, "color" : "f1cc7b" },
		{ "v0" : 179, "v1" : 180, "curve" : 0, "color" : "f1cc7b" },
		{ "v0" : 181, "v1" : 182, "curve" : 0, "color" : "f1cc7b", "x" : 66 },
		{ "v0" : 182, "v1" : 183, "curve" : 0, "color" : "f1cc7b" },
		{ "v0" : 183, "v1" : 184, "curve" : 0, "color" : "f1cc7b" },
		{ "v0" : 184, "v1" : 185, "curve" : 0, "color" : "f1cc7b", "x" : 78 },
		{ "v0" : 186, "v1" : 187, "curve" : 0, "color" : "f1cc7b", "x" : 88 },
		{ "v0" : 187, "v1" : 188, "curve" : 109.07645543215052, "color" : "f1cc7b" },
		{ "v0" : 188, "v1" : 189, "curve" : 90.20791541461715, "color" : "f1cc7b" },
		{ "v0" : 190, "v1" : 191, "curve" : 0, "color" : "f1cc7b", "x" : 108 },
		{ "v0" : 192, "v1" : 193, "curve" : 0, "color" : "f1cc7b", "x" : 118 },
		{ "v0" : 193, "v1" : 194, "curve" : 0, "color" : "f1cc7b", "y" : -212 },
		{ "v0" : 194, "v1" : 195, "curve" : 0, "color" : "f1cc7b", "x" : 130 },
		{ "v0" : 195, "v1" : 192, "curve" : 0, "color" : "f1cc7b", "y" : -237 },
		{ "v0" : 196, "v1" : 197, "curve" : 0, "color" : "f1cc7b", "x" : 140 },
		{ "v0" : 197, "v1" : 198, "curve" : 0, "color" : "f1cc7b" },
		{ "v0" : 198, "v1" : 199, "curve" : 0, "color" : "f1cc7b", "x" : 152 },
		{ "v0" : 200, "v1" : 201, "curve" : -210.20993926461884, "color" : "f1cc7b" },
		{ "v0" : 201, "v1" : 202, "curve" : 141.85752234867013, "color" : "f1cc7b" },
		{ "v0" : 202, "v1" : 203, "curve" : 170.7328685934713, "color" : "f1cc7b" }

	],

	"goals" : [
		

	],

	"discs" : [
		{ "radius" : 2, "invMass" : 1.5, "pos" : [-555,-555.5984 ], "color" : "FFFFFF", "bCoef" : 0.4, "cGroup" : ["ball","kick","score" ], "damping" : 0.99 },
		{ "radius" : 9, "pos" : [-58.49839743589746,17.91261131171658 ], "color" : "42804f", "bCoef" : 0, "cMask" : ["wall","red" ] },
		{ "radius" : 9, "pos" : [-58.49839743589746,13.16902156812683 ], "color" : "f6b900", "bCoef" : 0, "cMask" : ["wall","red" ] },
		{ "radius" : 9, "pos" : [-58.49839743589746,7.9126113117165815 ], "color" : "42804f", "bCoef" : 0, "cMask" : ["wall","red" ] },
		{ "radius" : 14.3, "pos" : [-58.49839743589746,-3.83097843187317 ], "color" : "f6b900", "bCoef" : 0, "cMask" : ["wall","red" ] }

	],

	"joints" : [
		{ "d0" : 1, "d1" : 2, "color" : "transparent", "length" : 2 },
		{ "d0" : 1, "d1" : 2, "color" : "transparent", "length" : 2 },
		{ "d0" : 2, "d1" : 3, "color" : "transparent", "length" : 2 },
		{ "d0" : 2, "d1" : 3, "color" : "transparent", "length" : 2 },
		{ "d0" : 3, "d1" : 4, "color" : "transparent", "length" : 4 },
		{ "d0" : 3, "d1" : 4, "color" : "transparent", "length" : 4 }

	],

	"planes" : [
		

	],

	"traits" : {
		"ballArea" : { "vis" : false, "bCoef" : 1, "cMask" : ["ball" ] },
		"goalPost" : { "radius" : 8, "invMass" : 0, "bCoef" : 0.5 },
		"goalNet" : { "vis" : true, "bCoef" : 0.1, "cMask" : ["ball" ] },
		"kickOffBarrier" : { "vis" : false, "bCoef" : 0.1, "cGroup" : ["redKO","blueKO" ], "cMask" : ["red","blue" ] }

	},

	"playerPhysics" : {
		"radius" : 15,
		"acceleration" : 0.3,
		"invMass" : 1,
		"damping" : 0.9,
		"kickingAcceleration" : 0.3,
		"kickStrength" : 5,
		"kickback" : 0,
		"cGroup" : [ "red", "blue"
		],
		"gravity" : [ 0, 0.14
		],
		"kickingDamping" : 0.96,
		"bCoef" : 0.5

	},

	"cameraWidth" : 0,

	"cameraHeight" : 0,

	"maxViewWidth" : 0,

	"cameraFollow" : "ball",

	"canBeStored" : true,

	"kickOffReset" : "partial",

	"ballPhysics" : "disc0"
}`;
	RSRMap = false;
isAFKpaused = true;
	return CampeonesMap;
}



function getRealSoccerMap2() {
	var realSoccerMap2 = `{

	"name" : "⚡️⚽️ Real Soccer ⚽️⚡️ by URSS",

	"width" : 1300,

	"height" : 710,

	"spawnDistance" : 560,

	"redSpawnPoints" : [
		[ -380, 0
		],
		[ -380, 0
		],
		[ -380, 0
		],
		[ -380, 0
		],
		[ -380, 0
		],
		[ -380, 0
		],
		[ -380, 0
		],
		[ -132, 681
		]

	],

	"blueSpawnPoints" : [
		[ 380, 0
		],
		[ 380, 0
		],
		[ 380, 0
		],
		[ 380, 0
		],
		[ 380, 0
		],
		[ 380, 0
		],
		[ 380, 0
		],
		[ 132, 681
		]

	],

	"bg" : { "type" : "grass", "width" : 1260, "height" : 650, "kickOffRadius" : 180, "cornerRadius" : 0, "color" : "43774e" },

	"playerPhysics" : {
		"bCoef" : 0.3,
		"invMass" : 0.5,
		"damping" : 0.96,
		"acceleration" : 0.12,
		"kickingAcceleration" : 0.07,
		"kickingDamping" : 0.96,
		"kickStrength" : 5.65

	},

	"ballPhysics" : {
		"radius" : 9,
		"bCoef" : 0.5,
		"invMass" : 1.05,
		"damping" : 0.99,
		"color" : "${PelotaRS}",
		"cMask" : [ "all"
		],
		"cGroup" : [ "ball"
		]

	},

	"vertexes" : [
		/* 0 */ { "x" : 0, "y" : 706, "trait" : "kickOffBarrier" },
		/* 1 */ { "x" : 0, "y" : 180, "trait" : "kickOffBarrier" },
		/* 2 */ { "x" : 0, "y" : -180, "trait" : "kickOffBarrier" },
		/* 3 */ { "x" : 0, "y" : -706, "trait" : "kickOffBarrier" },
		
		/* 4 */ { "x" : 1150, "y" : 320, "trait" : "line" },
		/* 5 */ { "x" : 840, "y" : 320, "trait" : "line" },
		/* 6 */ { "x" : 1150, "y" : -320, "trait" : "line" },
		/* 7 */ { "x" : 840, "y" : -320, "trait" : "line" },
		/* 8 */ { "x" : 1150, "y" : 180, "trait" : "line" },
		/* 9 */ { "x" : 1030, "y" : 180, "trait" : "line" },
		/* 10 */ { "x" : 1150, "y" : -180, "trait" : "line" },
		/* 11 */ { "x" : 1030, "y" : -180, "trait" : "line" },
		/* 12 */ { "x" : 840, "y" : -130, "trait" : "line", "curve" : -130 },
		/* 13 */ { "x" : 840, "y" : 130, "trait" : "line", "curve" : -130 },
		/* 14 */ { "x" : -1150, "y" : -320, "trait" : "line" },
		/* 15 */ { "x" : -840, "y" : -320, "trait" : "line" },
		/* 16 */ { "x" : -1150, "y" : 320, "trait" : "line" },
		/* 17 */ { "x" : -840, "y" : 320, "trait" : "line" },
		/* 18 */ { "x" : -1150, "y" : -175, "trait" : "line" },
		/* 19 */ { "x" : -1030, "y" : -175, "trait" : "line" },
		/* 20 */ { "x" : -1150, "y" : 175, "trait" : "line" },
		/* 21 */ { "x" : -1030, "y" : 175, "trait" : "line" },
		/* 22 */ { "x" : -840, "y" : 130, "trait" : "line", "curve" : -130 },
		/* 23 */ { "x" : -840, "y" : -130, "trait" : "line", "curve" : -130 },
		/* 24 */ { "x" : 935, "y" : 3, "trait" : "line" },
		/* 25 */ { "x" : 935, "y" : -3, "trait" : "line" },
		/* 26 */ { "x" : -935, "y" : 3, "trait" : "line" },
		/* 27 */ { "x" : -935, "y" : -3, "trait" : "line" },
		/* 28 */ { "x" : -1150, "y" : 570, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 29 */ { "x" : -1120, "y" : 600, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 30 */ { "x" : -1120, "y" : -600, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 31 */ { "x" : -1150, "y" : -570, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 32 */ { "x" : 1120, "y" : 600, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 33 */ { "x" : 1150, "y" : 570, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 34 */ { "x" : 1150, "y" : -570, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 35 */ { "x" : 1120, "y" : -600, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		
		/* 36 */ { "x" : 0, "y" : 180, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["blueKO" ], "trait" : "kickOffBarrier", "curve" : -180 },
		/* 37 */ { "x" : 0, "y" : -180, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO" ], "trait" : "kickOffBarrier", "curve" : 180 },
		/* 38 */ { "x" : 0, "y" : 180, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO" ], "trait" : "kickOffBarrier", "curve" : 180 },
		
		/* 39 */ { "x" : -1030, "y" : -40, "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "curve" : 70, "color" : "576C46", "vis" : false },
		/* 40 */ { "x" : -1030, "y" : 40, "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "curve" : 70, "color" : "576C46", "vis" : false },
		/* 41 */ { "x" : 1030, "y" : -40, "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "curve" : -70, "color" : "576C46", "vis" : false },
		/* 42 */ { "x" : 1030, "y" : 40, "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "curve" : -70, "color" : "576C46", "vis" : false },
		/* 43 */ { "x" : 1030, "y" : -40, "trait" : "line", "color" : "67875d" },
		/* 44 */ { "x" : 1030, "y" : 40, "trait" : "line", "color" : "67875d" },
		/* 45 */ { "x" : -1030, "y" : -40, "trait" : "line", "color" : "67875d" },
		/* 46 */ { "x" : -1030, "y" : 40, "trait" : "line", "color" : "67875d" },
		/* 47 */ { "x" : 0, "y" : 3, "trait" : "line" },
		/* 48 */ { "x" : 0, "y" : -3, "trait" : "line" },
		
		/* 49 */ { "x" : -1157, "y" : 605, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		/* 50 */ { "x" : -1157, "y" : 655, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		/* 51 */ { "x" : -1157, "y" : -655, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		/* 52 */ { "x" : -1157, "y" : -605, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		/* 53 */ { "x" : 1157, "y" : 605, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		/* 54 */ { "x" : 1157, "y" : 655, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		/* 55 */ { "x" : 1157, "y" : -655, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		/* 56 */ { "x" : 1157, "y" : -605, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		
		/* 57 */ { "x" : -1300, "y" : -485, "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "color" : "ec644b", "vis" : false },
		/* 58 */ { "x" : 1300, "y" : -485, "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "color" : "ec644b", "vis" : false },
		/* 59 */ { "x" : -1300, "y" : 485, "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "color" : "ec644b", "vis" : false },
		/* 60 */ { "x" : 1300, "y" : 485, "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "color" : "ec644b", "vis" : false },
		/* 61 */ { "x" : -1295, "y" : -320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 62 */ { "x" : -750, "y" : -320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 63 */ { "x" : -750, "y" : 320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 64 */ { "x" : -1295, "y" : 320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 65 */ { "x" : 1295, "y" : -320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 66 */ { "x" : 750, "y" : -320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 67 */ { "x" : 750, "y" : 320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 68 */ { "x" : 1295, "y" : 320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 69 */ { "x" : -1150, "y" : -124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		/* 70 */ { "x" : -1210, "y" : -124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "bias" : 0, "curve" : 5, "radius" : 4.5, "color" : "f2d8d8" },
		/* 71 */ { "x" : -1150, "y" : 124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		/* 72 */ { "x" : -1210, "y" : 124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "bias" : 0, "curve" : 5, "radius" : 4.5, "vis" : false, "color" : "f2d8d8" },
		/* 73 */ { "x" : -1250, "y" : -158, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "color" : "f2d8d8" },
		/* 74 */ { "x" : -1250, "y" : 158, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "color" : "f2d8d8" },
		/* 75 */ { "x" : 1150, "y" : 124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "color" : "ffffff" },
		/* 76 */ { "x" : 1210, "y" : 124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "curve" : -5, "color" : "ffffff" },
		/* 77 */ { "x" : 1150, "y" : -124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "color" : "ffffff" },
		/* 78 */ { "x" : 1210, "y" : -124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "curve" : -5, "radius" : 6, "color" : "ffffff" },
		/* 79 */ { "x" : 1250, "y" : -158, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "color" : "e3f9fe" },
		/* 80 */ { "x" : 1250, "y" : 158, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "color" : "e3f9fe" },
		
		/* 81 */ { "x" : -1150, "y" : 600, "trait" : "line" },
		/* 82 */ { "x" : 1150, "y" : 600, "trait" : "line" },
		/* 83 */ { "x" : -1150, "y" : 600, "trait" : "line" },
		/* 84 */ { "x" : -1150, "y" : 600, "trait" : "line" },
		/* 85 */ { "x" : -1150, "y" : -600, "trait" : "line" },
		/* 86 */ { "x" : 1150, "y" : -600, "trait" : "line" },
		/* 87 */ { "x" : 1150, "y" : 600, "trait" : "line" },
		/* 88 */ { "x" : 1150, "y" : -600, "trait" : "line" },
		/* 89 */ { "x" : -1260, "y" : -655, "trait" : "line", "color" : "43774e" },
		/* 90 */ { "x" : -1260, "y" : 655, "trait" : "line", "color" : "43774e" },
		/* 91 */ { "x" : -1262, "y" : -655, "trait" : "line", "color" : "43774e" },
		/* 92 */ { "x" : -1262, "y" : 655, "trait" : "line", "color" : "43774e" },
		/* 93 */ { "x" : -1258, "y" : -655, "trait" : "line", "color" : "43774e" },
		/* 94 */ { "x" : -1258, "y" : 655, "trait" : "line", "color" : "43774e" },
		/* 95 */ { "x" : 1260, "y" : -665, "trait" : "line", "color" : "43774e" },
		/* 96 */ { "x" : 1260, "y" : 665, "trait" : "line", "color" : "43774e" },
		/* 97 */ { "x" : 1258, "y" : -665, "trait" : "line", "color" : "43774e" },
		/* 98 */ { "x" : 1258, "y" : 665, "trait" : "line", "color" : "43774e" },
		/* 99 */ { "x" : 1262, "y" : -665, "trait" : "line", "color" : "43774e" },
		/* 100 */ { "x" : 1262, "y" : 665, "trait" : "line", "color" : "43774e" },
		/* 101 */ { "x" : -2, "y" : -646.5, "trait" : "line", "color" : "6e965d", "curve" : 0 },
		/* 102 */ { "x" : -2, "y" : -601.5, "trait" : "line", "color" : "6e965d", "curve" : 0 },
		/* 103 */ { "x" : 0, "y" : -646.5, "trait" : "line", "color" : "6e965d", "curve" : 0 },
		/* 104 */ { "x" : 0, "y" : -601.5, "trait" : "line", "color" : "6e965d", "curve" : 0 },
		/* 105 */ { "x" : 2, "y" : -646.5, "trait" : "line", "color" : "6e965d", "curve" : 0 },
		/* 106 */ { "x" : 2, "y" : -601.5, "trait" : "line", "color" : "6e965d", "curve" : 0 },
		/* 107 */ { "x" : 0, "y" : 601.5, "trait" : "line", "color" : "7ea170", "curve" : 0 },
		/* 108 */ { "x" : 0, "y" : 646.5, "trait" : "line", "color" : "7ea170", "curve" : 0 },
		/* 109 */ { "x" : -2, "y" : 601.5, "trait" : "line", "color" : "7ea170", "curve" : 0 },
		/* 110 */ { "x" : -2, "y" : 646.5, "trait" : "line", "color" : "7ea170", "curve" : 0 },
		/* 111 */ { "x" : 2, "y" : 601.5, "trait" : "line", "color" : "7ea170", "curve" : 0 },
		/* 112 */ { "x" : 2, "y" : 646.5, "trait" : "line", "color" : "7ea170", "curve" : 0 },
		/* 113 */ { "x" : 1.142081210865527, "y" : -647.4445926432836, "trait" : "line", "color" : "7ea170", "curve" : 0 },
		/* 114 */ { "x" : -30.602942100934982, "y" : -615.5501809864863, "trait" : "line", "color" : "7ea170", "curve" : 0 },
		/* 115 */ { "x" : 2.559610617834295, "y" : -646.0337027183147, "trait" : "line", "color" : "7ea170", "curve" : 0 },
		/* 116 */ { "x" : -29.185412693966214, "y" : -614.1392910615175, "trait" : "line", "color" : "7ea170", "curve" : 0 },
		/* 117 */ { "x" : -1265, "y" : -650, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 118 */ { "x" : 1265, "y" : -650, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 119 */ { "x" : -1265, "y" : -648, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 120 */ { "x" : 1265, "y" : -648, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 121 */ { "x" : -1265, "y" : -652, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 122 */ { "x" : 1265, "y" : -652, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 123 */ { "x" : 28.41038434498239, "y" : 618.0793890634807, "trait" : "line", "color" : "6e965d", "curve" : 0 },
		/* 124 */ { "x" : -3.6831242630433323, "y" : 649.6231159394631, "trait" : "line", "color" : "6e965d", "curve" : 0 },
		/* 125 */ { "x" : 27.008440928272066, "y" : 616.6530109031239, "trait" : "line", "color" : "6e965d", "curve" : 0 },
		/* 126 */ { "x" : -5.085067679753664, "y" : 648.1967377791065, "trait" : "line", "color" : "6e965d", "curve" : 0 },
		/* 127 */ { "x" : -1265, "y" : 650, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 128 */ { "x" : 1265, "y" : 650, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 129 */ { "x" : -1265, "y" : 652, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 130 */ { "x" : 1265, "y" : 652, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 131 */ { "x" : -1265, "y" : 648, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 132 */ { "x" : 1265, "y" : 648, "trait" : "line", "color" : "43774e", "curve" : 0 },
		/* 133 */ { "x" : -1239.5240259394243, "y" : -652.4006293133806, "trait" : "line", "curve" : -90 },
		/* 134 */ { "x" : -1260.3289235748528, "y" : -633.661466194945, "trait" : "line", "curve" : -90 },
		/* 135 */ { "x" : -1238.1855142881075, "y" : -650.9145651965642, "trait" : "line", "curve" : -90 },
		/* 136 */ { "x" : -1258.990411923536, "y" : -632.1754020781286, "trait" : "line", "curve" : -90 },
		/* 137 */ { "x" : -1236.8470026367906, "y" : -649.428501079748, "trait" : "line", "curve" : -90 },
		/* 138 */ { "x" : -1257.651900272219, "y" : -630.6893379613123, "trait" : "line", "curve" : -90 },
		/* 139 */ { "x" : -1260.8893083322516, "y" : 631.2171531285527, "trait" : "line", "curve" : -90 },
		/* 140 */ { "x" : -1241.9730164936645, "y" : 651.8611329550639, "trait" : "line", "curve" : -90 },
		/* 141 */ { "x" : -1259.4147383446436, "y" : 629.8659894257964, "trait" : "line", "curve" : -90 },
		/* 142 */ { "x" : -1240.4984465060566, "y" : 650.5099692523077, "trait" : "line", "curve" : -90 },
		/* 143 */ { "x" : -1257.9401683570356, "y" : 628.5148257230403, "trait" : "line", "curve" : -90 },
		/* 144 */ { "x" : -1239.0238765184486, "y" : 649.1588055495515, "trait" : "line", "curve" : -90 },
		/* 145 */ { "x" : 1240.6332966050222, "y" : 651.0394293358713, "trait" : "line", "curve" : -90 },
		/* 146 */ { "x" : 1261.114850634535, "y" : 631.9473905621797, "trait" : "line", "curve" : -90 },
		/* 147 */ { "x" : 1239.2695795497584, "y" : 649.5764611909061, "trait" : "line", "curve" : -90 },
		/* 148 */ { "x" : 1259.7511335792713, "y" : 630.4844224172144, "trait" : "line", "curve" : -90 },
		/* 149 */ { "x" : 1237.9058624944948, "y" : 648.1134930459408, "trait" : "line", "curve" : -90 },
		/* 150 */ { "x" : 1258.3874165240077, "y" : 629.0214542722492, "trait" : "line", "curve" : -90 },
		/* 151 */ { "x" : 1260.3945318749338, "y" : -631.2611957749441, "trait" : "line", "curve" : -90 },
		/* 152 */ { "x" : 1241.3024931012424, "y" : -651.7427498044569, "trait" : "line", "curve" : -90 },
		/* 153 */ { "x" : 1258.9315637299687, "y" : -629.8974787196803, "trait" : "line", "curve" : -90 },
		/* 154 */ { "x" : 1239.8395249562768, "y" : -650.3790327491931, "trait" : "line", "curve" : -90 },
		/* 155 */ { "x" : 1257.4685955850032, "y" : -628.5337616644167, "trait" : "line", "curve" : -90 },
		/* 156 */ { "x" : 1238.3765568113117, "y" : -649.0153156939296, "trait" : "line", "curve" : -90 },
		
		/* 157 */ { "x" : 1149, "y" : -635, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		/* 158 */ { "x" : 1149, "y" : -600, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		
		/* 159 */ { "x" : 1161, "y" : -633, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 160 */ { "x" : 1175, "y" : -633, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 161 */ { "x" : 1147, "y" : -633, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 162 */ { "x" : 1161, "y" : -630, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 163 */ { "x" : 1147, "y" : -630, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 164 */ { "x" : 1175, "y" : -630, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 165 */ { "x" : 1161, "y" : -635, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 166 */ { "x" : 1175, "y" : -635, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 167 */ { "x" : 1147, "y" : -635, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 168 */ { "x" : 1161, "y" : -628, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 169 */ { "x" : 1147, "y" : -628, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 170 */ { "x" : 1175, "y" : -628, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		
		/* 171 */ { "x" : 1169.3924124236926, "y" : 572.0916290810089, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		/* 172 */ { "x" : 1148.4570005362957, "y" : 600.139953970475, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		
		/* 173 */ { "x" : 1177.8126717065154, "y" : 580.8722460075145, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 174 */ { "x" : 1189.0320016623018, "y" : 589.2464107624734, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 175 */ { "x" : 1166.593341750729, "y" : 572.4980812525557, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 176 */ { "x" : 1176.0182078304529, "y" : 583.2763881408973, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 177 */ { "x" : 1164.7988778746665, "y" : 574.9022233859386, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 178 */ { "x" : 1187.2375377862393, "y" : 591.6505528958561, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 179 */ { "x" : 1179.008980957224, "y" : 579.2694845852593, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 180 */ { "x" : 1190.22831091301, "y" : 587.6436493402181, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 181 */ { "x" : 1167.7896510014373, "y" : 570.8953198303005, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 182 */ { "x" : 1174.8218985797444, "y" : 584.8791495631525, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 183 */ { "x" : 1163.602568623958, "y" : 576.5049848081937, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 184 */ { "x" : 1186.0412285355308, "y" : 593.2533143181114, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		
		/* 185 */ { "x" : -1149, "y" : -632, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		/* 186 */ { "x" : -1149, "y" : -597, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		
		/* 187 */ { "x" : -1161, "y" : -631, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 188 */ { "x" : -1147, "y" : -631, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 189 */ { "x" : -1175, "y" : -631, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 190 */ { "x" : -1161, "y" : -628, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 191 */ { "x" : -1175, "y" : -628, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 192 */ { "x" : -1147, "y" : -628, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 193 */ { "x" : -1161, "y" : -633, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 194 */ { "x" : -1147, "y" : -633, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 195 */ { "x" : -1175, "y" : -633, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 196 */ { "x" : -1161, "y" : -626, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 197 */ { "x" : -1175, "y" : -626, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 198 */ { "x" : -1147, "y" : -626, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		
		/* 199 */ { "x" : -1168.2406115927063, "y" : 572.9938153222878, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		/* 200 */ { "x" : -1147.8317517070022, "y" : 601.4275705819381, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		
		/* 201 */ { "x" : -1177.4062173992804, "y" : 580.8035317190905, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 202 */ { "x" : -1166.0327152954208, "y" : 572.6399877648089, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 203 */ { "x" : -1188.779719503141, "y" : 588.9670756733724, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 204 */ { "x" : -1175.6568865519346, "y" : 583.2407107413463, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 205 */ { "x" : -1187.0303886557947, "y" : 591.4042546956281, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 206 */ { "x" : -1164.2833844480745, "y" : 575.0771667870647, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 207 */ { "x" : -1178.5724379641779, "y" : 579.1787457042534, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 208 */ { "x" : -1167.198935860318, "y" : 571.0152017499719, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 209 */ { "x" : -1189.9459400680385, "y" : 587.3422896585353, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 210 */ { "x" : -1174.4906659870371, "y" : 584.8654967561835, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "curve" : 0, "color" : "f83d38" },
		
		/* 211 */ { "x" : -1185.8641680908975, "y" : 593.0290407104652, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "f83d38" },
		
		/* 212 */ { "x" : -1163.117163883177, "y" : 576.7019528019019, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "color" : "fde73b" },
		/* 213 */ { "x" : -42, "y" : 682, "trait" : "line" },
		/* 214 */ { "x" : -42, "y" : 668, "trait" : "line" },
		/* 215 */ { "x" : -42, "y" : 662, "trait" : "line" },
		/* 216 */ { "x" : -42, "y" : 653, "trait" : "line" },
		/* 217 */ { "x" : -62, "y" : 653, "trait" : "line" },
		/* 218 */ { "x" : -223, "y" : 682, "trait" : "line" },
		/* 219 */ { "x" : -223, "y" : 668, "trait" : "line" },
		/* 220 */ { "x" : -223, "y" : 662, "trait" : "line" },
		/* 221 */ { "x" : -223, "y" : 653, "trait" : "line" },
		/* 222 */ { "x" : -205, "y" : 653, "trait" : "line" },
		/* 223 */ { "x" : -120, "y" : 653, "trait" : "line" },
		/* 224 */ { "x" : -96, "y" : 653, "trait" : "line" },
		/* 225 */ { "x" : -172, "y" : 653, "trait" : "line" },
		/* 226 */ { "x" : -148, "y" : 653, "trait" : "line" },
		/* 227 */ { "x" : -42, "y" : 704, "trait" : "line" },
		/* 228 */ { "x" : -42, "y" : 690, "trait" : "line" },
		/* 229 */ { "x" : -223, "y" : 704, "trait" : "line" },
		/* 230 */ { "x" : -223, "y" : 690, "trait" : "line" },
		/* 231 */ { "x" : 223, "y" : 682, "trait" : "line" },
		/* 232 */ { "x" : 223, "y" : 668, "trait" : "line" },
		/* 233 */ { "x" : 223, "y" : 662, "trait" : "line" },
		/* 234 */ { "x" : 223, "y" : 653, "trait" : "line" },
		/* 235 */ { "x" : 203, "y" : 653, "trait" : "line" },
		/* 236 */ { "x" : 42, "y" : 682, "trait" : "line" },
		/* 237 */ { "x" : 42, "y" : 668, "trait" : "line" },
		/* 238 */ { "x" : 42, "y" : 662, "trait" : "line" },
		/* 239 */ { "x" : 42, "y" : 653, "trait" : "line" },
		/* 240 */ { "x" : 60, "y" : 653, "trait" : "line" },
		/* 241 */ { "x" : 145, "y" : 653, "trait" : "line" },
		/* 242 */ { "x" : 169, "y" : 653, "trait" : "line" },
		/* 243 */ { "x" : 93, "y" : 653, "trait" : "line" },
		/* 244 */ { "x" : 117, "y" : 653, "trait" : "line" },
		/* 245 */ { "x" : 223, "y" : 704, "trait" : "line" },
		/* 246 */ { "x" : 223, "y" : 690, "trait" : "line" },
		/* 247 */ { "x" : 42, "y" : 704, "trait" : "line" },
		/* 248 */ { "x" : 42, "y" : 690, "trait" : "line" },
		/* 249 */ { "x" : 0, "y" : 180, "trait" : "line" },
		/* 250 */ { "x" : 0, "y" : -180, "trait" : "line" }

	],

	"segments" : [
		{ "v0" : 0, "v1" : 1, "trait" : "kickOffBarrier" },
		{ "v0" : 2, "v1" : 3, "trait" : "kickOffBarrier" },
		
		{ "v0" : 4, "v1" : 5, "trait" : "line", "y" : 320 },
		{ "v0" : 5, "v1" : 7, "trait" : "line", "x" : 840 },
		{ "v0" : 6, "v1" : 7, "trait" : "line", "y" : -320 },
		{ "v0" : 8, "v1" : 9, "trait" : "line", "y" : 180 },
		{ "v0" : 9, "v1" : 11, "trait" : "line", "x" : 1030 },
		{ "v0" : 10, "v1" : 11, "trait" : "line", "y" : -180 },
		{ "v0" : 12, "v1" : 13, "curve" : -130, "trait" : "line", "x" : 840 },
		{ "v0" : 14, "v1" : 15, "trait" : "line", "y" : -320 },
		{ "v0" : 15, "v1" : 17, "trait" : "line", "x" : -840 },
		{ "v0" : 16, "v1" : 17, "trait" : "line", "y" : 320 },
		{ "v0" : 18, "v1" : 19, "trait" : "line", "y" : -175 },
		{ "v0" : 19, "v1" : 21, "trait" : "line", "x" : -1030 },
		{ "v0" : 20, "v1" : 21, "trait" : "line", "y" : 175 },
		{ "v0" : 22, "v1" : 23, "curve" : -130, "trait" : "line", "x" : -840 },
		{ "v0" : 24, "v1" : 25, "curve" : -180, "trait" : "line", "x" : 935 },
		{ "v0" : 26, "v1" : 27, "curve" : -180, "trait" : "line", "x" : -935 },
		{ "v0" : 24, "v1" : 25, "curve" : 180, "trait" : "line", "x" : 935 },
		{ "v0" : 26, "v1" : 27, "curve" : 180, "trait" : "line", "x" : -935 },
		{ "v0" : 24, "v1" : 25, "curve" : 90, "trait" : "line", "x" : 935 },
		{ "v0" : 26, "v1" : 27, "curve" : 90, "trait" : "line", "x" : -935 },
		{ "v0" : 24, "v1" : 25, "curve" : -90, "trait" : "line", "x" : 935 },
		{ "v0" : 26, "v1" : 27, "curve" : -90, "trait" : "line", "x" : -935 },
		{ "v0" : 24, "v1" : 25, "trait" : "line", "x" : 935 },
		{ "v0" : 26, "v1" : 27, "trait" : "line", "x" : -935 },
		{ "v0" : 28, "v1" : 29, "curve" : 90, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		{ "v0" : 30, "v1" : 31, "curve" : 90, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		{ "v0" : 32, "v1" : 33, "curve" : 90, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		{ "v0" : 34, "v1" : 35, "curve" : 90, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		
		{ "v0" : 37, "v1" : 36, "curve" : -180, "vis" : false, "bCoef" : 0.1, "cGroup" : ["blueKO" ], "trait" : "kickOffBarrier" },
		
		{ "v0" : 39, "v1" : 40, "curve" : 70, "vis" : false, "color" : "576C46", "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "x" : -1030 },
		{ "v0" : 41, "v1" : 42, "curve" : -70, "vis" : false, "color" : "576C46", "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "x" : 1030 },
		
		{ "v0" : 37, "v1" : 38, "curve" : 180, "vis" : false, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO" ], "trait" : "kickOffBarrier" },
		
		{ "v0" : 43, "v1" : 44, "vis" : true, "color" : "67875d", "trait" : "line", "x" : 1030 },
		{ "v0" : 45, "v1" : 46, "vis" : true, "color" : "67875d", "trait" : "line", "x" : -1030 },
		{ "v0" : 47, "v1" : 48, "curve" : -180, "trait" : "line", "x" : -935 },
		{ "v0" : 47, "v1" : 48, "curve" : 180, "trait" : "line", "x" : -935 },
		{ "v0" : 47, "v1" : 48, "curve" : 90, "trait" : "line", "x" : -935 },
		{ "v0" : 47, "v1" : 48, "curve" : -90, "trait" : "line", "x" : -935 },
		{ "v0" : 47, "v1" : 48, "trait" : "line", "x" : -935 },
		
		{ "v0" : 49, "v1" : 50, "color" : "FFFF00", "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea", "x" : -1157 },
		{ "v0" : 51, "v1" : 52, "color" : "FFFF00", "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea", "x" : -1157 },
		{ "v0" : 53, "v1" : 54, "color" : "FFFF00", "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea", "x" : 1157 },
		{ "v0" : 55, "v1" : 56, "color" : "FFFF00", "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea", "x" : 1157 },
		
		{ "v0" : 57, "v1" : 58, "vis" : false, "color" : "ec644b", "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "y" : -485 },
		{ "v0" : 59, "v1" : 60, "vis" : false, "color" : "ec644b", "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "y" : 485 },
		{ "v0" : 61, "v1" : 62, "vis" : false, "color" : "ec644b", "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 62, "v1" : 63, "vis" : false, "color" : "ec644b", "cMask" : ["c0" ], "cGroup" : ["red","blue" ], "x" : -750 },
		{ "v0" : 63, "v1" : 64, "vis" : false, "color" : "ec644b", "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 65, "v1" : 66, "vis" : false, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 66, "v1" : 67, "vis" : false, "cMask" : ["c0" ], "cGroup" : ["red","blue" ], "x" : 750 },
		{ "v0" : 67, "v1" : 68, "vis" : false, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 69, "v1" : 70, "color" : "FFFFFF", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "y" : -124 },
		{ "v0" : 71, "v1" : 72, "color" : "FFFFFF", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "y" : 124 },
		{ "v0" : 70, "v1" : 73, "color" : "f2d8d8", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 72, "v1" : 74, "color" : "f2d8d8", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 75, "v1" : 76, "color" : "ffffff", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "y" : 124 },
		{ "v0" : 77, "v1" : 78, "color" : "ffffff", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "y" : -124 },
		{ "v0" : 78, "v1" : 79, "color" : "e3f9fe", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 76, "v1" : 80, "color" : "e3f9fe", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		
		{ "v0" : 81, "v1" : 82, "vis" : true, "color" : "C7E6BD", "trait" : "line", "y" : 600 },
		{ "v0" : 83, "v1" : 84, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -1150 },
		{ "v0" : 85, "v1" : 86, "vis" : true, "color" : "C7E6BD", "trait" : "line", "y" : -600 },
		{ "v0" : 87, "v1" : 88, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : 1150 },
		{ "v0" : 85, "v1" : 84, "vis" : true, "color" : "C7E6BD", "trait" : "line" },
		{ "v0" : 89, "v1" : 90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1260 },
		{ "v0" : 91, "v1" : 92, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1262 },
		{ "v0" : 93, "v1" : 94, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1258 },
		{ "v0" : 95, "v1" : 96, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1260 },
		{ "v0" : 97, "v1" : 98, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1262 },
		{ "v0" : 99, "v1" : 100, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1258 },
		{ "v0" : 101, "v1" : 102, "curve" : 0, "vis" : true, "color" : "6e965d", "trait" : "line", "x" : -2 },
		{ "v0" : 103, "v1" : 104, "curve" : 0, "vis" : true, "color" : "6e965d", "trait" : "line", "x" : 0 },
		{ "v0" : 105, "v1" : 106, "curve" : 0, "vis" : true, "color" : "6e965d", "trait" : "line", "x" : 2 },
		{ "v0" : 107, "v1" : 108, "curve" : 0, "vis" : true, "color" : "7ea170", "trait" : "line", "x" : 0 },
		{ "v0" : 109, "v1" : 110, "curve" : 0, "vis" : true, "color" : "7ea170", "trait" : "line", "x" : -2 },
		{ "v0" : 111, "v1" : 112, "curve" : 0, "vis" : true, "color" : "7ea170", "trait" : "line", "x" : 2 },
		{ "v0" : 113, "v1" : 114, "curve" : 0, "vis" : true, "color" : "7ea170", "trait" : "line", "x" : 0 },
		{ "v0" : 115, "v1" : 116, "curve" : 0, "vis" : true, "color" : "7ea170", "trait" : "line", "x" : 2 },
		{ "v0" : 117, "v1" : 118, "curve" : 0, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1260, "y" : -650 },
		{ "v0" : 119, "v1" : 120, "curve" : 0, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1262, "y" : -648 },
		{ "v0" : 121, "v1" : 122, "curve" : 0, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1258, "y" : -652 },
		{ "v0" : 123, "v1" : 124, "curve" : 0, "vis" : true, "color" : "6e965d", "trait" : "line", "x" : 0 },
		{ "v0" : 125, "v1" : 126, "curve" : 0, "vis" : true, "color" : "6e965d", "trait" : "line", "x" : -2 },
		{ "v0" : 127, "v1" : 128, "curve" : 0, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1260, "y" : 650 },
		{ "v0" : 129, "v1" : 130, "curve" : 0, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1262, "y" : 652 },
		{ "v0" : 131, "v1" : 132, "curve" : 0, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -1258, "y" : 648 },
		{ "v0" : 133, "v1" : 134, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -752 },
		{ "v0" : 135, "v1" : 136, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -750 },
		{ "v0" : 137, "v1" : 138, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -748 },
		{ "v0" : 139, "v1" : 140, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -752 },
		{ "v0" : 141, "v1" : 142, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -750 },
		{ "v0" : 143, "v1" : 144, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -748 },
		{ "v0" : 145, "v1" : 146, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -752 },
		{ "v0" : 147, "v1" : 148, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -750 },
		{ "v0" : 149, "v1" : 150, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -748 },
		{ "v0" : 151, "v1" : 152, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -752 },
		{ "v0" : 153, "v1" : 154, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -750 },
		{ "v0" : 155, "v1" : 156, "curve" : -90, "vis" : true, "color" : "43774e", "trait" : "line", "x" : -748 },
		
		{ "v0" : 157, "v1" : 158, "curve" : 0, "vis" : true, "color" : "D7D7D9", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "x" : 780 },
		
		{ "v0" : 159, "v1" : 160, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 159, "v1" : 160, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -553 },
		{ "v0" : 160, "v1" : 160, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : 903 },
		
		{ "v0" : 159, "v1" : 161, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -553 },
		
		{ "v0" : 162, "v1" : 163, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 162, "v1" : 163, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -550 },
		{ "v0" : 163, "v1" : 163, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : 875 },
		
		{ "v0" : 162, "v1" : 164, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -550 },
		
		{ "v0" : 165, "v1" : 166, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -555 },
		
		{ "v0" : 165, "v1" : 167, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -555 },
		
		{ "v0" : 168, "v1" : 169, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -548 },
		
		{ "v0" : 168, "v1" : 170, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -548 },
		
		{ "v0" : 171, "v1" : 172, "curve" : 0, "vis" : true, "color" : "D7D7D9", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "x" : 780 },
		
		{ "v0" : 173, "v1" : 174, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 173, "v1" : 174, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -553 },
		{ "v0" : 174, "v1" : 174, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : 903 },
		
		{ "v0" : 173, "v1" : 175, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -553 },
		
		{ "v0" : 176, "v1" : 177, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 176, "v1" : 177, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -550 },
		{ "v0" : 177, "v1" : 177, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : 875 },
		
		{ "v0" : 176, "v1" : 178, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -550 },
		
		{ "v0" : 179, "v1" : 180, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -555 },
		
		{ "v0" : 179, "v1" : 181, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -555 },
		
		{ "v0" : 182, "v1" : 183, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -548 },
		
		{ "v0" : 182, "v1" : 184, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -548 },
		
		{ "v0" : 185, "v1" : 186, "curve" : 0, "vis" : true, "color" : "D7D7D9", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "x" : 877 },
		
		{ "v0" : 187, "v1" : 188, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 187, "v1" : 188, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -553 },
		{ "v0" : 188, "v1" : 188, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : 903 },
		
		{ "v0" : 187, "v1" : 189, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -553 },
		
		{ "v0" : 190, "v1" : 191, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 190, "v1" : 191, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -550 },
		{ "v0" : 191, "v1" : 191, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : 875 },
		
		{ "v0" : 190, "v1" : 192, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -550 },
		
		{ "v0" : 193, "v1" : 194, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -555 },
		
		{ "v0" : 193, "v1" : 195, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -555 },
		
		{ "v0" : 196, "v1" : 197, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -548 },
		
		{ "v0" : 196, "v1" : 198, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -548 },
		
		{ "v0" : 199, "v1" : 200, "curve" : 0, "vis" : true, "color" : "D7D7D9", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "x" : 877 },
		
		{ "v0" : 201, "v1" : 202, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 201, "v1" : 202, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -553 },
		{ "v0" : 202, "v1" : 202, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : 903 },
		
		{ "v0" : 201, "v1" : 203, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -553 },
		
		{ "v0" : 204, "v1" : 205, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 204, "v1" : 205, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -550 },
		{ "v0" : 205, "v1" : 205, "curve" : 0, "vis" : true, "color" : "f7513e", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : 875 },
		
		{ "v0" : 204, "v1" : 206, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -550 },
		
		{ "v0" : 207, "v1" : 208, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -555 },
		
		{ "v0" : 207, "v1" : 209, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -555 },
		
		{ "v0" : 210, "v1" : 211, "curve" : 0, "vis" : true, "color" : "f83d38", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : -548 },
		
		{ "v0" : 210, "v1" : 212, "vis" : true, "color" : "fde73b", "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "line", "y" : -548 },
		{ "v0" : 213, "v1" : 214, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -42 },
		{ "v0" : 215, "v1" : 216, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -42 },
		{ "v0" : 216, "v1" : 217, "vis" : true, "color" : "C7E6BD", "trait" : "line", "y" : 653 },
		{ "v0" : 218, "v1" : 219, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -223 },
		{ "v0" : 220, "v1" : 221, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -223 },
		{ "v0" : 221, "v1" : 222, "vis" : true, "color" : "C7E6BD", "trait" : "line" },
		{ "v0" : 223, "v1" : 224, "vis" : true, "color" : "C7E6BD", "trait" : "line", "y" : 653 },
		{ "v0" : 225, "v1" : 226, "vis" : true, "color" : "C7E6BD", "trait" : "line", "y" : 653 },
		{ "v0" : 227, "v1" : 228, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -42 },
		{ "v0" : 229, "v1" : 230, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -223 },
		{ "v0" : 231, "v1" : 232, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -42 },
		{ "v0" : 233, "v1" : 234, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -42 },
		{ "v0" : 234, "v1" : 235, "vis" : true, "color" : "C7E6BD", "trait" : "line", "y" : 653 },
		{ "v0" : 236, "v1" : 237, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -223 },
		{ "v0" : 238, "v1" : 239, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -223 },
		{ "v0" : 239, "v1" : 240, "vis" : true, "color" : "C7E6BD", "trait" : "line", "y" : 653 },
		{ "v0" : 241, "v1" : 242, "vis" : true, "color" : "C7E6BD", "trait" : "line", "y" : 653 },
		{ "v0" : 243, "v1" : 244, "vis" : true, "color" : "C7E6BD", "trait" : "line", "y" : 653 },
		{ "v0" : 245, "v1" : 246, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -42 },
		{ "v0" : 247, "v1" : 248, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -223 },
		
		{ "v0" : 76, "v1" : 78, "color" : "ffffff", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 70, "v1" : 72, "color" : "FFFFFF", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		
		{ "v0" : 249, "v1" : 250, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : 0 }

	],

	"goals" : [
		{ "p0" : [1161.55,-122 ], "p1" : [1161.55,122 ], "team" : "blue" },
		{ "p0" : [-1161.55,-122 ], "p1" : [-1161.55,122 ], "team" : "red" }

	],

	"discs" : [
		{ "radius" : 0, "invMass" : 0, "pos" : [-1311,-19 ], "color" : "ffffffff", "bCoef" : 0, "cMask" : ["red" ], "cGroup" : ["ball" ] },
		{ "radius" : 0, "invMass" : 0, "pos" : [-1310,29 ], "color" : "ffffffff", "bCoef" : 0, "cMask" : ["blue" ], "cGroup" : ["ball" ] },
		{ "radius" : 0, "invMass" : 0, "pos" : [-1308,62 ], "color" : "ffffffff", "bCoef" : 0, "cMask" : ["red","blue" ], "cGroup" : ["ball" ] },
		
		{ "radius" : 2.7, "pos" : [-1150,600 ], "cGroup" : ["ball" ], "trait" : "cornerflag", "color" : "7af769" },
		{ "radius" : 2.7, "pos" : [1150,-600 ], "cGroup" : ["ball" ], "trait" : "cornerflag", "color" : "7af769" },
		{ "radius" : 2.7, "pos" : [1150,600 ], "cGroup" : ["ball" ], "trait" : "cornerflag", "color" : "7af769" },
		
		{ "radius" : 5, "invMass" : 0, "pos" : [-1150,-124 ], "bCoef" : 0.5, "trait" : "goalPost", "color" : "d6cbcb" },
		{ "radius" : 5, "invMass" : 0, "pos" : [-1150,124 ], "bCoef" : 0.5, "trait" : "goalPost", "color" : "d6cbcb" },
		{ "radius" : 3, "invMass" : 0, "pos" : [-1250,-158 ], "color" : "dd2e2e", "bCoef" : 1, "trait" : "goalPost" },
		{ "radius" : 3, "invMass" : 0, "pos" : [-1250,158 ], "color" : "dd2e2e", "bCoef" : 1, "trait" : "goalPost" },
		{ "radius" : 5, "invMass" : 0, "pos" : [1150,-124 ], "bCoef" : 0.5, "trait" : "goalPost", "color" : "cbccd6" },
		{ "radius" : 5, "invMass" : 0, "pos" : [1150,124 ], "bCoef" : 0.5, "trait" : "goalPost", "color" : "cbccd6" },
		{ "radius" : 3, "invMass" : 0, "pos" : [1250,-158 ], "color" : "2e51dd", "bCoef" : 1, "trait" : "goalPost" },
		{ "radius" : 3, "invMass" : 0, "pos" : [1250,158 ], "color" : "2e51dd", "bCoef" : 1, "trait" : "goalPost" },
		
		{ "radius" : 2.7, "pos" : [-1150,-600 ], "cGroup" : ["ball" ], "trait" : "cornerflag", "color" : "7af769" },
		
		{ "radius" : 0, "pos" : [-1149,-485 ], "cMask" : ["none" ] },
		{ "radius" : 0, "pos" : [1149,-485 ], "cMask" : ["none" ] },
		{ "radius" : 0, "pos" : [-1149,-485 ], "cMask" : ["none" ] },
		{ "radius" : 0, "pos" : [1149,-485 ], "cMask" : ["none" ] },
		{ "radius" : 0, "pos" : [-1149,485 ], "cMask" : ["none" ] },
		{ "radius" : 0, "pos" : [1149,485 ], "cMask" : ["none" ] },
		{ "radius" : 0, "pos" : [-1149,485 ], "cMask" : ["none" ] },
		{ "radius" : 0, "pos" : [1149,485 ], "cMask" : ["none" ] }

	],

	"planes" : [
		{ "normal" : [0,1 ], "dist" : -627, "bCoef" : 0, "cGroup" : ["ball" ], "trait" : "ballArea" },
		{ "normal" : [0,-1 ], "dist" : -627, "bCoef" : 0, "cGroup" : ["ball" ], "trait" : "ballArea" },
		
		{ "normal" : [0,1 ], "dist" : -706, "bCoef" : 0 },
		{ "normal" : [0,-1 ], "dist" : -706, "bCoef" : 0 },
		{ "normal" : [1,0 ], "dist" : -1300, "bCoef" : 0 },
		{ "normal" : [-1,0 ], "dist" : -1300, "bCoef" : 0.1 },
		{ "normal" : [1,0 ], "dist" : -1240, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["ball" ] },
		{ "normal" : [-1,0 ], "dist" : -1240, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["ball" ] }

	],

	"traits" : {
		"ballArea" : { "vis" : false, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["ball" ] },
		"goalPost" : { "radius" : 5, "invMass" : 0, "bCoef" : 1, "cGroup" : ["ball" ] },
		"rightNet" : { "radius" : 0, "invMass" : 1, "bCoef" : 0, "cGroup" : ["ball","c3" ] },
		"leftNet" : { "radius" : 0, "invMass" : 1, "bCoef" : 0, "cGroup" : ["ball","c2" ] },
		"stanchion" : { "radius" : 3, "invMass" : 0, "bCoef" : 3, "cMask" : ["none" ] },
		"cornerflag" : { "radius" : 3, "invMass" : 0, "bCoef" : 0.2, "color" : "FFFF00", "cMask" : ["ball" ] },
		"reargoalNetleft" : { "vis" : true, "bCoef" : 0.1, "cMask" : ["ball","red","blue" ], "curve" : 10, "color" : "C7E6BD" },
		"reargoalNetright" : { "vis" : true, "bCoef" : 0.1, "cMask" : ["ball","red","blue" ], "curve" : -10, "color" : "C7E6BD" },
		"sidegoalNet" : { "vis" : true, "bCoef" : 1, "cMask" : ["ball","red","blue" ], "color" : "C7E6BD" },
		"kickOffBarrier" : { "vis" : false, "bCoef" : 0.1, "cGroup" : ["redKO","blueKO" ], "cMask" : ["red","blue" ] },
		"line" : { "vis" : true, "cMask" : [ ], "color" : "C7E6BD" }

	},

"joints":[{"d0":16,"d1":17,"strength":"rigid","color":"f5204b","length":null},{"d0":18,"d1":19,"strength":"rigid","color":"00e1ff","length":null},{"d0":20,"d1":21,"strength":"rigid","color":"f5204b","length":null},{"d0":22,"d1":23,"strength":"rigid","color":"00e1ff","length":null}

	],

	"canBeStored" : false
}


`;
	RSRMap = true;

	return realSoccerMap2;
}




function getRealSoccerMapOveja() {
	var realSoccerMapOveja = `{

	"name" : "⚡️⚽️ Real Soccer ⚽️⚡️ by URSS",

	"width" : 1300,

	"height" : 710,

	"spawnDistance" : 560,

	"redSpawnPoints" : [
		[ -380, 0
		],
		[ -380, 0
		],
		[ -380, 0
		],
		[ -380, 0
		],
		[ -380, 0
		],
		[ -380, 0
		],
		[ -380, 0
		],
		[ -132, 681
		]

	],

	"blueSpawnPoints" : [
		[ 380, 0
		],
		[ 380, 0
		],
		[ 380, 0
		],
		[ 380, 0
		],
		[ 380, 0
		],
		[ 380, 0
		],
		[ 380, 0
		],
		[ 132, 681
		]

	],

	"bg" : { "type" : "none", "width" : 1150, "height" : 600, "kickOffRadius" : 180, "cornerRadius" : 0, "color" : "285635" },

	"playerPhysics" : {
		"bCoef" : 0.3,
		"invMass" : 0.5,
		"damping" : 0.96,
		"acceleration" : 0.12,
		"kickingAcceleration" : 0.07,
		"kickingDamping" : 0.96,
		"kickStrength" : 5.65,
		"radius" : 15,
		"cGroup" : [ "red", "blue"
		],
		"gravity" : [ 0, 0
		],
		"kickback" : 0

	},

	"ballPhysics" : {
		"radius" : 8,
		"bCoef" : 0.5,
		"invMass" : 1.05,
		"damping" : 0.99,
		"color" : "${PelotaRS}",
		"cMask" : [ "all"
		],
		"cGroup" : [ "ball"
		],
		"gravity" : [ 0, 0
		]

	},

	"vertexes" : [
		/* 0 */ { "x" : -1150, "y" : 14, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 1 */ { "x" : 1150, "y" : 14, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 2 */ { "x" : -1150, "y" : 14, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 3 */ { "x" : 1150, "y" : 14, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 4 */ { "x" : -1150, "y" : 11.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 5 */ { "x" : 1150, "y" : 11.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 6 */ { "x" : -1150, "y" : 9, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 7 */ { "x" : 1150, "y" : 9, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 8 */ { "x" : -1150, "y" : 6.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 9 */ { "x" : 1150, "y" : 6.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 10 */ { "x" : -1150, "y" : 4, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 11 */ { "x" : 1150, "y" : 4, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 12 */ { "x" : -1150, "y" : 1.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 13 */ { "x" : 1150, "y" : 1.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 14 */ { "x" : -1150, "y" : -1, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 15 */ { "x" : 1150, "y" : -1, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 16 */ { "x" : -1150, "y" : -3.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 17 */ { "x" : 1150, "y" : -3.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 18 */ { "x" : -1150, "y" : -6, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 19 */ { "x" : 1150, "y" : -6, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 20 */ { "x" : -1150, "y" : -8.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 21 */ { "x" : 1150, "y" : -8.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 22 */ { "x" : -1150, "y" : -11, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 23 */ { "x" : 1150, "y" : -11, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 24 */ { "x" : -1150, "y" : -13.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 25 */ { "x" : 1150, "y" : -13.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 26 */ { "x" : -1150, "y" : -16, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 27 */ { "x" : 1150, "y" : -16, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 28 */ { "x" : -1150, "y" : -179, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 29 */ { "x" : 1150, "y" : -179, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 30 */ { "x" : -1150, "y" : -179, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 31 */ { "x" : 1150, "y" : -179, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 32 */ { "x" : -1150, "y" : -181.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 33 */ { "x" : 1150, "y" : -181.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 34 */ { "x" : -1150, "y" : -184, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 35 */ { "x" : 1150, "y" : -184, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 36 */ { "x" : -1150, "y" : -186.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 37 */ { "x" : 1150, "y" : -186.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 38 */ { "x" : -1150, "y" : -189, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 39 */ { "x" : 1150, "y" : -189, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 40 */ { "x" : -1150, "y" : -191.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 41 */ { "x" : 1150, "y" : -191.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 42 */ { "x" : -1150, "y" : -194, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 43 */ { "x" : 1150, "y" : -194, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 44 */ { "x" : -1150, "y" : -196.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 45 */ { "x" : 1150, "y" : -196.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 46 */ { "x" : -1150, "y" : -199, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 47 */ { "x" : 1150, "y" : -199, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 48 */ { "x" : -1150, "y" : -201.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 49 */ { "x" : 1150, "y" : -201.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 50 */ { "x" : -1150, "y" : -204, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 51 */ { "x" : 1150, "y" : -204, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 52 */ { "x" : -1150, "y" : -206.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 53 */ { "x" : 1150, "y" : -206.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 54 */ { "x" : -1150, "y" : -209, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 55 */ { "x" : 1150, "y" : -209, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 56 */ { "x" : -1150, "y" : 208, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 57 */ { "x" : 1150, "y" : 208, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 58 */ { "x" : -1150, "y" : 208, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 59 */ { "x" : 1150, "y" : 208, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 60 */ { "x" : -1150, "y" : 205.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 61 */ { "x" : 1150, "y" : 205.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 62 */ { "x" : -1150, "y" : 203, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 63 */ { "x" : 1150, "y" : 203, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 64 */ { "x" : -1150, "y" : 200.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 65 */ { "x" : 1150, "y" : 200.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 66 */ { "x" : -1150, "y" : 198, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 67 */ { "x" : 1150, "y" : 198, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 68 */ { "x" : -1150, "y" : 195.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 69 */ { "x" : 1150, "y" : 195.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 70 */ { "x" : -1150, "y" : 193, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 71 */ { "x" : 1150, "y" : 193, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 72 */ { "x" : -1150, "y" : 190.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 73 */ { "x" : 1150, "y" : 190.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 74 */ { "x" : -1150, "y" : 188, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 75 */ { "x" : 1150, "y" : 188, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 76 */ { "x" : -1150, "y" : 185.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 77 */ { "x" : 1150, "y" : 185.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 78 */ { "x" : -1150, "y" : 183, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 79 */ { "x" : 1150, "y" : 183, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 80 */ { "x" : -1150, "y" : 180.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 81 */ { "x" : 1150, "y" : 180.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 82 */ { "x" : -1150, "y" : 178, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 83 */ { "x" : 1150, "y" : 178, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 84 */ { "x" : -1150, "y" : 399, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 85 */ { "x" : 1150, "y" : 399, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 86 */ { "x" : -1150, "y" : 399, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 87 */ { "x" : 1150, "y" : 399, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 88 */ { "x" : -1150, "y" : 396.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 89 */ { "x" : 1150, "y" : 396.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 90 */ { "x" : -1150, "y" : 394, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 91 */ { "x" : 1150, "y" : 394, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 92 */ { "x" : -1150, "y" : 391.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 93 */ { "x" : 1150, "y" : 391.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 94 */ { "x" : -1150, "y" : 389, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 95 */ { "x" : 1150, "y" : 389, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 96 */ { "x" : -1150, "y" : 386.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 97 */ { "x" : 1150, "y" : 386.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 98 */ { "x" : -1150, "y" : 384, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 99 */ { "x" : 1150, "y" : 384, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 100 */ { "x" : -1150, "y" : 381.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 101 */ { "x" : 1150, "y" : 381.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 102 */ { "x" : -1150, "y" : 379, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 103 */ { "x" : 1150, "y" : 379, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 104 */ { "x" : -1150, "y" : 376.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 105 */ { "x" : 1150, "y" : 376.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 106 */ { "x" : -1150, "y" : 374, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 107 */ { "x" : 1150, "y" : 374, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 108 */ { "x" : -1150, "y" : 371.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 109 */ { "x" : 1150, "y" : 371.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 110 */ { "x" : -1150, "y" : 369, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 111 */ { "x" : 1150, "y" : 369, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 112 */ { "x" : -1150, "y" : -371, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 113 */ { "x" : 1150, "y" : -371, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 114 */ { "x" : -1150, "y" : -371, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 115 */ { "x" : 1150, "y" : -371, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 116 */ { "x" : -1150, "y" : -373.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 117 */ { "x" : 1150, "y" : -373.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 118 */ { "x" : -1150, "y" : -376, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 119 */ { "x" : 1150, "y" : -376, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 120 */ { "x" : -1150, "y" : -378.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 121 */ { "x" : 1150, "y" : -378.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 122 */ { "x" : -1150, "y" : -381, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 123 */ { "x" : 1150, "y" : -381, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 124 */ { "x" : -1150, "y" : -383.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 125 */ { "x" : 1150, "y" : -383.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 126 */ { "x" : -1150, "y" : -386, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 127 */ { "x" : 1150, "y" : -386, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 128 */ { "x" : -1150, "y" : -388.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 129 */ { "x" : 1150, "y" : -388.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 130 */ { "x" : -1150, "y" : -391, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 131 */ { "x" : 1150, "y" : -391, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 132 */ { "x" : -1150, "y" : -393.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 133 */ { "x" : 1150, "y" : -393.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 134 */ { "x" : -1150, "y" : -396, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 135 */ { "x" : 1150, "y" : -396, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 136 */ { "x" : -1150, "y" : -398.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 137 */ { "x" : 1150, "y" : -398.5, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 138 */ { "x" : -1150, "y" : -401, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		/* 139 */ { "x" : 1150, "y" : -401, "cMask" : ["ball" ], "cGroup" : [ ], "trait" : "line" },
		
		/* 140 */ { "x" : 0, "y" : 600, "trait" : "kickOffBarrier", "vis" : true, "color" : "C7E6BD" },
		/* 141 */ { "x" : 0, "y" : 180, "trait" : "kickOffBarrier", "vis" : true, "color" : "C7E6BD" },
		/* 142 */ { "x" : 0, "y" : -180, "trait" : "kickOffBarrier", "vis" : true, "color" : "C7E6BD" },
		/* 143 */ { "x" : 0, "y" : -600, "trait" : "kickOffBarrier", "vis" : true, "color" : "C7E6BD" },
		
		/* 144 */ { "x" : 1150, "y" : 320, "trait" : "line" },
		/* 145 */ { "x" : 840, "y" : 320, "trait" : "line" },
		/* 146 */ { "x" : 1150, "y" : -320, "trait" : "line" },
		/* 147 */ { "x" : 840, "y" : -320, "trait" : "line" },
		/* 148 */ { "x" : 1150, "y" : 180, "trait" : "line" },
		/* 149 */ { "x" : 1030, "y" : 180, "trait" : "line" },
		/* 150 */ { "x" : 1150, "y" : -180, "trait" : "line" },
		/* 151 */ { "x" : 1030, "y" : -180, "trait" : "line" },
		/* 152 */ { "x" : 840, "y" : -130, "trait" : "line", "curve" : -130 },
		/* 153 */ { "x" : 840, "y" : 130, "trait" : "line", "curve" : -130 },
		/* 154 */ { "x" : -1150, "y" : -320, "trait" : "line" },
		/* 155 */ { "x" : -840, "y" : -320, "trait" : "line" },
		/* 156 */ { "x" : -1150, "y" : 320, "trait" : "line" },
		/* 157 */ { "x" : -840, "y" : 320, "trait" : "line" },
		/* 158 */ { "x" : -1150, "y" : -175, "trait" : "line" },
		/* 159 */ { "x" : -1030, "y" : -175, "trait" : "line" },
		/* 160 */ { "x" : -1150, "y" : 175, "trait" : "line" },
		/* 161 */ { "x" : -1030, "y" : 175, "trait" : "line" },
		/* 162 */ { "x" : -840, "y" : 130, "trait" : "line", "curve" : -130, "color" : "C7E6BD" },
		/* 163 */ { "x" : -840, "y" : -130, "trait" : "line", "curve" : -130, "color" : "C7E6BD" },
		/* 164 */ { "x" : 935, "y" : 3, "trait" : "line" },
		/* 165 */ { "x" : 935, "y" : -3, "trait" : "line" },
		/* 166 */ { "x" : -935, "y" : 3, "trait" : "line" },
		/* 167 */ { "x" : -935, "y" : -3, "trait" : "line" },
		/* 168 */ { "x" : -1150, "y" : 570, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 169 */ { "x" : -1120, "y" : 600, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 170 */ { "x" : -1120, "y" : -600, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 171 */ { "x" : -1150, "y" : -570, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 172 */ { "x" : 1120, "y" : 600, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 173 */ { "x" : 1150, "y" : 570, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 174 */ { "x" : 1150, "y" : -570, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 175 */ { "x" : 1120, "y" : -600, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		
		/* 176 */ { "x" : 0, "y" : 180, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["blueKO" ], "trait" : "kickOffBarrier", "curve" : -180, "vis" : true, "color" : "C7E6BD" },
		/* 177 */ { "x" : 0, "y" : -180, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO" ], "trait" : "kickOffBarrier", "curve" : 180, "vis" : true, "color" : "C7E6BD" },
		/* 178 */ { "x" : 0, "y" : 180, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO" ], "trait" : "kickOffBarrier", "curve" : 180, "vis" : true, "color" : "C7E6BD" },
		
		/* 179 */ { "x" : -1030, "y" : -40, "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "curve" : 70, "color" : "90a688", "vis" : false },
		/* 180 */ { "x" : -1030, "y" : 40, "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "curve" : 70, "color" : "90a688", "vis" : false },
		/* 181 */ { "x" : 1030, "y" : -40, "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "curve" : -70, "color" : "90a688", "vis" : false },
		/* 182 */ { "x" : 1030, "y" : 40, "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "curve" : -70, "color" : "90a688", "vis" : false },
		/* 183 */ { "x" : 1030, "y" : -40, "trait" : "line", "color" : "90a688" },
		/* 184 */ { "x" : 1030, "y" : 40, "trait" : "line", "color" : "90a688" },
		/* 185 */ { "x" : -1030, "y" : -40, "trait" : "line", "color" : "90a688" },
		/* 186 */ { "x" : -1030, "y" : 40, "trait" : "line", "color" : "90a688" },
		/* 187 */ { "x" : 0, "y" : 3, "trait" : "line" },
		/* 188 */ { "x" : 0, "y" : -3, "trait" : "line" },
		
		/* 189 */ { "x" : -1157, "y" : 605, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		/* 190 */ { "x" : -1157, "y" : 655, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		/* 191 */ { "x" : -1157, "y" : -655, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		/* 192 */ { "x" : -1157, "y" : -605, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		/* 193 */ { "x" : 1157, "y" : 605, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		/* 194 */ { "x" : 1157, "y" : 655, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		/* 195 */ { "x" : 1157, "y" : -655, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		/* 196 */ { "x" : 1157, "y" : -605, "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea" },
		
		/* 197 */ { "x" : -1300, "y" : -485, "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "color" : "ec644b", "vis" : false },
		/* 198 */ { "x" : 1300, "y" : -485, "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "color" : "ec644b", "vis" : false },
		/* 199 */ { "x" : -1300, "y" : 485, "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "color" : "ec644b", "vis" : false },
		/* 200 */ { "x" : 1300, "y" : 485, "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "color" : "ec644b", "vis" : false },
		/* 201 */ { "x" : -1295, "y" : -320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 202 */ { "x" : -750, "y" : -320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ], "curve" : 0, "color" : "ffffff" },
		/* 203 */ { "x" : -750, "y" : 320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ], "curve" : 0, "color" : "ffffff" },
		/* 204 */ { "x" : -1295, "y" : 320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 205 */ { "x" : 1295, "y" : -320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 206 */ { "x" : 750, "y" : -320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ], "curve" : 0 },
		/* 207 */ { "x" : 750, "y" : 320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ], "curve" : 0 },
		/* 208 */ { "x" : 1295, "y" : 320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 209 */ { "x" : -1150, "y" : -124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		/* 210 */ { "x" : -1210, "y" : -124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "bias" : 0, "curve" : 5, "radius" : 4.5, "color" : "f2d8d8" },
		/* 211 */ { "x" : -1150, "y" : 124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		/* 212 */ { "x" : -1210, "y" : 124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "bias" : 0, "curve" : 5, "radius" : 4.5, "vis" : false, "color" : "f2d8d8" },
		/* 213 */ { "x" : -1250, "y" : -158, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "color" : "f2d8d8" },
		/* 214 */ { "x" : -1250, "y" : 158, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "color" : "f2d8d8" },
		/* 215 */ { "x" : 1150, "y" : 124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "color" : "ffffff" },
		/* 216 */ { "x" : 1210, "y" : 124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "curve" : -5, "color" : "ffffff" },
		/* 217 */ { "x" : 1150, "y" : -124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "color" : "ffffff" },
		/* 218 */ { "x" : 1210, "y" : -124, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "curve" : -5, "radius" : 6, "color" : "ffffff" },
		/* 219 */ { "x" : 1250, "y" : -158, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "color" : "e3f9fe" },
		/* 220 */ { "x" : 1250, "y" : 158, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "color" : "e3f9fe" },
		
		/* 221 */ { "x" : -1150, "y" : 600, "trait" : "line" },
		/* 222 */ { "x" : 1150, "y" : 600, "trait" : "line" },
		/* 223 */ { "x" : -1150, "y" : 600, "trait" : "line" },
		/* 224 */ { "x" : -1150, "y" : 600, "trait" : "line" },
		/* 225 */ { "x" : -1150, "y" : -600, "trait" : "line" },
		/* 226 */ { "x" : 1150, "y" : -600, "trait" : "line" },
		/* 227 */ { "x" : 1150, "y" : 600, "trait" : "line" },
		/* 228 */ { "x" : 1150, "y" : -600, "trait" : "line" },
		
		/* 229 */ { "x" : 1149, "y" : -600, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		/* 230 */ { "x" : 1148.4570005362957, "y" : 600.139953970475, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		/* 231 */ { "x" : -1149, "y" : -597, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		/* 232 */ { "x" : -1147.8317517070022, "y" : 601.4275705819381, "bCoef" : 0, "cMask" : ["wall" ], "cGroup" : ["all" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		
		/* 233 */ { "x" : 0, "y" : 600, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ], "trait" : "kickOffBarrier", "vis" : false },
		/* 234 */ { "x" : 0, "y" : 703.3392000000002, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ], "trait" : "kickOffBarrier", "vis" : false },
		/* 235 */ { "x" : 0, "y" : -706.6984320000003, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ], "trait" : "kickOffBarrier" },
		
		/* 236 */ { "x" : 0, "y" : 180, "trait" : "line", "color" : "C7E6BD" },
		/* 237 */ { "x" : 0, "y" : -180, "trait" : "line", "color" : "C7E6BD" }

	],

	"segments" : [
		{ "v0" : 0, "v1" : 1, "color" : "214d31", "trait" : "line" },
		{ "v0" : 2, "v1" : 3, "color" : "214d31", "trait" : "line" },
		{ "v0" : 4, "v1" : 5, "color" : "214d31", "trait" : "line" },
		{ "v0" : 6, "v1" : 7, "color" : "214d31", "trait" : "line" },
		{ "v0" : 8, "v1" : 9, "color" : "214d31", "trait" : "line" },
		{ "v0" : 10, "v1" : 11, "color" : "214d31", "trait" : "line" },
		{ "v0" : 12, "v1" : 13, "color" : "214d31", "trait" : "line" },
		{ "v0" : 14, "v1" : 15, "color" : "214d31", "trait" : "line" },
		{ "v0" : 16, "v1" : 17, "color" : "214d31", "trait" : "line" },
		{ "v0" : 18, "v1" : 19, "color" : "214d31", "trait" : "line" },
		{ "v0" : 20, "v1" : 21, "color" : "214d31", "trait" : "line" },
		{ "v0" : 22, "v1" : 23, "color" : "214d31", "trait" : "line" },
		{ "v0" : 24, "v1" : 25, "color" : "214d31", "trait" : "line" },
		{ "v0" : 26, "v1" : 27, "color" : "214d31", "trait" : "line" },
		{ "v0" : 28, "v1" : 29, "color" : "214d31", "trait" : "line" },
		{ "v0" : 30, "v1" : 31, "color" : "214d31", "trait" : "line" },
		{ "v0" : 32, "v1" : 33, "color" : "214d31", "trait" : "line" },
		{ "v0" : 34, "v1" : 35, "color" : "214d31", "trait" : "line" },
		{ "v0" : 36, "v1" : 37, "color" : "214d31", "trait" : "line" },
		{ "v0" : 38, "v1" : 39, "color" : "214d31", "trait" : "line" },
		{ "v0" : 40, "v1" : 41, "color" : "214d31", "trait" : "line" },
		{ "v0" : 42, "v1" : 43, "color" : "214d31", "trait" : "line" },
		{ "v0" : 44, "v1" : 45, "color" : "214d31", "trait" : "line" },
		{ "v0" : 46, "v1" : 47, "color" : "214d31", "trait" : "line" },
		{ "v0" : 48, "v1" : 49, "color" : "214d31", "trait" : "line" },
		{ "v0" : 50, "v1" : 51, "color" : "214d31", "trait" : "line" },
		{ "v0" : 52, "v1" : 53, "color" : "214d31", "trait" : "line" },
		{ "v0" : 54, "v1" : 55, "color" : "214d31", "trait" : "line" },
		{ "v0" : 56, "v1" : 57, "color" : "214d31", "trait" : "line" },
		{ "v0" : 58, "v1" : 59, "color" : "214d31", "trait" : "line" },
		{ "v0" : 60, "v1" : 61, "color" : "214d31", "trait" : "line" },
		{ "v0" : 62, "v1" : 63, "color" : "214d31", "trait" : "line" },
		{ "v0" : 64, "v1" : 65, "color" : "214d31", "trait" : "line" },
		{ "v0" : 66, "v1" : 67, "color" : "214d31", "trait" : "line" },
		{ "v0" : 68, "v1" : 69, "color" : "214d31", "trait" : "line" },
		{ "v0" : 70, "v1" : 71, "color" : "214d31", "trait" : "line" },
		{ "v0" : 72, "v1" : 73, "color" : "214d31", "trait" : "line" },
		{ "v0" : 74, "v1" : 75, "color" : "214d31", "trait" : "line" },
		{ "v0" : 76, "v1" : 77, "color" : "214d31", "trait" : "line" },
		{ "v0" : 78, "v1" : 79, "color" : "214d31", "trait" : "line" },
		{ "v0" : 80, "v1" : 81, "color" : "214d31", "trait" : "line" },
		{ "v0" : 82, "v1" : 83, "color" : "214d31", "trait" : "line" },
		{ "v0" : 84, "v1" : 85, "color" : "214d31", "trait" : "line" },
		{ "v0" : 86, "v1" : 87, "color" : "214d31", "trait" : "line" },
		{ "v0" : 88, "v1" : 89, "color" : "214d31", "trait" : "line" },
		{ "v0" : 90, "v1" : 91, "color" : "214d31", "trait" : "line" },
		{ "v0" : 92, "v1" : 93, "color" : "214d31", "trait" : "line" },
		{ "v0" : 94, "v1" : 95, "color" : "214d31", "trait" : "line" },
		{ "v0" : 96, "v1" : 97, "color" : "214d31", "trait" : "line" },
		{ "v0" : 98, "v1" : 99, "color" : "214d31", "trait" : "line" },
		{ "v0" : 100, "v1" : 101, "color" : "214d31", "trait" : "line" },
		{ "v0" : 102, "v1" : 103, "color" : "214d31", "trait" : "line" },
		{ "v0" : 104, "v1" : 105, "color" : "214d31", "trait" : "line" },
		{ "v0" : 106, "v1" : 107, "color" : "214d31", "trait" : "line" },
		{ "v0" : 108, "v1" : 109, "color" : "214d31", "trait" : "line" },
		{ "v0" : 110, "v1" : 111, "color" : "214d31", "trait" : "line" },
		{ "v0" : 112, "v1" : 113, "color" : "214d31", "trait" : "line" },
		{ "v0" : 114, "v1" : 115, "color" : "214d31", "trait" : "line" },
		{ "v0" : 116, "v1" : 117, "color" : "214d31", "trait" : "line" },
		{ "v0" : 118, "v1" : 119, "color" : "214d31", "trait" : "line" },
		{ "v0" : 120, "v1" : 121, "color" : "214d31", "trait" : "line" },
		{ "v0" : 122, "v1" : 123, "color" : "214d31", "trait" : "line" },
		{ "v0" : 124, "v1" : 125, "color" : "214d31", "trait" : "line" },
		{ "v0" : 126, "v1" : 127, "color" : "214d31", "trait" : "line" },
		{ "v0" : 128, "v1" : 129, "color" : "214d31", "trait" : "line" },
		{ "v0" : 130, "v1" : 131, "color" : "214d31", "trait" : "line" },
		{ "v0" : 132, "v1" : 133, "color" : "214d31", "trait" : "line" },
		{ "v0" : 134, "v1" : 135, "color" : "214d31", "trait" : "line" },
		{ "v0" : 136, "v1" : 137, "color" : "214d31", "trait" : "line" },
		{ "v0" : 138, "v1" : 139, "color" : "214d31", "trait" : "line" },
		
		{ "v0" : 140, "v1" : 141, "vis" : true, "color" : "C7E6BD", "trait" : "kickOffBarrier" },
		{ "v0" : 142, "v1" : 143, "vis" : true, "color" : "C7E6BD", "trait" : "kickOffBarrier" },
		
		{ "v0" : 144, "v1" : 145, "trait" : "line", "y" : 320 },
		{ "v0" : 145, "v1" : 147, "trait" : "line", "x" : 840 },
		{ "v0" : 146, "v1" : 147, "trait" : "line", "y" : -320 },
		{ "v0" : 148, "v1" : 149, "trait" : "line", "y" : 180 },
		{ "v0" : 149, "v1" : 151, "trait" : "line", "x" : 1030 },
		{ "v0" : 150, "v1" : 151, "trait" : "line", "y" : -180 },
		{ "v0" : 152, "v1" : 153, "curve" : -130, "trait" : "line", "x" : 840 },
		{ "v0" : 154, "v1" : 155, "trait" : "line", "y" : -320 },
		{ "v0" : 155, "v1" : 157, "trait" : "line", "x" : -840 },
		{ "v0" : 156, "v1" : 157, "trait" : "line", "y" : 320 },
		{ "v0" : 158, "v1" : 159, "trait" : "line", "y" : -175 },
		{ "v0" : 159, "v1" : 161, "trait" : "line", "x" : -1030 },
		{ "v0" : 160, "v1" : 161, "trait" : "line", "y" : 175 },
		{ "v0" : 162, "v1" : 163, "curve" : -130, "color" : "C7E6BD", "trait" : "line", "x" : -840 },
		{ "v0" : 164, "v1" : 165, "curve" : -180, "trait" : "line", "x" : 935 },
		{ "v0" : 166, "v1" : 167, "curve" : -180, "trait" : "line", "x" : -935 },
		{ "v0" : 164, "v1" : 165, "curve" : 180, "trait" : "line", "x" : 935 },
		{ "v0" : 166, "v1" : 167, "curve" : 180, "trait" : "line", "x" : -935 },
		{ "v0" : 164, "v1" : 165, "curve" : 90, "trait" : "line", "x" : 935 },
		{ "v0" : 166, "v1" : 167, "curve" : 90, "trait" : "line", "x" : -935 },
		{ "v0" : 164, "v1" : 165, "curve" : -90, "trait" : "line", "x" : 935 },
		{ "v0" : 166, "v1" : 167, "curve" : -90, "trait" : "line", "x" : -935 },
		{ "v0" : 164, "v1" : 165, "trait" : "line", "x" : 935 },
		{ "v0" : 166, "v1" : 167, "trait" : "line", "x" : -935 },
		{ "v0" : 168, "v1" : 169, "curve" : 90, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		{ "v0" : 170, "v1" : 171, "curve" : 90, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		{ "v0" : 172, "v1" : 173, "curve" : 90, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		{ "v0" : 174, "v1" : 175, "curve" : 90, "bCoef" : -2.65, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		
		{ "v0" : 177, "v1" : 176, "curve" : -180, "vis" : true, "color" : "C7E6BD", "bCoef" : 0.1, "cGroup" : ["blueKO" ], "trait" : "kickOffBarrier" },
		
		{ "v0" : 179, "v1" : 180, "curve" : 70, "vis" : false, "color" : "90a688", "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "x" : -1030 },
		{ "v0" : 181, "v1" : 182, "curve" : -70, "vis" : false, "color" : "90a688", "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "x" : 1030 },
		
		{ "v0" : 177, "v1" : 178, "curve" : 180, "vis" : true, "color" : "C7E6BD", "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO" ], "trait" : "kickOffBarrier" },
		
		{ "v0" : 183, "v1" : 184, "vis" : true, "color" : "90a688", "trait" : "line", "x" : 1030 },
		{ "v0" : 185, "v1" : 186, "vis" : true, "color" : "90a688", "trait" : "line", "x" : -1030 },
		{ "v0" : 187, "v1" : 188, "curve" : -180, "trait" : "line", "x" : -935 },
		{ "v0" : 187, "v1" : 188, "curve" : 180, "trait" : "line", "x" : -935 },
		{ "v0" : 187, "v1" : 188, "curve" : 90, "trait" : "line", "x" : -935 },
		{ "v0" : 187, "v1" : 188, "curve" : -90, "trait" : "line", "x" : -935 },
		{ "v0" : 187, "v1" : 188, "trait" : "line", "x" : -935 },
		
		{ "v0" : 189, "v1" : 190, "color" : "FFFF00", "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea", "x" : -1157 },
		{ "v0" : 191, "v1" : 192, "color" : "FFFF00", "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea", "x" : -1157 },
		{ "v0" : 193, "v1" : 194, "color" : "FFFF00", "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea", "x" : 1157 },
		{ "v0" : 195, "v1" : 196, "color" : "FFFF00", "bCoef" : 0, "cMask" : ["ball" ], "trait" : "ballArea", "x" : 1157 },
		
		{ "v0" : 197, "v1" : 198, "vis" : false, "color" : "ec644b", "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "y" : -485 },
		{ "v0" : 199, "v1" : 200, "vis" : false, "color" : "ec644b", "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "y" : 485 },
		{ "v0" : 201, "v1" : 202, "vis" : false, "color" : "ec644b", "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 202, "v1" : 203, "curve" : 0, "vis" : false, "color" : "ffffff", "cMask" : ["c0" ], "cGroup" : ["red","blue" ], "x" : -750 },
		{ "v0" : 203, "v1" : 204, "vis" : false, "color" : "ec644b", "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 205, "v1" : 206, "vis" : false, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 206, "v1" : 207, "curve" : 0, "vis" : false, "cMask" : ["c0" ], "cGroup" : ["red","blue" ], "x" : 750 },
		{ "v0" : 207, "v1" : 208, "vis" : false, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 209, "v1" : 210, "color" : "FFFFFF", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "y" : -124 },
		{ "v0" : 211, "v1" : 212, "color" : "FFFFFF", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "y" : 124 },
		{ "v0" : 210, "v1" : 213, "color" : "f2d8d8", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 212, "v1" : 214, "color" : "f2d8d8", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 215, "v1" : 216, "color" : "ffffff", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "y" : 124 },
		{ "v0" : 217, "v1" : 218, "color" : "ffffff", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ], "y" : -124 },
		{ "v0" : 218, "v1" : 219, "color" : "e3f9fe", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 216, "v1" : 220, "color" : "e3f9fe", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		
		{ "v0" : 221, "v1" : 222, "vis" : true, "color" : "C7E6BD", "trait" : "line", "y" : 600 },
		{ "v0" : 223, "v1" : 224, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : -1150 },
		{ "v0" : 225, "v1" : 226, "vis" : true, "color" : "C7E6BD", "trait" : "line", "y" : -600 },
		{ "v0" : 227, "v1" : 228, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : 1150 },
		{ "v0" : 225, "v1" : 224, "vis" : true, "color" : "C7E6BD", "trait" : "line" },
		
		{ "v0" : 216, "v1" : 218, "color" : "ffffff", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 210, "v1" : 212, "color" : "FFFFFF", "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["red","blue" ] },
		
		{ "v0" : 233, "v1" : 234, "vis" : false, "color" : "C7E6BD", "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ], "trait" : "kickOffBarrier", "x" : 0 },
		{ "v0" : 143, "v1" : 235, "vis" : false, "color" : "C7E6BD", "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ], "trait" : "kickOffBarrier", "x" : 0 },
		
		{ "v0" : 236, "v1" : 237, "vis" : true, "color" : "C7E6BD", "trait" : "line", "x" : 0 }

	],

	"goals" : [
		{ "p0" : [1160.55,-122 ], "p1" : [1160.55,122 ], "team" : "blue" },
		{ "p0" : [-1160.55,-122 ], "p1" : [-1160.55,122 ], "team" : "red" }

	],

"discs":[{"radius":0,"invMass":0,"pos":[-1311,-19],"color":"ffffffff","bCoef":0,"cMask":["red"],"cGroup":["ball"]},{"radius":0,"invMass":0,"pos":[-1310,29],"color":"ffffffff","bCoef":0,"cMask":["blue"],"cGroup":["ball"]},{"radius":0,"invMass":0,"pos":[-1308,62],"color":"ffffffff","bCoef":0,"cMask":["red","blue"],"cGroup":["ball"]},{"radius":2.7,"pos":[-1150,600],"cGroup":["ball"],"trait":"cornerflag"},{"radius":2.7,"pos":[1150,-600],"cGroup":["ball"],"trait":"cornerflag"},{"radius":2.7,"pos":[1150,600],"cGroup":["ball"],"trait":"cornerflag"},{"radius":5,"invMass":0,"pos":[-1150,-124],"bCoef":0.5,"trait":"goalPost"},{"radius":5,"invMass":0,"pos":[-1150,124],"bCoef":0.5,"trait":"goalPost"},{"radius":2,"invMass":0,"pos":[-1250,-158],"color":"000000","bCoef":1,"trait":"goalPost"},{"radius":2,"invMass":0,"pos":[-1250,158],"color":"000000","bCoef":1,"trait":"goalPost"},{"radius":5,"invMass":0,"pos":[1150,-124],"bCoef":0.5,"trait":"goalPost"},{"radius":5,"invMass":0,"pos":[1150,124],"bCoef":0.5,"trait":"goalPost"},{"radius":2,"invMass":0,"pos":[1250,-158],"color":"000000","bCoef":1,"trait":"goalPost"},{"radius":2,"invMass":0,"pos":[1250,158],"color":"000000","bCoef":1,"trait":"goalPost"},{"radius":2.7,"pos":[-1150,-600],"cGroup":["ball"],"trait":"cornerflag"},{"radius":0,"pos":[-1149,-485],"cMask":["none"]},{"radius":0,"pos":[1149,-485],"cMask":["none"]},{"radius":0,"pos":[-1149,-485],"cMask":["none"]},{"radius":0,"pos":[1149,-485],"cMask":["none"]},{"radius":0,"pos":[-1149,485],"cMask":["none"]},{"radius":0,"pos":[1149,485],"cMask":["none"]},{"radius":0,"pos":[-1149,485],"cMask":["none"]},{"radius":0,"pos":[1149,485],"cMask":["none"]},{"pos":[-6.5,-3],"radius":0.8,"invMass":1e+250,"damping":0.99,"color":"0","cGroup":["c0"]},{"radius":1.4,"invMass":1e+250,"damping":0.99,"color":"0","cGroup":["c0"]},{"pos":[6.5,-3],"radius":0.8,"invMass":1e+250,"damping":0.99,"color":"0","cGroup":["c0"]},{"pos":[0,-6.5],"radius":0.8,"invMass":1e+250,"damping":0.99,"color":"0","cGroup":["c0"]},{"pos":[-4.5,5.5],"radius":0.8,"invMass":1e+250,"damping":0.99,"color":"0","cGroup":["c0"]},{"pos":[4.5,5.5],"radius":0.8,"invMass":1e+250,"damping":0.99,"color":"0","cGroup":["c0"]},{"radius":1.4,"invMass":1e+250,"damping":0.99,"color":"transparent","cGroup":["c0"]}],


	"planes" : [
		{ "normal" : [0,1 ], "dist" : -627, "bCoef" : 0, "cGroup" : ["ball" ], "trait" : "ballArea" },
		{ "normal" : [0,-1 ], "dist" : -627, "bCoef" : 0, "cGroup" : ["ball" ], "trait" : "ballArea" },
		
		{ "normal" : [0,1 ], "dist" : -706, "bCoef" : 0 },
		{ "normal" : [0,-1 ], "dist" : -706, "bCoef" : 0 },
		{ "normal" : [1,0 ], "dist" : -1300, "bCoef" : 0 },
		{ "normal" : [-1,0 ], "dist" : -1300, "bCoef" : 0.1 },
		{ "normal" : [1,0 ], "dist" : -1240, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["ball" ] },
		{ "normal" : [-1,0 ], "dist" : -1240, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["ball" ] }

	],

	"traits" : {
		"ballArea" : { "vis" : false, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["ball" ] },
		"goalPost" : { "radius" : 5, "invMass" : 0, "bCoef" : 1, "cGroup" : ["ball" ] },
		"rightNet" : { "radius" : 0, "invMass" : 1, "bCoef" : 0, "cGroup" : ["ball","c3" ] },
		"leftNet" : { "radius" : 0, "invMass" : 1, "bCoef" : 0, "cGroup" : ["ball","c2" ] },
		"stanchion" : { "radius" : 3, "invMass" : 0, "bCoef" : 3, "cMask" : ["none" ] },
		"cornerflag" : { "radius" : 3, "invMass" : 0, "bCoef" : 0.2, "color" : "FFFF00", "cMask" : ["ball" ] },
		"reargoalNetleft" : { "vis" : true, "bCoef" : 0.1, "cMask" : ["ball","red","blue" ], "curve" : 10, "color" : "C7E6BD" },
		"reargoalNetright" : { "vis" : true, "bCoef" : 0.1, "cMask" : ["ball","red","blue" ], "curve" : -10, "color" : "C7E6BD" },
		"sidegoalNet" : { "vis" : true, "bCoef" : 1, "cMask" : ["ball","red","blue" ], "color" : "C7E6BD" },
		"kickOffBarrier" : { "vis" : false, "bCoef" : 0.1, "cGroup" : ["redKO","blueKO" ], "cMask" : ["red","blue" ] },
		"line" : { "vis" : true, "cMask" : [ ],"cGroup" : ["ball" ], "color" : "C7E6BD" }

	},

	"canBeStored" : false,

"joints":[{"d0":16,"d1":17,"strength":"rigid","color":"f5204b","length":null},{"d0":18,"d1":19,"strength":"rigid","color":"00e1ff","length":null},{"d0":20,"d1":21,"strength":"rigid","color":"f5204b","length":null},{"d0":22,"d1":23,"strength":"rigid","color":"00e1ff","length":null},{"d0":0,"d1":25,"length":0,"color":"transparent"},{"d0":0,"d1":24,"length":7.158910531638177,"color":"transparent"},{"d0":0,"d1":26,"length":7.158910531638177,"color":"transparent"},{"d0":0,"d1":27,"length":6.5,"color":"transparent"},{"d0":0,"d1":28,"length":7.106335201775948,"color":"transparent"},{"d0":0,"d1":29,"length":7.106335201775948,"color":"transparent"},{"d0":24,"d1":25,"length":7.158910531638177,"color":"transparent"},{"d0":25,"d1":26,"length":7.158910531638177,"color":"transparent"},{"d0":25,"d1":27,"length":6.5,"color":"transparent"},{"d0":25,"d1":28,"length":7.106335201775948,"color":"transparent"},{"d0":25,"d1":29,"length":7.106335201775948,"color":"transparent"},{"d0":24,"d1":27,"length":7.3824115301167,"color":"transparent"},{"d0":24,"d1":28,"length":8.73212459828649,"color":"transparent"},{"d0":28,"d1":29,"length":9,"color":"transparent"},{"d0":26,"d1":29,"length":8.73212459828649,"color":"transparent"},{"d0":26,"d1":27,"length":7.3824115301167,"color":"transparent"},{"d0":26,"d1":28,"length":13.901438774457844,"color":"transparent"},{"d0":27,"d1":28,"length":12.816005617976296,"color":"transparent"},{"d0":27,"d1":29,"length":12.816005617976296,"color":"transparent"},{"d0":24,"d1":29,"length":13.901438774457844,"color":"transparent"},{"d0":24,"d1":26,"length":13,"color":"transparent"},{"d0":0,"d1":25,"length":0,"color":"transparent"},{"d0":0,"d1":24,"length":7.158910531638177,"color":"transparent"},{"d0":0,"d1":26,"length":7.158910531638177,"color":"transparent"},{"d0":0,"d1":27,"length":6.5,"color":"transparent"},{"d0":0,"d1":28,"length":7.106335201775948,"color":"transparent"},{"d0":0,"d1":29,"length":7.106335201775948,"color":"transparent"},{"d0":24,"d1":25,"length":7.158910531638177,"color":"transparent"},{"d0":25,"d1":26,"length":7.158910531638177,"color":"transparent"},{"d0":25,"d1":27,"length":6.5,"color":"transparent"},{"d0":25,"d1":28,"length":7.106335201775948,"color":"transparent"},{"d0":25,"d1":29,"length":7.106335201775948,"color":"transparent"},{"d0":24,"d1":27,"length":7.3824115301167,"color":"transparent"},{"d0":24,"d1":28,"length":8.73212459828649,"color":"transparent"},{"d0":28,"d1":29,"length":9,"color":"transparent"},{"d0":26,"d1":29,"length":8.73212459828649,"color":"transparent"},{"d0":26,"d1":27,"length":7.3824115301167,"color":"transparent"},{"d0":26,"d1":28,"length":13.901438774457844,"color":"transparent"},{"d0":27,"d1":28,"length":12.816005617976296,"color":"transparent"},{"d0":27,"d1":29,"length":12.816005617976296,"color":"transparent"},{"d0":0,"d1":30,"length":0,"color":"transparent"},{"d0":25,"d1":30,"length":0,"color":"transparent"}],


	"cameraWidth" : 0,

	"cameraHeight" : 0,

	"maxViewWidth" : 0,

	"cameraFollow" : "ball",

	"kickOffReset" : "partial"
}

`;
	RSRMap = true;

	return realSoccerMapOveja;
}


function getPenaltyRedMap() {
	var PenaltyRedMap = `{

	"name" : "ᴘᴇɴᴀʟᴛʏ ʀᴇᴅ ᴛᴇᴀᴍ 🔴 | 𝐆𝐋𝐇",

	"width" : 1500,

	"height" : 734,

	"spawnDistance" : 300,

	"redSpawnPoints" : [
		[ 63, -33
		],
		[ 63, 33
		],
		[ 63, -99
		],
		[ 63, 99
		]

	],

	"blueSpawnPoints" : [
		[ 1376, 0
		],
		[ 1376, -48
		],
		[ 1376, 48
		],
		[ 1376, 96
		]

	],

	"bg" : { "type" : "grass", "width" : 1150, "height" : 600, "kickOffRadius" : 180, "cornerRadius" : 0, "color" : "6a9158" },

	"playerPhysics" : {
		"bCoef" : 0.5,
		"invMass" : 0.5,
		"damping" : 0.96,
		"acceleration" : 0.12,
		"kickingAcceleration" : 0.07,
		"kickingDamping" : 0.96,
		"kickStrength" : 5.65

	},

	"ballPhysics" : {
		"pos" : [ 935, 0
		],
		"radius" : 10

	},

	"vertexes" : [
		/* 0 */ { "x" : 1150, "y" : 337, "trait" : "line", "color" : "b3d4a7" },
		/* 1 */ { "x" : 840, "y" : 337, "trait" : "line", "color" : "b3d4a7" },
		/* 2 */ { "x" : 1150, "y" : -337, "trait" : "line", "color" : "b3d4a7" },
		/* 3 */ { "x" : 840, "y" : -337, "trait" : "line", "color" : "b3d4a7" },
		/* 4 */ { "x" : 1150, "y" : 198, "trait" : "line", "color" : "b3d4a7" },
		/* 5 */ { "x" : 1031, "y" : 198, "trait" : "line", "color" : "b3d4a7" },
		/* 6 */ { "x" : 1150, "y" : -198, "trait" : "line", "color" : "b3d4a7" },
		/* 7 */ { "x" : 1029, "y" : -198, "trait" : "line", "color" : "b3d4a7" },
		/* 8 */ { "x" : 840, "y" : -170, "trait" : "line", "curve" : -110, "color" : "b3d4a7" },
		/* 9 */ { "x" : 840, "y" : 170, "trait" : "line", "curve" : -110, "color" : "b3d4a7" },
		/* 10 */ { "x" : -1150, "y" : -337, "trait" : "line", "color" : "b3d4a7" },
		/* 11 */ { "x" : -840, "y" : -337, "trait" : "line", "color" : "b3d4a7" },
		/* 12 */ { "x" : -1150, "y" : 337, "trait" : "line", "color" : "b3d4a7" },
		/* 13 */ { "x" : -840, "y" : 337, "trait" : "line", "color" : "b3d4a7" },
		/* 14 */ { "x" : -1150, "y" : -198, "trait" : "line", "color" : "b3d4a7" },
		/* 15 */ { "x" : -1030, "y" : -198, "trait" : "line", "color" : "b3d4a7" },
		/* 16 */ { "x" : -1150, "y" : 198, "trait" : "line", "color" : "b3d4a7" },
		/* 17 */ { "x" : -1030, "y" : 198, "trait" : "line", "color" : "b3d4a7" },
		/* 18 */ { "x" : -840, "y" : 170, "trait" : "line", "curve" : -110, "color" : "b3d4a7" },
		/* 19 */ { "x" : -840, "y" : -170, "trait" : "line", "curve" : -110, "color" : "b3d4a7" },
		/* 20 */ { "x" : 935, "y" : 4, "trait" : "line", "color" : "a7cf9b" },
		/* 21 */ { "x" : 935, "y" : -4, "trait" : "line", "color" : "a7cf9b" },
		/* 22 */ { "x" : -935, "y" : 4, "trait" : "line", "color" : "a7cf9b" },
		/* 23 */ { "x" : -935, "y" : -4, "trait" : "line", "color" : "a7cf9b" },
		/* 24 */ { "x" : -1150, "y" : 574, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "b3d4a7" },
		/* 25 */ { "x" : -1125, "y" : 599, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "b3d4a7" },
		/* 26 */ { "x" : -1125, "y" : -600, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "b3d4a7" },
		/* 27 */ { "x" : -1150, "y" : -575, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "b3d4a7" },
		/* 28 */ { "x" : 1124, "y" : 600, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "b3d4a7" },
		/* 29 */ { "x" : 1150, "y" : 574, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "b3d4a7" },
		/* 30 */ { "x" : 1150, "y" : -574, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "b3d4a7" },
		/* 31 */ { "x" : 1124, "y" : -600, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "b3d4a7" },
		/* 32 */ { "x" : 0, "y" : -4, "trait" : "line", "color" : "b3d4a7" },
		/* 33 */ { "x" : 0, "y" : 4, "trait" : "line", "color" : "b3d4a7" },
		/* 34 */ { "x" : 0, "y" : -4, "trait" : "line", "color" : "b3d4a7" },
		/* 35 */ { "x" : 0, "y" : 4, "trait" : "line", "color" : "b3d4a7" },
		/* 36 */ { "x" : -1170, "y" : 150, "bCoef" : -4.5, "cMask" : ["ball" ], "trait" : "line", "curve" : 40, "color" : "546f48" },
		/* 37 */ { "x" : -1170, "y" : 250, "bCoef" : -4.5, "cMask" : ["ball" ], "trait" : "line", "curve" : 40, "color" : "546f48" },
		/* 38 */ { "x" : 1170, "y" : 150, "bCoef" : -4.5, "cMask" : ["ball" ], "trait" : "line", "curve" : -40, "color" : "546f48" },
		/* 39 */ { "x" : 1170, "y" : 250, "bCoef" : -4.5, "cMask" : ["ball" ], "trait" : "line", "curve" : -40, "color" : "546f48" },
		/* 40 */ { "x" : -1170, "y" : -150, "bCoef" : -4.5, "cMask" : ["ball" ], "trait" : "line", "curve" : -40, "color" : "546f48" },
		/* 41 */ { "x" : -1170, "y" : -250, "bCoef" : -4.5, "cMask" : ["ball" ], "trait" : "line", "curve" : -40, "color" : "546f48" },
		/* 42 */ { "x" : 1170, "y" : -150, "bCoef" : -4.5, "cMask" : ["ball" ], "trait" : "line", "curve" : 40, "color" : "546f48" },
		/* 43 */ { "x" : 1170, "y" : -250, "bCoef" : -4.5, "cMask" : ["ball" ], "trait" : "line", "curve" : 40, "color" : "546f48" },
		/* 44 */ { "x" : 1161, "y" : -599, "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line", "curve" : -60, "color" : "546f48" },
		/* 45 */ { "x" : 1189, "y" : -579, "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line", "curve" : -60, "color" : "546f48" },
		/* 46 */ { "x" : 1161, "y" : 599, "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line", "curve" : 60, "color" : "546f48" },
		/* 47 */ { "x" : 1189, "y" : 579, "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line", "curve" : 60, "color" : "546f48" },
		/* 48 */ { "x" : -1162, "y" : 599, "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line", "curve" : -60, "color" : "546f48" },
		/* 49 */ { "x" : -1190, "y" : 579, "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line", "curve" : -60, "color" : "546f48" },
		/* 50 */ { "x" : -1162, "y" : -600, "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line", "curve" : 60, "color" : "546f48" },
		/* 51 */ { "x" : -1190, "y" : -580, "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line", "curve" : 60, "color" : "546f48" },
		
		/* 52 */ { "x" : -1177, "y" : -250, "bCoef" : 0, "cMask" : ["ball" ] },
		/* 53 */ { "x" : -1177, "y" : -150, "cMask" : ["ball" ] },
		
		/* 54 */ { "x" : -1170, "y" : 250, "bCoef" : -5, "cMask" : ["ball" ], "trait" : "line", "curve" : -40, "color" : "546f48" },
		
		/* 55 */ { "x" : -1177, "y" : 250, "bCoef" : 0, "cMask" : ["ball" ] },
		
		/* 56 */ { "x" : -1170, "y" : 150, "bCoef" : -5, "cMask" : ["ball" ], "trait" : "line", "curve" : -40, "color" : "546f48" },
		
		/* 57 */ { "x" : -1177, "y" : 150, "cMask" : ["ball" ] },
		/* 58 */ { "x" : 1177, "y" : -250, "bCoef" : 0, "cMask" : ["ball" ] },
		/* 59 */ { "x" : 1177, "y" : -150, "cMask" : ["ball" ] },
		
		/* 60 */ { "x" : 1170, "y" : -150, "bCoef" : -5, "cMask" : ["ball" ], "trait" : "line", "curve" : -40, "color" : "546f48" },
		/* 61 */ { "x" : 1170, "y" : -250, "bCoef" : -5, "cMask" : ["ball" ], "trait" : "line", "curve" : -40, "color" : "546f48" },
		
		/* 62 */ { "x" : 1177, "y" : 250, "bCoef" : 0, "cMask" : ["ball" ] },
		/* 63 */ { "x" : 1177, "y" : 150, "cMask" : ["ball" ] },
		
		/* 64 */ { "x" : 1170, "y" : 250, "bCoef" : -5, "cMask" : ["ball" ], "trait" : "line", "curve" : -40, "color" : "546f48" },
		/* 65 */ { "x" : 1170, "y" : 150, "bCoef" : -5, "cMask" : ["ball" ], "trait" : "line", "curve" : -40, "color" : "546f48" },
		/* 66 */ { "x" : 0, "y" : 180, "cMask" : ["ball" ], "cGroup" : ["ball" ], "trait" : "line", "color" : "b3d4a7", "vis" : true, "curve" : 0 },
		/* 67 */ { "x" : 0, "y" : -180, "cMask" : ["ball" ], "cGroup" : ["ball" ], "trait" : "line", "color" : "b3d4a7", "vis" : true, "curve" : 0 },
		/* 68 */ { "x" : -818, "y" : -600, "trait" : "line", "curve" : 90, "color" : "638750" },
		/* 69 */ { "x" : -1150, "y" : -347, "trait" : "line", "curve" : 90, "color" : "638750" },
		/* 70 */ { "x" : -1150, "y" : 347, "trait" : "line", "color" : "638750" },
		/* 71 */ { "x" : -820, "y" : 600, "trait" : "line", "color" : "638750" },
		/* 72 */ { "x" : 820, "y" : 600, "trait" : "line", "color" : "638750" },
		/* 73 */ { "x" : 1150, "y" : 347, "trait" : "line", "color" : "638750" },
		/* 74 */ { "x" : 820, "y" : -600, "trait" : "line", "curve" : -90, "color" : "638750" },
		/* 75 */ { "x" : 1150, "y" : -347, "trait" : "line", "curve" : -90, "color" : "638750" },
		/* 76 */ { "x" : 1150, "y" : -525, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "638750" },
		/* 77 */ { "x" : -1150, "y" : -525, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "638750" },
		/* 78 */ { "x" : 1150, "y" : 525, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "638750" },
		/* 79 */ { "x" : -1150, "y" : 525, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "638750" },
		/* 80 */ { "x" : -1150, "y" : -600, "trait" : "line", "color" : "b3d4a7" },
		/* 81 */ { "x" : -1150, "y" : 600, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "FFFF00" },
		/* 82 */ { "x" : 1150, "y" : 600, "trait" : "line", "color" : "b3d4a7" },
		/* 83 */ { "x" : 1150, "y" : -600, "trait" : "line", "color" : "b3d4a7" },
		
		/* 84 */ { "x" : -113, "y" : -138, "bCoef" : 0, "cMask" : ["blue" ], "cGroup" : ["blueKO","redKO" ], "curve" : 235 },
		/* 85 */ { "x" : -115, "y" : 135, "bCoef" : 0, "cMask" : ["blue" ], "cGroup" : ["blueKO","redKO" ], "curve" : 235 },
		/* 86 */ { "x" : 1495, "y" : -150, "bCoef" : 0, "cMask" : ["blue" ], "dist" : -1400 },
		/* 87 */ { "x" : 1300, "y" : -150, "bCoef" : 0, "cMask" : ["blue" ] },
		/* 88 */ { "x" : 1300, "y" : 150, "bCoef" : 0, "cMask" : ["blue" ], "curve" : 0 },
		/* 89 */ { "x" : 1489, "y" : 150, "bCoef" : 0, "cMask" : ["blue" ], "dist" : -1400, "curve" : 0 },
		
		/* 90 */ { "x" : 1300, "y" : -150, "trait" : "kickOffBarrier", "cMask" : ["blue" ] },
		
		/* 91 */ { "x" : 1448, "y" : -120, "bCoef" : 0, "cMask" : ["blue" ] },
		/* 92 */ { "x" : 1448, "y" : 120, "bCoef" : 0, "cMask" : ["blue" ] },
		
		/* 93 */ { "x" : 1150, "y" : -120.92552225676228, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "b3d4a7", "curve" : 0 },
		/* 94 */ { "x" : 1212.8375029631984, "y" : -120.92552225676228, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		/* 95 */ { "x" : 1150.1431278225696, "y" : 116.05779951814779, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		/* 96 */ { "x" : 1212.9145962189946, "y" : 116.05779951814779, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		
		/* 97 */ { "x" : 1150, "y" : 116.05779951814779, "bCoef" : 0, "cMask" : ["wall" ], "curve" : 0, "color" : "b3d4a7" },
		/* 98 */ { "x" : 1259, "y" : -148.867722739, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ffffff" },
		/* 99 */ { "x" : 1259.5, "y" : 144, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ffffff" },
		
		/* 100 */ { "x" : 1213.8375029631984, "y" : -118.92552225676228, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "6a9158", "curve" : 0 },
		
		/* 101 */ { "x" : 1260, "y" : -146.867722739, "bCoef" : 0, "cMask" : ["wall" ], "color" : "6a9158" },
		
		/* 102 */ { "x" : 1211.8375029631984, "y" : -122.92552225676228, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "6a9158", "curve" : 0 },
		
		/* 103 */ { "x" : 1258, "y" : -150.867722739, "bCoef" : 0, "cMask" : ["wall" ], "color" : "6a9158" },
		
		/* 104 */ { "x" : 1214.9145962189946, "y" : 114.05779951814779, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "6a9158", "curve" : 0 },
		
		/* 105 */ { "x" : 1261.5, "y" : 142, "bCoef" : 0, "cMask" : ["wall" ], "color" : "6a9158" },
		
		/* 106 */ { "x" : 1213.9145962189946, "y" : 119.05779951814779, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "6a9158", "curve" : 0 },
		
		/* 107 */ { "x" : 1260.5, "y" : 147, "bCoef" : 0, "cMask" : ["wall" ], "color" : "6a9158" },
		
		/* 108 */ { "x" : 1150, "y" : -120, "bCoef" : 0.5, "cMask" : ["blue","ball" ], "trait" : "line", "color" : "C7E6BD", "curve" : 0 },
		/* 109 */ { "x" : 1213, "y" : -120, "bCoef" : 0, "cMask" : ["blue","ball" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		/* 110 */ { "x" : 1150, "y" : 116, "bCoef" : 0.5, "cMask" : ["blue","ball" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		/* 111 */ { "x" : 1213, "y" : 116, "bCoef" : 0, "cMask" : ["blue","ball" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		/* 112 */ { "x" : -1150, "y" : 118.00879788978456, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "b3d4a7", "curve" : 0 },
		/* 113 */ { "x" : -1213.3215131279903, "y" : 117.74394897515494, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		/* 114 */ { "x" : -1149.628852252629, "y" : -118.97302216202547, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		/* 115 */ { "x" : -1212.3997630875529, "y" : -119.23759275268432, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		
		/* 116 */ { "x" : -1150, "y" : -118.97241890367377, "bCoef" : 0, "cMask" : ["wall" ], "curve" : 0, "color" : "b3d4a7" },
		/* 117 */ { "x" : -1259.6013715431845, "y" : 145.49133453725509, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ffffff" },
		/* 118 */ { "x" : -1258.866981665902, "y" : -147.37589424369935, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ffffff" },
		
		/* 119 */ { "x" : -1214.3130746008003, "y" : 115.73975191756831, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "6a9158", "curve" : 0 },
		
		/* 120 */ { "x" : -1260.5929330159947, "y" : 143.48713747966846, "bCoef" : 0, "cMask" : ["wall" ], "color" : "6a9158" },
		
		/* 121 */ { "x" : -1212.3299516551804, "y" : 119.74814603274154, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "6a9158", "curve" : 0 },
		
		/* 122 */ { "x" : -1258.6098100703748, "y" : 147.4955315948417, "bCoef" : 0, "cMask" : ["wall" ], "color" : "6a9158" },
		
		/* 123 */ { "x" : -1214.4081749675327, "y" : -117.24604016227767, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "6a9158", "curve" : 0 },
		
		/* 124 */ { "x" : -1260.8753935458817, "y" : -145.3843416532927, "bCoef" : 0, "cMask" : ["wall" ], "color" : "6a9158" },
		
		/* 125 */ { "x" : -1213.3871097379695, "y" : -122.24178092786758, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "6a9158", "curve" : 0 },
		
		/* 126 */ { "x" : -1259.8543283163185, "y" : -150.3800824188826, "bCoef" : 0, "cMask" : ["wall" ], "color" : "6a9158" },
		
		/* 127 */ { "x" : -1150.4806674009055, "y" : 117.08328385388425, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "C7E6BD", "curve" : 0 },
		/* 128 */ { "x" : -1213.4801078094943, "y" : 116.81775004310506, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		/* 129 */ { "x" : -1149.485969316082, "y" : -118.91461989892463, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		/* 130 */ { "x" : -1212.4854097246707, "y" : -119.1801537097038, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		
		/* 131 */ { "x" : 80.06046236735585, "y" : 736, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 132 */ { "x" : 80.06046236735585, "y" : 724, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		
		/* 133 */ { "x" : -1150, "y" : -602, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		/* 134 */ { "x" : -1150, "y" : -620.49609375, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		
		/* 135 */ { "x" : -1148, "y" : -620.49609375, "bCoef" : 0, "cMask" : ["wall" ] },
		/* 136 */ { "x" : -1148, "y" : -602, "bCoef" : 0, "cMask" : ["wall" ] },
		/* 137 */ { "x" : -70, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 138 */ { "x" : -90, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 139 */ { "x" : -70, "y" : 687, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 140 */ { "x" : -110, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 141 */ { "x" : -130, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 142 */ { "x" : -150, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 143 */ { "x" : -170, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 144 */ { "x" : -190, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 145 */ { "x" : -210, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 146 */ { "x" : -230, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 147 */ { "x" : -250, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 148 */ { "x" : -287.01500879340676, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 149 */ { "x" : -286.93953763264415, "y" : 687, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 150 */ { "x" : -270, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 151 */ { "x" : -286.93953763264415, "y" : 736, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "vis" : false },
		/* 152 */ { "x" : -286.93953763264415, "y" : 724, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 153 */ { "x" : -286.93953763264415, "y" : 710, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 154 */ { "x" : -286.93953763264415, "y" : 698, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 155 */ { "x" : -70, "y" : 734.04149391746, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 156 */ { "x" : -70, "y" : 722.0417049239776, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 157 */ { "x" : -70, "y" : 710, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 158 */ { "x" : -70, "y" : 698, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 159 */ { "x" : 297, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 160 */ { "x" : 277, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 161 */ { "x" : 297, "y" : 687, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 162 */ { "x" : 257, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 163 */ { "x" : 237, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 164 */ { "x" : 217, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 165 */ { "x" : 197, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 166 */ { "x" : 177, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 167 */ { "x" : 157, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 168 */ { "x" : 137, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 169 */ { "x" : 117, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 170 */ { "x" : 79.98499120659324, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 171 */ { "x" : 80.06046236735585, "y" : 687, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 172 */ { "x" : 97, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 173 */ { "x" : 80.06046236735585, "y" : 736, "bCoef" : 10, "cGroup" : ["all" ] },
		/* 174 */ { "x" : 80.06046236735585, "y" : 724, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 175 */ { "x" : 80.06046236735585, "y" : 710, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 176 */ { "x" : 80.06046236735585, "y" : 698, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 177 */ { "x" : 297, "y" : 734.04149391746, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "vis" : false },
		/* 178 */ { "x" : 297, "y" : 722.0417049239776, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 179 */ { "x" : 297, "y" : 710, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 180 */ { "x" : 297, "y" : 698, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		
		/* 181 */ { "x" : 1149.968665547433, "y" : -618.9686646206542, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		/* 182 */ { "x" : 1150.0694602019682, "y" : -600.4728455134504, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		
		/* 183 */ { "x" : 1148.069489899352, "y" : -600.4619464927276, "bCoef" : 0, "cMask" : ["wall" ] },
		/* 184 */ { "x" : 1147.9686952448167, "y" : -618.9577655999315, "bCoef" : 0, "cMask" : ["wall" ] },
		
		/* 185 */ { "x" : 1158, "y" : -623, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "beff28" },
		
		/* 186 */ { "x" : 1168, "y" : -623, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ff3034" },
		
		/* 187 */ { "x" : 1149, "y" : -623, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "beff28" },
		/* 188 */ { "x" : 1158, "y" : -619.3999938964844, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "beff28" },
		
		/* 189 */ { "x" : 1149, "y" : -619.3999938964844, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ff3034" },
		
		/* 190 */ { "x" : 1168, "y" : -619.3999938964844, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "beff28" },
		
		/* 191 */ { "x" : 1149.7396826762401, "y" : 597.9263578863065, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		/* 192 */ { "x" : 1153.08526210564, "y" : 579.1424902194007, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		
		/* 193 */ { "x" : 1155.0010783610655, "y" : 579.7166400913391, "bCoef" : 0, "cMask" : ["wall" ] },
		/* 194 */ { "x" : 1151.7040246689874, "y" : 598.3023373212908, "bCoef" : 0, "cMask" : ["wall" ] },
		
		/* 195 */ { "x" : 1161.6678517948505, "y" : 578.0712784773244, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "beff28" },
		
		/* 196 */ { "x" : 1171.2713154212654, "y" : 580.8593757453787, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ff3034" },
		
		/* 197 */ { "x" : 1153.0247345310775, "y" : 575.5619909360759, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "beff28" },
		/* 198 */ { "x" : 1160.6641350766317, "y" : 581.528531244323, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "beff28" },
		
		/* 199 */ { "x" : 1152.0210178128586, "y" : 579.0192437030742, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ff3034" },
		
		/* 200 */ { "x" : 1170.2675987030466, "y" : 584.316628512377, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "beff28" },
		
		/* 201 */ { "x" : -1152.8011166944932, "y" : 581.2713204942369, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		/* 202 */ { "x" : -1150.0489225384003, "y" : 599.5615066971152, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		
		/* 203 */ { "x" : -1152.026657561816, "y" : 599.8591040377528, "bCoef" : 0, "cMask" : ["wall" ] },
		/* 204 */ { "x" : -1154.7788517179088, "y" : 581.5689178348746, "bCoef" : 0, "cMask" : ["wall" ] },
		
		/* 205 */ { "x" : -1162.170956870286, "y" : 578.11573185304, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "beff28" },
		
		/* 206 */ { "x" : -1152.4133863896525, "y" : 575.9271664975008, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ff3034" },
		
		/* 207 */ { "x" : -1170.9527703028564, "y" : 580.085440673025, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "beff28" },
		/* 208 */ { "x" : -1161.383072006498, "y" : 581.6284631816164, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "beff28" },
		
		/* 209 */ { "x" : -1170.1648854390683, "y" : 583.5981720016015, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ff3034" },
		
		/* 210 */ { "x" : -1151.6255015258641, "y" : 579.4398978260773, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "beff28" },
		/* 211 */ { "x" : -1159, "y" : -623, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "beff28", "radius" : 20 },
		
		/* 212 */ { "x" : -1149, "y" : -623, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ff3034", "radius" : 20 },
		
		/* 213 */ { "x" : -1168, "y" : -623, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "beff28", "radius" : 20 },
		/* 214 */ { "x" : -1159, "y" : -619.3999938964844, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "beff28", "radius" : 20 },
		
		/* 215 */ { "x" : -1168, "y" : -619.3999938964844, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ff3034", "radius" : 20 },
		
		/* 216 */ { "x" : -1149, "y" : -619.3999938964844, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "beff28", "radius" : 20 },
		
		/* 217 */ { "x" : -199, "y" : 711, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "curve" : -400 },
		/* 218 */ { "x" : -199, "y" : 700, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "curve" : -400 },
		/* 219 */ { "x" : 164, "y" : 704, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "curve" : -400 },
		/* 220 */ { "x" : 166, "y" : 696, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "curve" : -400 },
		
		/* 221 */ { "x" : 936.0539164518007, "y" : -13, "trait" : "powerboost", "bCoef" : -2.2, "vis" : false, "cMask" : ["ball" ], "pos" : [935,0 ], "radius" : 10 },
		/* 222 */ { "x" : 935.9681020082038, "y" : 13, "trait" : "powerboost", "bCoef" : -2.2, "vis" : false, "cMask" : ["ball" ], "pos" : [935,0 ], "radius" : 10 },
		
		/* 223 */ { "x" : 1134, "y" : 116.23596984067328, "bCoef" : 1, "cMask" : ["blue" ], "cGroup" : ["redKO" ], "vis" : false, "curve" : 0 },
		/* 224 */ { "x" : 1134, "y" : -123.76361382468703, "bCoef" : 1, "cMask" : ["blue" ], "cGroup" : ["redKO" ], "vis" : false, "curve" : 0 },
		/* 225 */ { "bCoef" : 0, "cMask" : ["blue" ], "x" : 1300, "y" : 150 },
		/* 226 */ { "bCoef" : 0, "cMask" : ["blue" ], "x" : 1300, "y" : 18 },
		/* 227 */ { "bCoef" : 0, "cMask" : ["blue" ], "x" : 1240, "y" : 18 },
		/* 228 */ { "bCoef" : 0, "cMask" : ["blue" ], "x" : 1300, "y" : -18 },
		/* 229 */ { "bCoef" : 0, "cMask" : ["blue" ], "x" : 1240, "y" : -18 },
		/* 230 */ { "bCoef" : -2.4, "cMask" : ["blue" ], "x" : 1233.0188554822, "y" : 65.50390625 },
		/* 231 */ { "bCoef" : -2.4, "cMask" : ["blue" ], "x" : 1233.0188554822, "y" : -65.49609375 },
		/* 232 */ { "bCoef" : 0, "cMask" : ["red" ], "x" : 735, "y" : 620, "curve" : -74, "vis" : false },
		/* 233 */ { "bCoef" : 0, "cMask" : ["red" ], "x" : 735, "y" : -620, "curve" : -74 },
		/* 234 */ { "x" : 1134, "y" : 116.23596984067328, "bCoef" : 1, "cMask" : ["blue" ], "cGroup" : ["blueKO" ], "vis" : false, "curve" : 0, "radius" : 15, "pos" : [67,0 ] },
		/* 235 */ { "x" : 1134, "y" : -123.76361382468703, "bCoef" : 1, "cMask" : ["blue" ], "cGroup" : ["blueKO" ], "vis" : false, "curve" : 0, "radius" : 15, "pos" : [67,0 ] },
		/* 236 */ { "bCoef" : 0, "cMask" : ["red" ], "x" : 735, "y" : 661, "vis" : false },
		/* 237 */ { "bCoef" : 0, "cMask" : ["red" ], "x" : 735, "y" : -664 }

	],

	"segments" : [
		{ "v0" : 0, "v1" : 1, "color" : "b3d4a7", "trait" : "line", "y" : 250 },
		{ "v0" : 1, "v1" : 3, "color" : "b3d4a7", "trait" : "line", "x" : 840 },
		{ "v0" : 2, "v1" : 3, "color" : "b3d4a7", "trait" : "line", "y" : -250 },
		{ "v0" : 4, "v1" : 5, "color" : "b3d4a7", "trait" : "line", "y" : 195 },
		{ "v0" : 5, "v1" : 7, "color" : "b3d4a7", "trait" : "line", "x" : 1030 },
		{ "v0" : 6, "v1" : 7, "color" : "b3d4a7", "trait" : "line", "y" : -150 },
		{ "v0" : 8, "v1" : 9, "curve" : -110, "color" : "b3d4a7", "trait" : "line", "x" : 840 },
		{ "v0" : 10, "v1" : 11, "color" : "b3d4a7", "trait" : "line", "y" : -337 },
		{ "v0" : 11, "v1" : 13, "color" : "b3d4a7", "trait" : "line", "x" : -840 },
		{ "v0" : 12, "v1" : 13, "color" : "b3d4a7", "trait" : "line", "y" : 250 },
		{ "v0" : 14, "v1" : 15, "color" : "b3d4a7", "trait" : "line", "y" : -150 },
		{ "v0" : 15, "v1" : 17, "color" : "b3d4a7", "trait" : "line", "x" : -1030 },
		{ "v0" : 16, "v1" : 17, "color" : "b3d4a7", "trait" : "line", "y" : 150 },
		{ "v0" : 18, "v1" : 19, "curve" : -110, "color" : "b3d4a7", "trait" : "line", "x" : -840 },
		{ "v0" : 20, "v1" : 21, "curve" : -180, "color" : "a7cf9b", "trait" : "line", "x" : 935 },
		{ "v0" : 22, "v1" : 23, "curve" : -180, "color" : "a7cf9b", "trait" : "line", "x" : -935 },
		{ "v0" : 20, "v1" : 21, "curve" : 180, "color" : "a7cf9b", "trait" : "line", "x" : 935 },
		{ "v0" : 22, "v1" : 23, "curve" : 180, "color" : "a7cf9b", "trait" : "line", "x" : -935 },
		{ "v0" : 20, "v1" : 21, "curve" : 90, "color" : "a7cf9b", "trait" : "line", "x" : 935 },
		{ "v0" : 22, "v1" : 23, "curve" : 90, "color" : "a7cf9b", "trait" : "line", "x" : -935 },
		{ "v0" : 20, "v1" : 21, "curve" : -90, "color" : "a7cf9b", "trait" : "line", "x" : 935 },
		{ "v0" : 22, "v1" : 23, "curve" : -90, "color" : "a7cf9b", "trait" : "line", "x" : -935 },
		{ "v0" : 20, "v1" : 21, "color" : "a7cf9b", "trait" : "line", "x" : 935 },
		{ "v0" : 22, "v1" : 23, "color" : "a7cf9b", "trait" : "line", "x" : -935 },
		{ "v0" : 24, "v1" : 25, "curve" : 90, "color" : "b3d4a7", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line" },
		{ "v0" : 26, "v1" : 27, "curve" : 90, "color" : "b3d4a7", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line" },
		{ "v0" : 28, "v1" : 29, "curve" : 90, "color" : "b3d4a7", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line" },
		{ "v0" : 30, "v1" : 31, "curve" : 90, "color" : "b3d4a7", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line" },
		{ "v0" : 32, "v1" : 33, "curve" : -180, "color" : "b3d4a7", "trait" : "line" },
		{ "v0" : 34, "v1" : 35, "curve" : 180, "color" : "b3d4a7", "trait" : "line" },
		{ "v0" : 32, "v1" : 33, "curve" : -90, "color" : "b3d4a7", "trait" : "line" },
		{ "v0" : 34, "v1" : 35, "curve" : 90, "color" : "b3d4a7", "trait" : "line" },
		{ "v0" : 36, "v1" : 37, "curve" : 40, "vis" : true, "color" : "546f48", "bCoef" : -4.7, "cMask" : ["ball" ], "trait" : "line", "x" : -1220 },
		{ "v0" : 38, "v1" : 39, "curve" : -40, "vis" : true, "color" : "546f48", "bCoef" : -4.7, "cMask" : ["ball" ], "trait" : "line", "x" : 1220 },
		{ "v0" : 40, "v1" : 41, "curve" : -40, "vis" : true, "color" : "546f48", "bCoef" : -4.7, "cMask" : ["ball" ], "trait" : "line", "x" : -1220 },
		{ "v0" : 42, "v1" : 43, "curve" : 40, "vis" : true, "color" : "546f48", "bCoef" : -4.7, "cMask" : ["ball" ], "trait" : "line", "x" : 1220 },
		{ "v0" : 44, "v1" : 45, "curve" : -60, "vis" : true, "color" : "546f48", "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line" },
		{ "v0" : 46, "v1" : 47, "curve" : 60, "vis" : true, "color" : "546f48", "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line" },
		{ "v0" : 48, "v1" : 49, "curve" : -60, "vis" : true, "color" : "546f48", "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line" },
		{ "v0" : 50, "v1" : 51, "curve" : 60, "vis" : true, "color" : "546f48", "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line" },
		
		{ "v0" : 41, "v1" : 52, "vis" : true, "bCoef" : 0, "cMask" : ["ball" ] },
		{ "v0" : 40, "v1" : 53, "vis" : true, "cMask" : ["ball" ] },
		{ "v0" : 57, "v1" : 56, "vis" : true, "cMask" : ["ball" ] },
		{ "v0" : 55, "v1" : 54, "vis" : true, "cMask" : ["ball" ] },
		{ "v0" : 63, "v1" : 65, "vis" : true, "color" : "000000", "cMask" : ["ball" ] },
		{ "v0" : 62, "v1" : 64, "vis" : true, "color" : "000000", "cMask" : ["ball" ] },
		{ "v0" : 58, "v1" : 61, "vis" : true, "color" : "000000", "cMask" : ["ball" ] },
		{ "v0" : 59, "v1" : 60, "vis" : true, "color" : "000000", "cMask" : ["ball" ] },
		
		{ "v0" : 67, "v1" : 66, "vis" : true, "color" : "b3d4a7", "bCoef" : 0.1, "cMask" : ["ball" ], "cGroup" : ["ball" ], "trait" : "line", "x" : 0 },
		{ "v0" : 68, "v1" : 69, "curve" : 90, "vis" : true, "color" : "638750", "trait" : "line" },
		{ "v0" : 70, "v1" : 71, "curve" : 90, "vis" : true, "color" : "638750", "trait" : "line" },
		{ "v0" : 72, "v1" : 73, "curve" : 90, "vis" : true, "color" : "638750", "trait" : "line" },
		{ "v0" : 74, "v1" : 75, "curve" : -90, "vis" : true, "color" : "638750", "trait" : "line" },
		{ "v0" : 76, "v1" : 77, "curve" : 0, "vis" : true, "color" : "638750", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "y" : -525 },
		{ "v0" : 78, "v1" : 79, "curve" : 0, "vis" : true, "color" : "638750", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "y" : 525 },
		{ "v0" : 80, "v1" : 81, "vis" : true, "color" : "b3d4a7", "trait" : "line" },
		{ "v0" : 81, "v1" : 82, "vis" : true, "color" : "b3d4a7", "trait" : "line", "y" : 600 },
		{ "v0" : 80, "v1" : 83, "vis" : true, "color" : "b3d4a7", "trait" : "line", "y" : -600 },
		{ "v0" : 82, "v1" : 83, "vis" : true, "color" : "b3d4a7", "trait" : "line" },
		
		{ "v0" : 84, "v1" : 85, "vis" : false, "bCoef" : 0, "cMask" : ["blue" ], "x" : -1300, "curve" : 259.83403647248304, "cGroup" : ["blueKO","redKO" ] },
		{ "v0" : 86, "v1" : 87, "vis" : false, "bCoef" : 0, "cMask" : ["blue" ], "y" : -150 },
		{ "v0" : 88, "v1" : 89, "vis" : false, "bCoef" : 0, "cMask" : ["blue" ], "y" : 150, "curve" : 0 },
		{ "v0" : 91, "v1" : 92, "vis" : false, "bCoef" : 1000000, "cMask" : ["blue" ], "x" : 1410 },
		{ "v0" : 93, "v1" : 97, "curve" : 0, "vis" : true, "color" : "b3d4a7", "bCoef" : 0, "cMask" : ["wall" ], "x" : 1150 },
		{ "v0" : 94, "v1" : 98, "curve" : 0, "vis" : true, "color" : "ffffff", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 96, "v1" : 99, "curve" : 0, "vis" : true, "color" : "ffffff", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 100, "v1" : 101, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 102, "v1" : 103, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 104, "v1" : 105, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 106, "v1" : 107, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ] },
		
		{ "v0" : 109, "v1" : 111, "curve" : 0, "color" : "ffffff", "cMask" : ["blue","ball" ], "trait" : "reargoalNetleft", "x" : -242, "bCoef" : 0 },
		
		{ "v0" : 108, "v1" : 109, "curve" : 0, "color" : "ffffff", "cMask" : ["blue","ball" ], "trait" : "sidegoalNet", "bCoef" : 0.5 },
		{ "v0" : 110, "v1" : 111, "curve" : 0, "color" : "ffffff", "cMask" : ["blue","ball" ], "trait" : "sidegoalNet", "bCoef" : 0.5 },
		
		{ "v0" : 112, "v1" : 116, "curve" : 0, "vis" : true, "color" : "b3d4a7", "bCoef" : 0, "cMask" : ["wall" ], "x" : -1150 },
		{ "v0" : 113, "v1" : 117, "curve" : 0, "vis" : true, "color" : "ffffff", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 115, "v1" : 118, "curve" : 0, "vis" : true, "color" : "ffffff", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 119, "v1" : 120, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 121, "v1" : 122, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 123, "v1" : 124, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 125, "v1" : 126, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ] },
		
		{ "v0" : 128, "v1" : 130, "curve" : 0, "color" : "ffffff", "cMask" : ["ball" ], "trait" : "reargoalNetleft", "x" : -242 },
		
		{ "v0" : 127, "v1" : 128, "curve" : 0, "color" : "ffffff", "cMask" : ["ball" ], "trait" : "sidegoalNet" },
		{ "v0" : 129, "v1" : 130, "curve" : 0, "color" : "ffffff", "cMask" : ["ball" ], "trait" : "sidegoalNet" },
		
		{ "v0" : 131, "v1" : 132, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : -286.93953763264415 },
		
		{ "v0" : 133, "v1" : 134, "curve" : 0, "vis" : true, "color" : "D7D7D9", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag" },
		
		{ "v0" : 135, "v1" : 136, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ], "x" : 717 },
		{ "v0" : 137, "v1" : 138, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 137, "v1" : 139, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : -70 },
		{ "v0" : 140, "v1" : 141, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : 667 },
		{ "v0" : 142, "v1" : 143, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : 667 },
		{ "v0" : 144, "v1" : 145, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : 667 },
		{ "v0" : 146, "v1" : 147, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : 667 },
		{ "v0" : 148, "v1" : 149, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 148, "v1" : 150, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 151, "v1" : 152, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : -286.93953763264415 },
		{ "v0" : 153, "v1" : 154, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : -286.93953763264415 },
		{ "v0" : 155, "v1" : 156, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : -70 },
		{ "v0" : 157, "v1" : 158, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : -70 },
		{ "v0" : 159, "v1" : 160, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 159, "v1" : 161, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : -70 },
		{ "v0" : 162, "v1" : 163, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : 667 },
		{ "v0" : 164, "v1" : 165, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : 667 },
		{ "v0" : 166, "v1" : 167, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : 667 },
		{ "v0" : 168, "v1" : 169, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : 667 },
		{ "v0" : 170, "v1" : 171, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 170, "v1" : 172, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 175, "v1" : 176, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : -286.93953763264415 },
		{ "v0" : 177, "v1" : 178, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : -70 },
		{ "v0" : 179, "v1" : 180, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : -70 },
		
		{ "v0" : 181, "v1" : 182, "curve" : 0, "vis" : true, "color" : "D7D7D9", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag" },
		
		{ "v0" : 183, "v1" : 184, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ], "x" : 717 },
		{ "v0" : 185, "v1" : 186, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 185, "v1" : 186, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 186, "v1" : 186, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ], "x" : -1148 },
		
		{ "v0" : 185, "v1" : 187, "vis" : true, "color" : "beff28", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line" },
		
		{ "v0" : 188, "v1" : 189, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 188, "v1" : 189, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 189, "v1" : 189, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		
		{ "v0" : 188, "v1" : 190, "vis" : true, "color" : "beff28", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line" },
		
		{ "v0" : 191, "v1" : 192, "curve" : 0, "vis" : true, "color" : "D7D7D9", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag" },
		
		{ "v0" : 193, "v1" : 194, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ], "x" : 717 },
		{ "v0" : 195, "v1" : 196, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 195, "v1" : 196, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 196, "v1" : 196, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ], "x" : -1148 },
		
		{ "v0" : 195, "v1" : 197, "vis" : true, "color" : "beff28", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line" },
		
		{ "v0" : 198, "v1" : 199, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 198, "v1" : 199, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 199, "v1" : 199, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		
		{ "v0" : 198, "v1" : 200, "vis" : true, "color" : "beff28", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line" },
		
		{ "v0" : 201, "v1" : 202, "curve" : 0, "vis" : true, "color" : "D7D7D9", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag" },
		
		{ "v0" : 203, "v1" : 204, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ], "x" : 717 },
		{ "v0" : 205, "v1" : 206, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 205, "v1" : 206, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 206, "v1" : 206, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ], "x" : -1148 },
		
		{ "v0" : 205, "v1" : 207, "vis" : true, "color" : "beff28", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line" },
		
		{ "v0" : 208, "v1" : 209, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 208, "v1" : 209, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 209, "v1" : 209, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		
		{ "v0" : 208, "v1" : 210, "vis" : true, "color" : "beff28", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line" },
		
		{ "v0" : 211, "v1" : 212, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ], "radius" : 20 },
		{ "v0" : 211, "v1" : 212, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ], "radius" : 20 },
		{ "v0" : 212, "v1" : 212, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ], "x" : -1148, "radius" : 20 },
		
		{ "v0" : 211, "v1" : 213, "vis" : true, "color" : "beff28", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "radius" : 20 },
		
		{ "v0" : 214, "v1" : 215, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ], "radius" : 20 },
		{ "v0" : 214, "v1" : 215, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ], "radius" : 20 },
		{ "v0" : 215, "v1" : 215, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ], "radius" : 20 },
		
		{ "v0" : 214, "v1" : 216, "vis" : true, "color" : "beff28", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "radius" : 20 },
		
		{ "v0" : 217, "v1" : 218, "curve" : -328.13941952332465, "vis" : false, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 219, "v1" : 220, "curve" : -336.8674849233308, "vis" : false, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		
		{ "v0" : 221, "v1" : 222, "curve" : 180, "trait" : "powerboost", "bCoef" : -2.2, "vis" : false, "cMask" : ["ball" ], "pos" : [935,0 ], "radius" : 10 },
		
		{ "v0" : 223, "v1" : 224, "curve" : 0, "vis" : false, "color" : "C7E6BD", "bCoef" : 1, "cMask" : ["blue" ], "cGroup" : ["redKO" ], "x" : 1134 },
		{ "vis" : false, "bCoef" : 0, "cMask" : ["blue" ], "v0" : 225, "v1" : 226 },
		{ "vis" : false, "bCoef" : 0, "cMask" : ["blue" ], "v0" : 226, "v1" : 227, "y" : 18 },
		{ "vis" : false, "bCoef" : 0, "cMask" : ["blue" ], "v0" : 228, "v1" : 229, "y" : -18 },
		{ "vis" : false, "bCoef" : 0, "cMask" : ["blue" ], "v0" : 228, "v1" : 90 },
		{ "vis" : false, "bCoef" : -2.4, "cMask" : ["blue" ], "v0" : 230, "v1" : 231, "x" : 1233.0188554822 },
		{ "curve" : -74, "vis" : false, "bCoef" : 0, "cMask" : ["red" ], "v0" : 232, "v1" : 233 },
		{ "v0" : 234, "v1" : 235, "curve" : 0, "vis" : false, "color" : "C7E6BD", "bCoef" : 1, "cMask" : ["blue" ], "cGroup" : ["blueKO" ], "x" : 1134, "radius" : 15, "pos" : [67,0 ] },
		{ "curve" : 0, "vis" : false, "color" : "6a9158", "bCoef" : 0, "cMask" : ["red" ], "v0" : 232, "v1" : 236 },
		{ "curve" : 0, "vis" : false, "color" : "6a9158", "bCoef" : 0, "cMask" : ["red" ], "v0" : 233, "v1" : 237 }

	],

	"goals" : [
		{ "p0" : [-1161.3,115 ], "p1" : [-1161.3,-116.89189189189187 ], "team" : "red" },
		{ "p0" : [1161.3,115.16891891891896 ], "p1" : [1161.3,-117.98923923923925 ], "team" : "blue" },
		{ "p0" : [1151.8187001142282,-121.478062190417 ], "p1" : [1014.199602660217,-101.29539394052615 ], "team" : "red" },
		{ "p0" : [1150.6265801259315,120.98565833533654 ], "p1" : [1026.839502692259,95.22488810287489 ], "team" : "red" },
		{ "p0" : [1033.9035938100174,-105.6225399413513 ], "p1" : [859.239486391142,-8.193337031992414 ], "team" : "red" },
		{ "p0" : [1032.296032056326,94.29163507192908 ], "p1" : [859.2170868190889,-5.926520547252252 ], "team" : "red" }

	],

	"discs" : [
		{ "radius" : 5, "pos" : [1150,-119 ], "trait" : "goalPost" },
		{ "radius" : 5, "pos" : [1150,116 ], "trait" : "goalPost" },
		
		{ "radius" : 3, "invMass" : 0, "pos" : [1260.5,144 ], "color" : "4a4e52", "cMask" : ["ball" ] },
		{ "radius" : 3, "invMass" : 0, "pos" : [1259.5,-148 ], "color" : "4a4e52", "cMask" : ["ball" ] },
		
		{ "radius" : 5, "pos" : [-1150,116.08750755868094 ], "trait" : "goalPost" },
		{ "radius" : 5, "pos" : [-1150,-118.91461989892463 ], "trait" : "goalPost" },
		
		{ "radius" : 3, "invMass" : 0, "pos" : [-1259.8669727834986,-147.38010906609267 ], "color" : "4a4e52", "cMask" : ["ball" ] },
		{ "radius" : 3, "invMass" : 0, "pos" : [-1260.0977098047515,144.62151209452182 ], "color" : "4a4e52", "cMask" : ["ball" ] },
		
		{ "radius" : 1.5, "pos" : [-1150.5542972394846,-600.1732586129118 ], "color" : "13181C", "trait" : "cornerflag", "curve" : 0 },
		{ "radius" : 1.5, "pos" : [1150.4457027605154,-600.1732586129118 ], "color" : "13181C", "trait" : "cornerflag", "curve" : 0 },
		{ "radius" : 1.5, "pos" : [1148.8518594069587,599.6163281131223 ], "color" : "13181C", "trait" : "cornerflag", "curve" : 0 },
		{ "radius" : 1.5, "pos" : [-1149.6336058891993,599.8040409312609 ], "color" : "13181C", "trait" : "cornerflag", "curve" : 0 },
		
		{ "radius" : 15, "invMass" : 1e-27, "pos" : [-181,705 ], "color" : "4D4C48", "bCoef" : 1000, "cMask" : ["red" ], "cGroup" : ["wall" ], "damping" : 1, "speed" : [0,-0.5 ] },
		{ "radius" : 15, "invMass" : 1e-27, "pos" : [185,705 ], "color" : "403F45", "bCoef" : 1000, "cMask" : ["red" ], "cGroup" : ["wall" ], "damping" : 1, "speed" : [0,-0.5 ] }

	],

	"planes" : [
		{ "normal" : [0,1 ], "dist" : -635, "bCoef" : 0, "trait" : "ballArea" },
		{ "normal" : [0,-1 ], "dist" : -635, "bCoef" : 0, "trait" : "ballArea" },
		
		{ "normal" : [0,1 ], "dist" : -665, "bCoef" : 0 },
		{ "normal" : [0,-1 ], "dist" : -660, "bCoef" : 0 },
		{ "normal" : [1,0 ], "dist" : -1220, "bCoef" : 0, "cMask" : ["ball" ] },
		{ "normal" : [-1,0 ], "dist" : -1220, "bCoef" : 0, "cMask" : ["ball" ] },
		{ "normal" : [1,0 ], "dist" : -117, "bCoef" : 0 },
		{ "normal" : [-1,0 ], "dist" : -1492, "bCoef" : 0 }

	],

	"traits" : {
		"ballArea" : { "vis" : false, "bCoef" : 0, "cMask" : ["ball" ] },
		"goalPost" : { "radius" : 5, "invMass" : 0, "bCoef" : 2 },
		"stanchion" : { "radius" : 3, "invMass" : 0, "bCoef" : 3, "cMask" : ["none" ] },
		"cornerflag" : { "radius" : 3, "invMass" : 0, "bCoef" : 0.5, "color" : "FFFF00", "cGroup" : [ ] },
		"reargoalNetleft" : { "vis" : true, "bCoef" : 0.1, "cMask" : ["ball","red","blue" ], "curve" : 10, "color" : "C7E6BD" },
		"reargoalNetright" : { "vis" : true, "bCoef" : 0.1, "cMask" : ["ball","red","blue" ], "curve" : -10, "color" : "C7E6BD" },
		"sidegoalNet" : { "vis" : true, "bCoef" : 1, "cMask" : ["ball","red","blue" ], "color" : "C7E6BD" },
		"kickOffBarrier" : { "vis" : false, "bCoef" : 0.1, "cGroup" : ["redKO","blueKO" ], "cMask" : ["red","blue" ] },
		"line" : { "vis" : true, "cMask" : [ ], "color" : "C7E6BD" },
		"tunnel" : { "vis" : true, "cMask" : ["red","blue" ], "color" : "000000" },
		"advertising" : { "vis" : true, "cMask" : ["red","blue" ], "color" : "333333" },
		"teambench" : { "vis" : true, "cMask" : [ ], "color" : "000000" },
		"manager" : { "radius" : 15, "vis" : true, "cMask" : ["red","blue" ], "invMass" : 0, "color" : "333333" },
		"physio" : { "radius" : 15, "vis" : true, "cMask" : ["red","blue" ], "invMass" : 0, "color" : "666666" },
		"redsubs" : { "radius" : 15, "vis" : true, "cMask" : ["red","blue" ], "invMass" : 0, "color" : "E56E56" },
		"bluesubs" : { "radius" : 15, "vis" : true, "cMask" : ["red","blue" ], "invMass" : 0, "color" : "5689E5" }

	}
}`;
	RSRMap = false;
isAFKpaused = true;
	return PenaltyRedMap;
}



function getPenaltyBlueMap() {
	var PenaltyBlueMap = `{

	"name" : "ᴘᴇɴᴀʟᴛʏ ʙʟᴜᴇ ᴛᴇᴀᴍ 🔵 | 𝐆𝐋𝐇",

	"width" : 1500,

	"height" : 734,

	"spawnDistance" : 300,

	"redSpawnPoints" : [
		[ 1376, 0
		],
		[ 1376, -48
		],
		[ 1376, 48
		],
		[ 1376, 96
		]

	],

	"blueSpawnPoints" : [
		[ 63, -33
		],
		[ 63, 33
		],
		[ 63, -99
		],
		[ 63, 99
		]

	],

	"bg" : { "type" : "grass", "width" : 1150, "height" : 600, "kickOffRadius" : 180, "cornerRadius" : 0, "color" : "6a9158" },

	"playerPhysics" : {
		"bCoef" : 0.5,
		"invMass" : 0.5,
		"damping" : 0.96,
		"acceleration" : 0.12,
		"kickingAcceleration" : 0.07,
		"kickingDamping" : 0.96,
		"kickStrength" : 5.65

	},

	"ballPhysics" : {
		"pos" : [ 935, 0
		],
		"radius" : 10

	},

	"vertexes" : [
		/* 0 */ { "x" : 1150, "y" : 337, "trait" : "line", "color" : "b3d4a7" },
		/* 1 */ { "x" : 840, "y" : 337, "trait" : "line", "color" : "b3d4a7" },
		/* 2 */ { "x" : 1150, "y" : -337, "trait" : "line", "color" : "b3d4a7" },
		/* 3 */ { "x" : 840, "y" : -337, "trait" : "line", "color" : "b3d4a7" },
		/* 4 */ { "x" : 1150, "y" : 198, "trait" : "line", "color" : "b3d4a7" },
		/* 5 */ { "x" : 1031, "y" : 198, "trait" : "line", "color" : "b3d4a7" },
		/* 6 */ { "x" : 1150, "y" : -198, "trait" : "line", "color" : "b3d4a7" },
		/* 7 */ { "x" : 1029, "y" : -198, "trait" : "line", "color" : "b3d4a7" },
		/* 8 */ { "x" : 840, "y" : -170, "trait" : "line", "curve" : -110, "color" : "b3d4a7" },
		/* 9 */ { "x" : 840, "y" : 170, "trait" : "line", "curve" : -110, "color" : "b3d4a7" },
		/* 10 */ { "x" : -1150, "y" : -337, "trait" : "line", "color" : "b3d4a7" },
		/* 11 */ { "x" : -840, "y" : -337, "trait" : "line", "color" : "b3d4a7" },
		/* 12 */ { "x" : -1150, "y" : 337, "trait" : "line", "color" : "b3d4a7" },
		/* 13 */ { "x" : -840, "y" : 337, "trait" : "line", "color" : "b3d4a7" },
		/* 14 */ { "x" : -1150, "y" : -198, "trait" : "line", "color" : "b3d4a7" },
		/* 15 */ { "x" : -1030, "y" : -198, "trait" : "line", "color" : "b3d4a7" },
		/* 16 */ { "x" : -1150, "y" : 198, "trait" : "line", "color" : "b3d4a7" },
		/* 17 */ { "x" : -1030, "y" : 198, "trait" : "line", "color" : "b3d4a7" },
		/* 18 */ { "x" : -840, "y" : 170, "trait" : "line", "curve" : -110, "color" : "b3d4a7" },
		/* 19 */ { "x" : -840, "y" : -170, "trait" : "line", "curve" : -110, "color" : "b3d4a7" },
		/* 20 */ { "x" : 935, "y" : 4, "trait" : "line", "color" : "a7cf9b" },
		/* 21 */ { "x" : 935, "y" : -4, "trait" : "line", "color" : "a7cf9b" },
		/* 22 */ { "x" : -935, "y" : 4, "trait" : "line", "color" : "a7cf9b" },
		/* 23 */ { "x" : -935, "y" : -4, "trait" : "line", "color" : "a7cf9b" },
		/* 24 */ { "x" : -1150, "y" : 574, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "b3d4a7" },
		/* 25 */ { "x" : -1125, "y" : 599, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "b3d4a7" },
		/* 26 */ { "x" : -1125, "y" : -600, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "b3d4a7" },
		/* 27 */ { "x" : -1150, "y" : -575, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "b3d4a7" },
		/* 28 */ { "x" : 1124, "y" : 600, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "b3d4a7" },
		/* 29 */ { "x" : 1150, "y" : 574, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "b3d4a7" },
		/* 30 */ { "x" : 1150, "y" : -574, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "b3d4a7" },
		/* 31 */ { "x" : 1124, "y" : -600, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "b3d4a7" },
		/* 32 */ { "x" : 0, "y" : -4, "trait" : "line", "color" : "b3d4a7" },
		/* 33 */ { "x" : 0, "y" : 4, "trait" : "line", "color" : "b3d4a7" },
		/* 34 */ { "x" : 0, "y" : -4, "trait" : "line", "color" : "b3d4a7" },
		/* 35 */ { "x" : 0, "y" : 4, "trait" : "line", "color" : "b3d4a7" },
		/* 36 */ { "x" : -1170, "y" : 150, "bCoef" : -4.5, "cMask" : ["ball" ], "trait" : "line", "curve" : 40, "color" : "546f48" },
		/* 37 */ { "x" : -1170, "y" : 250, "bCoef" : -4.5, "cMask" : ["ball" ], "trait" : "line", "curve" : 40, "color" : "546f48" },
		/* 38 */ { "x" : 1170, "y" : 150, "bCoef" : -4.5, "cMask" : ["ball" ], "trait" : "line", "curve" : -40, "color" : "546f48" },
		/* 39 */ { "x" : 1170, "y" : 250, "bCoef" : -4.5, "cMask" : ["ball" ], "trait" : "line", "curve" : -40, "color" : "546f48" },
		/* 40 */ { "x" : -1170, "y" : -150, "bCoef" : -4.5, "cMask" : ["ball" ], "trait" : "line", "curve" : -40, "color" : "546f48" },
		/* 41 */ { "x" : -1170, "y" : -250, "bCoef" : -4.5, "cMask" : ["ball" ], "trait" : "line", "curve" : -40, "color" : "546f48" },
		/* 42 */ { "x" : 1170, "y" : -150, "bCoef" : -4.5, "cMask" : ["ball" ], "trait" : "line", "curve" : 40, "color" : "546f48" },
		/* 43 */ { "x" : 1170, "y" : -250, "bCoef" : -4.5, "cMask" : ["ball" ], "trait" : "line", "curve" : 40, "color" : "546f48" },
		/* 44 */ { "x" : 1161, "y" : -599, "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line", "curve" : -60, "color" : "546f48" },
		/* 45 */ { "x" : 1189, "y" : -579, "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line", "curve" : -60, "color" : "546f48" },
		/* 46 */ { "x" : 1161, "y" : 599, "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line", "curve" : 60, "color" : "546f48" },
		/* 47 */ { "x" : 1189, "y" : 579, "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line", "curve" : 60, "color" : "546f48" },
		/* 48 */ { "x" : -1162, "y" : 599, "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line", "curve" : -60, "color" : "546f48" },
		/* 49 */ { "x" : -1190, "y" : 579, "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line", "curve" : -60, "color" : "546f48" },
		/* 50 */ { "x" : -1162, "y" : -600, "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line", "curve" : 60, "color" : "546f48" },
		/* 51 */ { "x" : -1190, "y" : -580, "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line", "curve" : 60, "color" : "546f48" },
		
		/* 52 */ { "x" : -1177, "y" : -250, "bCoef" : 0, "cMask" : ["ball" ] },
		/* 53 */ { "x" : -1177, "y" : -150, "cMask" : ["ball" ] },
		
		/* 54 */ { "x" : -1170, "y" : 250, "bCoef" : -5, "cMask" : ["ball" ], "trait" : "line", "curve" : -40, "color" : "546f48" },
		
		/* 55 */ { "x" : -1177, "y" : 250, "bCoef" : 0, "cMask" : ["ball" ] },
		
		/* 56 */ { "x" : -1170, "y" : 150, "bCoef" : -5, "cMask" : ["ball" ], "trait" : "line", "curve" : -40, "color" : "546f48" },
		
		/* 57 */ { "x" : -1177, "y" : 150, "cMask" : ["ball" ] },
		/* 58 */ { "x" : 1177, "y" : -250, "bCoef" : 0, "cMask" : ["ball" ] },
		/* 59 */ { "x" : 1177, "y" : -150, "cMask" : ["ball" ] },
		
		/* 60 */ { "x" : 1170, "y" : -150, "bCoef" : -5, "cMask" : ["ball" ], "trait" : "line", "curve" : -40, "color" : "546f48" },
		/* 61 */ { "x" : 1170, "y" : -250, "bCoef" : -5, "cMask" : ["ball" ], "trait" : "line", "curve" : -40, "color" : "546f48" },
		
		/* 62 */ { "x" : 1177, "y" : 250, "bCoef" : 0, "cMask" : ["ball" ] },
		/* 63 */ { "x" : 1177, "y" : 150, "cMask" : ["ball" ] },
		
		/* 64 */ { "x" : 1170, "y" : 250, "bCoef" : -5, "cMask" : ["ball" ], "trait" : "line", "curve" : -40, "color" : "546f48" },
		/* 65 */ { "x" : 1170, "y" : 150, "bCoef" : -5, "cMask" : ["ball" ], "trait" : "line", "curve" : -40, "color" : "546f48" },
		/* 66 */ { "x" : 0, "y" : 180, "cMask" : ["ball" ], "cGroup" : ["ball" ], "trait" : "line", "color" : "b3d4a7", "vis" : true, "curve" : 0 },
		/* 67 */ { "x" : 0, "y" : -180, "cMask" : ["ball" ], "cGroup" : ["ball" ], "trait" : "line", "color" : "b3d4a7", "vis" : true, "curve" : 0 },
		/* 68 */ { "x" : -818, "y" : -600, "trait" : "line", "curve" : 90, "color" : "638750" },
		/* 69 */ { "x" : -1150, "y" : -347, "trait" : "line", "curve" : 90, "color" : "638750" },
		/* 70 */ { "x" : -1150, "y" : 347, "trait" : "line", "color" : "638750" },
		/* 71 */ { "x" : -820, "y" : 600, "trait" : "line", "color" : "638750" },
		/* 72 */ { "x" : 820, "y" : 600, "trait" : "line", "color" : "638750" },
		/* 73 */ { "x" : 1150, "y" : 347, "trait" : "line", "color" : "638750" },
		/* 74 */ { "x" : 820, "y" : -600, "trait" : "line", "curve" : -90, "color" : "638750" },
		/* 75 */ { "x" : 1150, "y" : -347, "trait" : "line", "curve" : -90, "color" : "638750" },
		/* 76 */ { "x" : 1150, "y" : -525, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "638750" },
		/* 77 */ { "x" : -1150, "y" : -525, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "638750" },
		/* 78 */ { "x" : 1150, "y" : 525, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "638750" },
		/* 79 */ { "x" : -1150, "y" : 525, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "638750" },
		/* 80 */ { "x" : -1150, "y" : -600, "trait" : "line", "color" : "b3d4a7" },
		/* 81 */ { "x" : -1150, "y" : 600, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "FFFF00" },
		/* 82 */ { "x" : 1150, "y" : 600, "trait" : "line", "color" : "b3d4a7" },
		/* 83 */ { "x" : 1150, "y" : -600, "trait" : "line", "color" : "b3d4a7" },
		
		/* 84 */ { "x" : -113, "y" : -138, "bCoef" : 0, "cMask" : ["red" ], "cGroup" : ["blueKO","redKO" ], "curve" : 235 },
		/* 85 */ { "x" : -114, "y" : 138, "bCoef" : 0, "cMask" : ["red" ], "cGroup" : ["blueKO","redKO" ], "curve" : 235 },
		/* 86 */ { "x" : 1495, "y" : -150, "bCoef" : 0, "cMask" : ["red" ], "dist" : -1400 },
		/* 87 */ { "x" : 1300, "y" : -150, "bCoef" : 0, "cMask" : ["red" ] },
		/* 88 */ { "x" : 1300, "y" : 150, "bCoef" : 0, "cMask" : ["red" ], "curve" : 0 },
		/* 89 */ { "x" : 1489, "y" : 150, "bCoef" : 0, "cMask" : ["red" ], "dist" : -1400, "curve" : 0 },
		
		/* 90 */ { "x" : 1300, "y" : -150, "trait" : "kickOffBarrier", "cMask" : ["red" ] },
		
		/* 91 */ { "x" : 1448, "y" : -120, "bCoef" : 0, "cMask" : ["red" ] },
		/* 92 */ { "x" : 1448, "y" : 120, "bCoef" : 0, "cMask" : ["red" ] },
		
		/* 93 */ { "x" : 1150, "y" : -120.92552225676228, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "b3d4a7", "curve" : 0 },
		/* 94 */ { "x" : 1212.8375029631984, "y" : -120.92552225676228, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		/* 95 */ { "x" : 1150.1431278225696, "y" : 116.05779951814779, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		/* 96 */ { "x" : 1212.9145962189946, "y" : 116.05779951814779, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		
		/* 97 */ { "x" : 1150, "y" : 116.05779951814779, "bCoef" : 0, "cMask" : ["wall" ], "curve" : 0, "color" : "b3d4a7" },
		/* 98 */ { "x" : 1259, "y" : -148.867722739, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ffffff" },
		/* 99 */ { "x" : 1259.5, "y" : 144, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ffffff" },
		
		/* 100 */ { "x" : 1213.8375029631984, "y" : -118.92552225676228, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "6a9158", "curve" : 0 },
		
		/* 101 */ { "x" : 1260, "y" : -146.867722739, "bCoef" : 0, "cMask" : ["wall" ], "color" : "6a9158" },
		
		/* 102 */ { "x" : 1211.8375029631984, "y" : -122.92552225676228, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "6a9158", "curve" : 0 },
		
		/* 103 */ { "x" : 1258, "y" : -150.867722739, "bCoef" : 0, "cMask" : ["wall" ], "color" : "6a9158" },
		
		/* 104 */ { "x" : 1214.9145962189946, "y" : 114.05779951814779, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "6a9158", "curve" : 0 },
		
		/* 105 */ { "x" : 1261.5, "y" : 142, "bCoef" : 0, "cMask" : ["wall" ], "color" : "6a9158" },
		
		/* 106 */ { "x" : 1213.9145962189946, "y" : 119.05779951814779, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "6a9158", "curve" : 0 },
		
		/* 107 */ { "x" : 1260.5, "y" : 147, "bCoef" : 0, "cMask" : ["wall" ], "color" : "6a9158" },
		
		/* 108 */ { "x" : 1150, "y" : -120, "bCoef" : 0.5, "cMask" : ["red","ball" ], "trait" : "line", "color" : "C7E6BD", "curve" : 0 },
		/* 109 */ { "x" : 1213, "y" : -120, "bCoef" : 0, "cMask" : ["red","ball" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		/* 110 */ { "x" : 1150, "y" : 116, "bCoef" : 0.5, "cMask" : ["red","ball" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		/* 111 */ { "x" : 1213, "y" : 116, "bCoef" : 0, "cMask" : ["red","ball" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		/* 112 */ { "x" : -1150, "y" : 118.00879788978456, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "b3d4a7", "curve" : 0 },
		/* 113 */ { "x" : -1213.3215131279903, "y" : 117.74394897515494, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		/* 114 */ { "x" : -1149.628852252629, "y" : -118.97302216202547, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		/* 115 */ { "x" : -1212.3997630875529, "y" : -119.23759275268432, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		
		/* 116 */ { "x" : -1150, "y" : -118.97241890367377, "bCoef" : 0, "cMask" : ["wall" ], "curve" : 0, "color" : "b3d4a7" },
		/* 117 */ { "x" : -1259.6013715431845, "y" : 145.49133453725509, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ffffff" },
		/* 118 */ { "x" : -1258.866981665902, "y" : -147.37589424369935, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ffffff" },
		
		/* 119 */ { "x" : -1214.3130746008003, "y" : 115.73975191756831, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "6a9158", "curve" : 0 },
		
		/* 120 */ { "x" : -1260.5929330159947, "y" : 143.48713747966846, "bCoef" : 0, "cMask" : ["wall" ], "color" : "6a9158" },
		
		/* 121 */ { "x" : -1212.3299516551804, "y" : 119.74814603274154, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "6a9158", "curve" : 0 },
		
		/* 122 */ { "x" : -1258.6098100703748, "y" : 147.4955315948417, "bCoef" : 0, "cMask" : ["wall" ], "color" : "6a9158" },
		
		/* 123 */ { "x" : -1214.4081749675327, "y" : -117.24604016227767, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "6a9158", "curve" : 0 },
		
		/* 124 */ { "x" : -1260.8753935458817, "y" : -145.3843416532927, "bCoef" : 0, "cMask" : ["wall" ], "color" : "6a9158" },
		
		/* 125 */ { "x" : -1213.3871097379695, "y" : -122.24178092786758, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "6a9158", "curve" : 0 },
		
		/* 126 */ { "x" : -1259.8543283163185, "y" : -150.3800824188826, "bCoef" : 0, "cMask" : ["wall" ], "color" : "6a9158" },
		
		/* 127 */ { "x" : -1150.4806674009055, "y" : 117.08328385388425, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "C7E6BD", "curve" : 0 },
		/* 128 */ { "x" : -1213.4801078094943, "y" : 116.81775004310506, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		/* 129 */ { "x" : -1149.485969316082, "y" : -118.91461989892463, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		/* 130 */ { "x" : -1212.4854097246707, "y" : -119.1801537097038, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "ffffff", "curve" : 0 },
		
		/* 131 */ { "x" : 80.06046236735585, "y" : 736, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 132 */ { "x" : 80.06046236735585, "y" : 724, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		
		/* 133 */ { "x" : -1150, "y" : -602, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		/* 134 */ { "x" : -1150, "y" : -620.49609375, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		
		/* 135 */ { "x" : -1148, "y" : -620.49609375, "bCoef" : 0, "cMask" : ["wall" ] },
		/* 136 */ { "x" : -1148, "y" : -602, "bCoef" : 0, "cMask" : ["wall" ] },
		/* 137 */ { "x" : -70, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 138 */ { "x" : -90, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 139 */ { "x" : -70, "y" : 687, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 140 */ { "x" : -110, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 141 */ { "x" : -130, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 142 */ { "x" : -150, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 143 */ { "x" : -170, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 144 */ { "x" : -190, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 145 */ { "x" : -210, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 146 */ { "x" : -230, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 147 */ { "x" : -250, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 148 */ { "x" : -287.01500879340676, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 149 */ { "x" : -286.93953763264415, "y" : 687, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 150 */ { "x" : -270, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 151 */ { "x" : -286.93953763264415, "y" : 736, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "vis" : false },
		/* 152 */ { "x" : -286.93953763264415, "y" : 724, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 153 */ { "x" : -286.93953763264415, "y" : 710, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 154 */ { "x" : -286.93953763264415, "y" : 698, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 155 */ { "x" : -70, "y" : 734.04149391746, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 156 */ { "x" : -70, "y" : 722.0417049239776, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 157 */ { "x" : -70, "y" : 710, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 158 */ { "x" : -70, "y" : 698, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 159 */ { "x" : 297, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 160 */ { "x" : 277, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 161 */ { "x" : 297, "y" : 687, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 162 */ { "x" : 257, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 163 */ { "x" : 237, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 164 */ { "x" : 217, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 165 */ { "x" : 197, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 166 */ { "x" : 177, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 167 */ { "x" : 157, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 168 */ { "x" : 137, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 169 */ { "x" : 117, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 170 */ { "x" : 79.98499120659324, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 171 */ { "x" : 80.06046236735585, "y" : 687, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 172 */ { "x" : 97, "y" : 667, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "color" : "ffffff" },
		/* 173 */ { "x" : 80.06046236735585, "y" : 736, "bCoef" : 10, "cGroup" : ["all" ] },
		/* 174 */ { "x" : 80.06046236735585, "y" : 724, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 175 */ { "x" : 80.06046236735585, "y" : 710, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 176 */ { "x" : 80.06046236735585, "y" : 698, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 177 */ { "x" : 297, "y" : 734.04149391746, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "vis" : false },
		/* 178 */ { "x" : 297, "y" : 722.0417049239776, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 179 */ { "x" : 297, "y" : 710, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 180 */ { "x" : 297, "y" : 698, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		
		/* 181 */ { "x" : 1149.968665547433, "y" : -618.9686646206542, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		/* 182 */ { "x" : 1150.0694602019682, "y" : -600.4728455134504, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		
		/* 183 */ { "x" : 1148.069489899352, "y" : -600.4619464927276, "bCoef" : 0, "cMask" : ["wall" ] },
		/* 184 */ { "x" : 1147.9686952448167, "y" : -618.9577655999315, "bCoef" : 0, "cMask" : ["wall" ] },
		
		/* 185 */ { "x" : 1158, "y" : -623, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "beff28" },
		
		/* 186 */ { "x" : 1168, "y" : -623, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ff3034" },
		
		/* 187 */ { "x" : 1149, "y" : -623, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "beff28" },
		/* 188 */ { "x" : 1158, "y" : -619.3999938964844, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "beff28" },
		
		/* 189 */ { "x" : 1149, "y" : -619.3999938964844, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ff3034" },
		
		/* 190 */ { "x" : 1168, "y" : -619.3999938964844, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "beff28" },
		
		/* 191 */ { "x" : 1149.7396826762401, "y" : 597.9263578863065, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		/* 192 */ { "x" : 1153.08526210564, "y" : 579.1424902194007, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		
		/* 193 */ { "x" : 1155.0010783610655, "y" : 579.7166400913391, "bCoef" : 0, "cMask" : ["wall" ] },
		/* 194 */ { "x" : 1151.7040246689874, "y" : 598.3023373212908, "bCoef" : 0, "cMask" : ["wall" ] },
		
		/* 195 */ { "x" : 1161.6678517948505, "y" : 578.0712784773244, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "beff28" },
		
		/* 196 */ { "x" : 1171.2713154212654, "y" : 580.8593757453787, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ff3034" },
		
		/* 197 */ { "x" : 1153.0247345310775, "y" : 575.5619909360759, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "beff28" },
		/* 198 */ { "x" : 1160.6641350766317, "y" : 581.528531244323, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "beff28" },
		
		/* 199 */ { "x" : 1152.0210178128586, "y" : 579.0192437030742, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ff3034" },
		
		/* 200 */ { "x" : 1170.2675987030466, "y" : 584.316628512377, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "beff28" },
		
		/* 201 */ { "x" : -1152.8011166944932, "y" : 581.2713204942369, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		/* 202 */ { "x" : -1150.0489225384003, "y" : 599.5615066971152, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag", "curve" : 0, "color" : "D7D7D9" },
		
		/* 203 */ { "x" : -1152.026657561816, "y" : 599.8591040377528, "bCoef" : 0, "cMask" : ["wall" ] },
		/* 204 */ { "x" : -1154.7788517179088, "y" : 581.5689178348746, "bCoef" : 0, "cMask" : ["wall" ] },
		
		/* 205 */ { "x" : -1162.170956870286, "y" : 578.11573185304, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "beff28" },
		
		/* 206 */ { "x" : -1152.4133863896525, "y" : 575.9271664975008, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ff3034" },
		
		/* 207 */ { "x" : -1170.9527703028564, "y" : 580.085440673025, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "beff28" },
		/* 208 */ { "x" : -1161.383072006498, "y" : 581.6284631816164, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "beff28" },
		
		/* 209 */ { "x" : -1170.1648854390683, "y" : 583.5981720016015, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ff3034" },
		
		/* 210 */ { "x" : -1151.6255015258641, "y" : 579.4398978260773, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "beff28" },
		/* 211 */ { "x" : -1159, "y" : -623, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "beff28", "radius" : 20 },
		
		/* 212 */ { "x" : -1149, "y" : -623, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ff3034", "radius" : 20 },
		
		/* 213 */ { "x" : -1168, "y" : -623, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "beff28", "radius" : 20 },
		/* 214 */ { "x" : -1159, "y" : -619.3999938964844, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "curve" : 0, "color" : "beff28", "radius" : 20 },
		
		/* 215 */ { "x" : -1168, "y" : -619.3999938964844, "bCoef" : 0, "cMask" : ["wall" ], "color" : "ff3034", "radius" : 20 },
		
		/* 216 */ { "x" : -1149, "y" : -619.3999938964844, "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "color" : "beff28", "radius" : 20 },
		
		/* 217 */ { "x" : -199, "y" : 711, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "curve" : -400 },
		/* 218 */ { "x" : -199, "y" : 700, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "curve" : -400 },
		/* 219 */ { "x" : 164, "y" : 704, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "curve" : -400 },
		/* 220 */ { "x" : 166, "y" : 696, "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "curve" : -400 },
		
		/* 221 */ { "x" : 936.0539164518007, "y" : -13, "trait" : "powerboost", "bCoef" : -2.2, "vis" : false, "cMask" : ["ball" ], "pos" : [935,0 ], "radius" : 10 },
		/* 222 */ { "x" : 935.9681020082038, "y" : 13, "trait" : "powerboost", "bCoef" : -2.2, "vis" : false, "cMask" : ["ball" ], "pos" : [935,0 ], "radius" : 10 },
		
		/* 223 */ { "x" : 1134, "y" : 116.23596984067328, "bCoef" : 1, "cMask" : ["red" ], "cGroup" : ["redKO" ], "vis" : false, "curve" : 0 },
		/* 224 */ { "x" : 1134, "y" : -123.76361382468703, "bCoef" : 1, "cMask" : ["red" ], "cGroup" : ["redKO" ], "vis" : false, "curve" : 0 },
		/* 225 */ { "bCoef" : 0, "cMask" : ["red" ], "x" : 1300, "y" : 150 },
		/* 226 */ { "bCoef" : 0, "cMask" : ["red" ], "x" : 1300, "y" : 18 },
		/* 227 */ { "bCoef" : 0, "cMask" : ["red" ], "x" : 1240, "y" : 18 },
		/* 228 */ { "bCoef" : 0, "cMask" : ["red" ], "x" : 1300, "y" : -18 },
		/* 229 */ { "bCoef" : 0, "cMask" : ["red" ], "x" : 1240, "y" : -18 },
		/* 230 */ { "bCoef" : -2.4, "cMask" : ["red" ], "x" : 1233.0188554822, "y" : 65.50390625 },
		/* 231 */ { "bCoef" : -2.4, "cMask" : ["red" ], "x" : 1233.0188554822, "y" : -65.49609375 },
		/* 232 */ { "bCoef" : 0, "cMask" : ["blue" ], "x" : 735, "y" : 620, "curve" : -74 },
		/* 233 */ { "bCoef" : 0, "cMask" : ["blue" ], "x" : 735, "y" : -620, "curve" : 0 },
		/* 234 */ { "x" : 1134, "y" : 116.23596984067328, "bCoef" : 1, "cMask" : ["red" ], "cGroup" : ["blueKO" ], "vis" : false, "curve" : 0, "radius" : 15, "pos" : [67,0 ] },
		/* 235 */ { "x" : 1134, "y" : -123.76361382468703, "bCoef" : 1, "cMask" : ["red" ], "cGroup" : ["blueKO" ], "vis" : false, "curve" : 0, "radius" : 15, "pos" : [67,0 ] },
		/* 236 */ { "bCoef" : 0, "cMask" : ["blue" ], "x" : 735, "y" : -666, "curve" : 0 },
		/* 237 */ { "bCoef" : 0, "cMask" : ["blue" ], "x" : 735, "y" : 661 }

	],

	"segments" : [
		{ "v0" : 0, "v1" : 1, "color" : "b3d4a7", "trait" : "line", "y" : 250 },
		{ "v0" : 1, "v1" : 3, "color" : "b3d4a7", "trait" : "line", "x" : 840 },
		{ "v0" : 2, "v1" : 3, "color" : "b3d4a7", "trait" : "line", "y" : -250 },
		{ "v0" : 4, "v1" : 5, "color" : "b3d4a7", "trait" : "line", "y" : 195 },
		{ "v0" : 5, "v1" : 7, "color" : "b3d4a7", "trait" : "line", "x" : 1030 },
		{ "v0" : 6, "v1" : 7, "color" : "b3d4a7", "trait" : "line", "y" : -150 },
		{ "v0" : 8, "v1" : 9, "curve" : -110, "color" : "b3d4a7", "trait" : "line", "x" : 840 },
		{ "v0" : 10, "v1" : 11, "color" : "b3d4a7", "trait" : "line", "y" : -337 },
		{ "v0" : 11, "v1" : 13, "color" : "b3d4a7", "trait" : "line", "x" : -840 },
		{ "v0" : 12, "v1" : 13, "color" : "b3d4a7", "trait" : "line", "y" : 250 },
		{ "v0" : 14, "v1" : 15, "color" : "b3d4a7", "trait" : "line", "y" : -150 },
		{ "v0" : 15, "v1" : 17, "color" : "b3d4a7", "trait" : "line", "x" : -1030 },
		{ "v0" : 16, "v1" : 17, "color" : "b3d4a7", "trait" : "line", "y" : 150 },
		{ "v0" : 18, "v1" : 19, "curve" : -110, "color" : "b3d4a7", "trait" : "line", "x" : -840 },
		{ "v0" : 20, "v1" : 21, "curve" : -180, "color" : "a7cf9b", "trait" : "line", "x" : 935 },
		{ "v0" : 22, "v1" : 23, "curve" : -180, "color" : "a7cf9b", "trait" : "line", "x" : -935 },
		{ "v0" : 20, "v1" : 21, "curve" : 180, "color" : "a7cf9b", "trait" : "line", "x" : 935 },
		{ "v0" : 22, "v1" : 23, "curve" : 180, "color" : "a7cf9b", "trait" : "line", "x" : -935 },
		{ "v0" : 20, "v1" : 21, "curve" : 90, "color" : "a7cf9b", "trait" : "line", "x" : 935 },
		{ "v0" : 22, "v1" : 23, "curve" : 90, "color" : "a7cf9b", "trait" : "line", "x" : -935 },
		{ "v0" : 20, "v1" : 21, "curve" : -90, "color" : "a7cf9b", "trait" : "line", "x" : 935 },
		{ "v0" : 22, "v1" : 23, "curve" : -90, "color" : "a7cf9b", "trait" : "line", "x" : -935 },
		{ "v0" : 20, "v1" : 21, "color" : "a7cf9b", "trait" : "line", "x" : 935 },
		{ "v0" : 22, "v1" : 23, "color" : "a7cf9b", "trait" : "line", "x" : -935 },
		{ "v0" : 24, "v1" : 25, "curve" : 90, "color" : "b3d4a7", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line" },
		{ "v0" : 26, "v1" : 27, "curve" : 90, "color" : "b3d4a7", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line" },
		{ "v0" : 28, "v1" : 29, "curve" : 90, "color" : "b3d4a7", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line" },
		{ "v0" : 30, "v1" : 31, "curve" : 90, "color" : "b3d4a7", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line" },
		{ "v0" : 32, "v1" : 33, "curve" : -180, "color" : "b3d4a7", "trait" : "line" },
		{ "v0" : 34, "v1" : 35, "curve" : 180, "color" : "b3d4a7", "trait" : "line" },
		{ "v0" : 32, "v1" : 33, "curve" : -90, "color" : "b3d4a7", "trait" : "line" },
		{ "v0" : 34, "v1" : 35, "curve" : 90, "color" : "b3d4a7", "trait" : "line" },
		{ "v0" : 36, "v1" : 37, "curve" : 40, "vis" : true, "color" : "546f48", "bCoef" : -4.7, "cMask" : ["ball" ], "trait" : "line", "x" : -1220 },
		{ "v0" : 38, "v1" : 39, "curve" : -40, "vis" : true, "color" : "546f48", "bCoef" : -4.7, "cMask" : ["ball" ], "trait" : "line", "x" : 1220 },
		{ "v0" : 40, "v1" : 41, "curve" : -40, "vis" : true, "color" : "546f48", "bCoef" : -4.7, "cMask" : ["ball" ], "trait" : "line", "x" : -1220 },
		{ "v0" : 42, "v1" : 43, "curve" : 40, "vis" : true, "color" : "546f48", "bCoef" : -4.7, "cMask" : ["ball" ], "trait" : "line", "x" : 1220 },
		{ "v0" : 44, "v1" : 45, "curve" : -60, "vis" : true, "color" : "546f48", "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line" },
		{ "v0" : 46, "v1" : 47, "curve" : 60, "vis" : true, "color" : "546f48", "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line" },
		{ "v0" : 48, "v1" : 49, "curve" : -60, "vis" : true, "color" : "546f48", "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line" },
		{ "v0" : 50, "v1" : 51, "curve" : 60, "vis" : true, "color" : "546f48", "bCoef" : -2.45, "cMask" : ["ball" ], "trait" : "line" },
		
		{ "v0" : 41, "v1" : 52, "vis" : true, "bCoef" : 0, "cMask" : ["ball" ] },
		{ "v0" : 40, "v1" : 53, "vis" : true, "cMask" : ["ball" ] },
		{ "v0" : 57, "v1" : 56, "vis" : true, "cMask" : ["ball" ] },
		{ "v0" : 55, "v1" : 54, "vis" : true, "cMask" : ["ball" ] },
		{ "v0" : 63, "v1" : 65, "vis" : true, "color" : "000000", "cMask" : ["ball" ] },
		{ "v0" : 62, "v1" : 64, "vis" : true, "color" : "000000", "cMask" : ["ball" ] },
		{ "v0" : 58, "v1" : 61, "vis" : true, "color" : "000000", "cMask" : ["ball" ] },
		{ "v0" : 59, "v1" : 60, "vis" : true, "color" : "000000", "cMask" : ["ball" ] },
		
		{ "v0" : 67, "v1" : 66, "vis" : true, "color" : "b3d4a7", "bCoef" : 0.1, "cMask" : ["ball" ], "cGroup" : ["ball" ], "trait" : "line", "x" : 0 },
		{ "v0" : 68, "v1" : 69, "curve" : 90, "vis" : true, "color" : "638750", "trait" : "line" },
		{ "v0" : 70, "v1" : 71, "curve" : 90, "vis" : true, "color" : "638750", "trait" : "line" },
		{ "v0" : 72, "v1" : 73, "curve" : 90, "vis" : true, "color" : "638750", "trait" : "line" },
		{ "v0" : 74, "v1" : 75, "curve" : -90, "vis" : true, "color" : "638750", "trait" : "line" },
		{ "v0" : 76, "v1" : 77, "curve" : 0, "vis" : true, "color" : "638750", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "y" : -525 },
		{ "v0" : 78, "v1" : 79, "curve" : 0, "vis" : true, "color" : "638750", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "y" : 525 },
		{ "v0" : 80, "v1" : 81, "vis" : true, "color" : "b3d4a7", "trait" : "line" },
		{ "v0" : 81, "v1" : 82, "vis" : true, "color" : "b3d4a7", "trait" : "line", "y" : 600 },
		{ "v0" : 80, "v1" : 83, "vis" : true, "color" : "b3d4a7", "trait" : "line", "y" : -600 },
		{ "v0" : 82, "v1" : 83, "vis" : true, "color" : "b3d4a7", "trait" : "line" },
		
		{ "v0" : 84, "v1" : 85, "vis" : false, "bCoef" : 0, "cMask" : ["red" ], "x" : -1300, "curve" : 259.1001974989001, "cGroup" : ["blueKO","redKO" ] },
		{ "v0" : 86, "v1" : 87, "vis" : false, "bCoef" : 0, "cMask" : ["red" ], "y" : -150 },
		{ "v0" : 88, "v1" : 89, "vis" : false, "bCoef" : 0, "cMask" : ["red" ], "y" : 150, "curve" : 0 },
		{ "v0" : 91, "v1" : 92, "vis" : false, "bCoef" : 1000000, "cMask" : ["red" ], "x" : 1410 },
		{ "v0" : 93, "v1" : 97, "curve" : 0, "vis" : true, "color" : "b3d4a7", "bCoef" : 0, "cMask" : ["wall" ], "x" : 1150 },
		{ "v0" : 94, "v1" : 98, "curve" : 0, "vis" : true, "color" : "ffffff", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 96, "v1" : 99, "curve" : 0, "vis" : true, "color" : "ffffff", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 100, "v1" : 101, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 102, "v1" : 103, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 104, "v1" : 105, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 106, "v1" : 107, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ] },
		
		{ "v0" : 109, "v1" : 111, "curve" : 0, "color" : "ffffff", "cMask" : ["red","ball" ], "trait" : "reargoalNetleft", "x" : -242, "bCoef" : 0 },
		
		{ "v0" : 108, "v1" : 109, "curve" : 0, "color" : "ffffff", "cMask" : ["red","ball" ], "trait" : "sidegoalNet", "bCoef" : 0.5 },
		{ "v0" : 110, "v1" : 111, "curve" : 0, "color" : "ffffff", "cMask" : ["red","ball" ], "trait" : "sidegoalNet", "bCoef" : 0.5 },
		
		{ "v0" : 112, "v1" : 116, "curve" : 0, "vis" : true, "color" : "b3d4a7", "bCoef" : 0, "cMask" : ["wall" ], "x" : -1150 },
		{ "v0" : 113, "v1" : 117, "curve" : 0, "vis" : true, "color" : "ffffff", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 115, "v1" : 118, "curve" : 0, "vis" : true, "color" : "ffffff", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 119, "v1" : 120, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 121, "v1" : 122, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 123, "v1" : 124, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 125, "v1" : 126, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ] },
		
		{ "v0" : 128, "v1" : 130, "curve" : 0, "color" : "ffffff", "cMask" : ["ball" ], "trait" : "reargoalNetleft", "x" : -242 },
		
		{ "v0" : 127, "v1" : 128, "curve" : 0, "color" : "ffffff", "cMask" : ["ball" ], "trait" : "sidegoalNet" },
		{ "v0" : 129, "v1" : 130, "curve" : 0, "color" : "ffffff", "cMask" : ["ball" ], "trait" : "sidegoalNet" },
		
		{ "v0" : 131, "v1" : 132, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : -286.93953763264415 },
		
		{ "v0" : 133, "v1" : 134, "curve" : 0, "vis" : true, "color" : "D7D7D9", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag" },
		
		{ "v0" : 135, "v1" : 136, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ], "x" : 717 },
		{ "v0" : 137, "v1" : 138, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 137, "v1" : 139, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : -70 },
		{ "v0" : 140, "v1" : 141, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : 667 },
		{ "v0" : 142, "v1" : 143, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : 667 },
		{ "v0" : 144, "v1" : 145, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : 667 },
		{ "v0" : 146, "v1" : 147, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : 667 },
		{ "v0" : 148, "v1" : 149, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 148, "v1" : 150, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 151, "v1" : 152, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : -286.93953763264415 },
		{ "v0" : 153, "v1" : 154, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : -286.93953763264415 },
		{ "v0" : 155, "v1" : 156, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : -70 },
		{ "v0" : 157, "v1" : 158, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : -70 },
		{ "v0" : 159, "v1" : 160, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 159, "v1" : 161, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : -70 },
		{ "v0" : 162, "v1" : 163, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : 667 },
		{ "v0" : 164, "v1" : 165, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : 667 },
		{ "v0" : 166, "v1" : 167, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : 667 },
		{ "v0" : 168, "v1" : 169, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "y" : 667 },
		{ "v0" : 170, "v1" : 171, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 170, "v1" : 172, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 175, "v1" : 176, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : -286.93953763264415 },
		{ "v0" : 177, "v1" : 178, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : -70 },
		{ "v0" : 179, "v1" : 180, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ], "x" : -70 },
		
		{ "v0" : 181, "v1" : 182, "curve" : 0, "vis" : true, "color" : "D7D7D9", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag" },
		
		{ "v0" : 183, "v1" : 184, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ], "x" : 717 },
		{ "v0" : 185, "v1" : 186, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 185, "v1" : 186, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 186, "v1" : 186, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ], "x" : -1148 },
		
		{ "v0" : 185, "v1" : 187, "vis" : true, "color" : "beff28", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line" },
		
		{ "v0" : 188, "v1" : 189, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 188, "v1" : 189, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 189, "v1" : 189, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		
		{ "v0" : 188, "v1" : 190, "vis" : true, "color" : "beff28", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line" },
		
		{ "v0" : 191, "v1" : 192, "curve" : 0, "vis" : true, "color" : "D7D7D9", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag" },
		
		{ "v0" : 193, "v1" : 194, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ], "x" : 717 },
		{ "v0" : 195, "v1" : 196, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 195, "v1" : 196, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 196, "v1" : 196, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ], "x" : -1148 },
		
		{ "v0" : 195, "v1" : 197, "vis" : true, "color" : "beff28", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line" },
		
		{ "v0" : 198, "v1" : 199, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 198, "v1" : 199, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 199, "v1" : 199, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		
		{ "v0" : 198, "v1" : 200, "vis" : true, "color" : "beff28", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line" },
		
		{ "v0" : 201, "v1" : 202, "curve" : 0, "vis" : true, "color" : "D7D7D9", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "cornerflag" },
		
		{ "v0" : 203, "v1" : 204, "curve" : 0, "vis" : true, "color" : "6a9158", "bCoef" : 0, "cMask" : ["wall" ], "x" : 717 },
		{ "v0" : 205, "v1" : 206, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 205, "v1" : 206, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 206, "v1" : 206, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ], "x" : -1148 },
		
		{ "v0" : 205, "v1" : 207, "vis" : true, "color" : "beff28", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line" },
		
		{ "v0" : 208, "v1" : 209, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 208, "v1" : 209, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		{ "v0" : 209, "v1" : 209, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ] },
		
		{ "v0" : 208, "v1" : 210, "vis" : true, "color" : "beff28", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line" },
		
		{ "v0" : 211, "v1" : 212, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ], "radius" : 20 },
		{ "v0" : 211, "v1" : 212, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ], "radius" : 20 },
		{ "v0" : 212, "v1" : 212, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ], "x" : -1148, "radius" : 20 },
		
		{ "v0" : 211, "v1" : 213, "vis" : true, "color" : "beff28", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "radius" : 20 },
		
		{ "v0" : 214, "v1" : 215, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ], "radius" : 20 },
		{ "v0" : 214, "v1" : 215, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ], "radius" : 20 },
		{ "v0" : 215, "v1" : 215, "curve" : 0, "vis" : true, "color" : "ff3034", "bCoef" : 0, "cMask" : ["wall" ], "radius" : 20 },
		
		{ "v0" : 214, "v1" : 216, "vis" : true, "color" : "beff28", "bCoef" : 0, "cMask" : ["wall" ], "trait" : "line", "radius" : 20 },
		
		{ "v0" : 217, "v1" : 218, "curve" : -328.13941952332465, "vis" : false, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		{ "v0" : 219, "v1" : 220, "curve" : -336.8674849233308, "vis" : false, "color" : "ffffff", "bCoef" : 0.001, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		
		{ "v0" : 221, "v1" : 222, "curve" : 180, "trait" : "powerboost", "bCoef" : -2.2, "vis" : false, "cMask" : ["ball" ], "pos" : [935,0 ], "radius" : 10 },
		
		{ "v0" : 223, "v1" : 224, "curve" : 0, "vis" : false, "color" : "C7E6BD", "bCoef" : 1, "cMask" : ["red" ], "cGroup" : ["redKO" ], "x" : 1134 },
		{ "vis" : false, "bCoef" : 0, "cMask" : ["red" ], "v0" : 225, "v1" : 226 },
		{ "vis" : false, "bCoef" : 0, "cMask" : ["red" ], "v0" : 226, "v1" : 227, "y" : 18 },
		{ "vis" : false, "bCoef" : 0, "cMask" : ["red" ], "v0" : 228, "v1" : 229, "y" : -18 },
		{ "vis" : false, "bCoef" : 0, "cMask" : ["red" ], "v0" : 228, "v1" : 90 },
		{ "vis" : false, "bCoef" : -2.4, "cMask" : ["red" ], "v0" : 230, "v1" : 231, "x" : 1233.0188554822 },
		{ "curve" : -74, "vis" : false, "bCoef" : 0, "cMask" : ["blue" ], "v0" : 232, "v1" : 233 },
		{ "v0" : 234, "v1" : 235, "curve" : 0, "vis" : false, "color" : "C7E6BD", "bCoef" : 1, "cMask" : ["red" ], "cGroup" : ["blueKO" ], "x" : 1134, "radius" : 15, "pos" : [67,0 ] },
		{ "curve" : 0, "vis" : false, "bCoef" : 0, "cMask" : ["blue" ], "v0" : 233, "v1" : 236, "x" : 735 },
		{ "curve" : 0, "vis" : false, "bCoef" : 0, "cMask" : ["blue" ], "v0" : 232, "v1" : 237 }

	],

	"goals" : [
		{ "p0" : [-1161.3,115 ], "p1" : [-1161.3,-116.89189189189187 ], "team" : "red" },
		{ "p0" : [1161.3,115.16891891891896 ], "p1" : [1161.3,-117.98923923923925 ], "team" : "red" },
		{ "p0" : [1151.8187001142282,-121.478062190417 ], "p1" : [1014.199602660217,-101.29539394052615 ], "team" : "blue" },
		{ "p0" : [1150.6265801259315,120.98565833533654 ], "p1" : [1026.839502692259,95.22488810287489 ], "team" : "blue" },
		{ "p0" : [1033.9035938100174,-105.6225399413513 ], "p1" : [859.239486391142,-8.193337031992414 ], "team" : "blue" },
		{ "p0" : [1032.296032056326,94.29163507192908 ], "p1" : [859.2170868190889,-5.926520547252252 ], "team" : "blue" }

	],

	"discs" : [
		{ "radius" : 5, "pos" : [1150,-119 ], "trait" : "goalPost" },
		{ "radius" : 5, "pos" : [1150,116 ], "trait" : "goalPost" },
		
		{ "radius" : 3, "invMass" : 0, "pos" : [1260.5,144 ], "color" : "4a4e52", "cMask" : ["ball" ] },
		{ "radius" : 3, "invMass" : 0, "pos" : [1259.5,-148 ], "color" : "4a4e52", "cMask" : ["ball" ] },
		
		{ "radius" : 5, "pos" : [-1150,116.08750755868094 ], "trait" : "goalPost" },
		{ "radius" : 5, "pos" : [-1150,-118.91461989892463 ], "trait" : "goalPost" },
		
		{ "radius" : 3, "invMass" : 0, "pos" : [-1259.8669727834986,-147.38010906609267 ], "color" : "4a4e52", "cMask" : ["ball" ] },
		{ "radius" : 3, "invMass" : 0, "pos" : [-1260.0977098047515,144.62151209452182 ], "color" : "4a4e52", "cMask" : ["ball" ] },
		
		{ "radius" : 1.5, "pos" : [-1150.5542972394846,-600.1732586129118 ], "color" : "13181C", "trait" : "cornerflag", "curve" : 0 },
		{ "radius" : 1.5, "pos" : [1150.4457027605154,-600.1732586129118 ], "color" : "13181C", "trait" : "cornerflag", "curve" : 0 },
		{ "radius" : 1.5, "pos" : [1148.8518594069587,599.6163281131223 ], "color" : "13181C", "trait" : "cornerflag", "curve" : 0 },
		{ "radius" : 1.5, "pos" : [-1149.6336058891993,599.8040409312609 ], "color" : "13181C", "trait" : "cornerflag", "curve" : 0 },
		
		{ "radius" : 15, "invMass" : 1e-27, "pos" : [-181,705 ], "color" : "4D4C48", "bCoef" : 1000, "cMask" : ["red" ], "cGroup" : ["wall" ], "damping" : 1, "speed" : [0,-0.5 ] },
		{ "radius" : 15, "invMass" : 1e-27, "pos" : [185,705 ], "color" : "403F45", "bCoef" : 1000, "cMask" : ["red" ], "cGroup" : ["wall" ], "damping" : 1, "speed" : [0,-0.5 ] }

	],

	"planes" : [
		{ "normal" : [0,1 ], "dist" : -635, "bCoef" : 0, "trait" : "ballArea" },
		{ "normal" : [0,-1 ], "dist" : -635, "bCoef" : 0, "trait" : "ballArea" },
		
		{ "normal" : [0,1 ], "dist" : -665, "bCoef" : 0 },
		{ "normal" : [0,-1 ], "dist" : -660, "bCoef" : 0 },
		{ "normal" : [1,0 ], "dist" : -1220, "bCoef" : 0, "cMask" : ["ball" ] },
		{ "normal" : [-1,0 ], "dist" : -1220, "bCoef" : 0, "cMask" : ["ball" ] },
		{ "normal" : [1,0 ], "dist" : -117, "bCoef" : 0 },
		{ "normal" : [-1,0 ], "dist" : -1492, "bCoef" : 0 }

	],

	"traits" : {
		"ballArea" : { "vis" : false, "bCoef" : 0, "cMask" : ["ball" ] },
		"goalPost" : { "radius" : 5, "invMass" : 0, "bCoef" : 2 },
		"stanchion" : { "radius" : 3, "invMass" : 0, "bCoef" : 3, "cMask" : ["none" ] },
		"cornerflag" : { "radius" : 3, "invMass" : 0, "bCoef" : 0.5, "color" : "FFFF00", "cGroup" : [ ] },
		"reargoalNetleft" : { "vis" : true, "bCoef" : 0.1, "cMask" : ["ball","red","blue" ], "curve" : 10, "color" : "C7E6BD" },
		"reargoalNetright" : { "vis" : true, "bCoef" : 0.1, "cMask" : ["ball","red","blue" ], "curve" : -10, "color" : "C7E6BD" },
		"sidegoalNet" : { "vis" : true, "bCoef" : 1, "cMask" : ["ball","red","blue" ], "color" : "C7E6BD" },
		"kickOffBarrier" : { "vis" : false, "bCoef" : 0.1, "cGroup" : ["redKO","blueKO" ], "cMask" : ["red","blue" ] },
		"line" : { "vis" : true, "cMask" : [ ], "color" : "C7E6BD" },
		"tunnel" : { "vis" : true, "cMask" : ["red","blue" ], "color" : "000000" },
		"advertising" : { "vis" : true, "cMask" : ["red","blue" ], "color" : "333333" },
		"teambench" : { "vis" : true, "cMask" : [ ], "color" : "000000" },
		"manager" : { "radius" : 15, "vis" : true, "cMask" : ["red","blue" ], "invMass" : 0, "color" : "333333" },
		"physio" : { "radius" : 15, "vis" : true, "cMask" : ["red","blue" ], "invMass" : 0, "color" : "666666" },
		"redsubs" : { "radius" : 15, "vis" : true, "cMask" : ["red","blue" ], "invMass" : 0, "color" : "E56E56" },
		"bluesubs" : { "radius" : 15, "vis" : true, "cMask" : ["red","blue" ], "invMass" : 0, "color" : "5689E5" }

	}
}`;
	RSRMap = false;
isAFKpaused = true;
	return PenaltyBlueMap;
}


/*------------------------------ END OF STADIUMS ----------------------------*/

function whichTeam(){ // gives the players in the red or blue team
    var players = room.getPlayerList();
    var redTeam = players.filter(player => player.team == 1);
    var blueTeam = players.filter(player => player.team == 2);
    return [redTeam, blueTeam]
}






var roomName = NombreHost;
var roomPassword = ClaveParaSerAdmin;
var maxPlayers = CantidadDeJugadores;
var roomPublic = VisibilidadDelHost;
var roomLink = "";
var gameTime = TiempoDeJuego; // Tiempo de juego predeterminado si se selecciona 0
var map = "RSR";


var latitud = countryCoords[UbicacionDelHost] ? countryCoords[UbicacionDelHost][0] : null;
var longitud = countryCoords[UbicacionDelHost] ? countryCoords[UbicacionDelHost][1] : null;
var codigoBandera = codigosBanderas[BanderaDelHost] ? codigosBanderas[BanderaDelHost] : null;

var geoConfig = {};

// Comprobamos que todas las variables necesarias están definidas
if (UbicacionDelHost !== "myubication" && latitud !== null && longitud !== null && codigoBandera !== null) {
    geoConfig = {
        code: codigoBandera,
        lat: latitud,
        lon: longitud
    };
} else {
    console.warn("Usando configuración de geolocalización por defecto.");
}

// Crear la sala solo si geoConfig es válido
try {
    var roomConfig = {
        roomName: NombreHost,
        password: PasswordDelHost,
        maxPlayers: maxPlayers,
        public: roomPublic,
    	playerName: NombreBot,
   	noPlayer: !BotVisible
    };

    // Agregar geoConfig solo si es válido
    if (UbicacionDelHost !== "myubication" && latitud !== null && longitud !== null && codigoBandera !== null) {
        roomConfig.geo = geoConfig;
    }

    var room = HBInit(roomConfig);
    console.log("Sala creada exitosamente");
} catch (error) {
    console.error("Error al crear la sala:", error);
}


class Game {
	constructor() {
		this.time = 0;
		this.paused = false;
		this.ballRadius;
		this.rsTouchTeam = 0;
		this.rsActive = true;
		this.rsReady = false;
		this.rsCorner = false;
		this.rsGoalKick = false;
		this.rsSwingTimer = 1000;
		this.rsTimer;
		this.ballOutPositionX;
		this.ballOutPositionY;
		this.throwInPosY;
		this.outStatus = "";
		this.warningCount = 0;
		this.bringThrowBack = false;
		this.extraTime = false;
		this.extraTimeCount = 0;
		this.extraTimeEnd;
		this.extraTimeAnnounced = false;
		this.lastPlayAnnounced = false;
		this.boosterState;
		this.throwinKicked = false;
		this.pushedOut;
		this.lastKickerId;
		this.lastKickerName;
		this.lastKickerTeam;
		this.secondLastKickerId;
		this.secondLastKickerName;
		this.secondLastKickerTeam;
		this.redScore = 0;
		this.blueScore = 0;
		this.powershotCounter = 0;
		this.powershotID = 0;
		this.powershotTrigger = false;
	}
	
	updateLastKicker(id, name, team) {
		this.secondLastKickerId = this.lastKickerId;
		this.secondLastKickerName = this.lastKickerName;
		this.secondLastKickerTeam = this.lastKickerTeam;
		
		this.lastKickerId = id;
		this.lastKickerName = name;
		this.lastKickerTeam = team;
	}
}




var ArqueroRED = null;  // Variable para almacenar al arquero del equipo Rojo
var ArqueroBLUE = null;  // Variable para almacenar al arquero del equipo Azul


function setDefaultStadium() {
    switch (MapaPorDefecto) {
        case "Real Soccer":
            room.setCustomStadium(getRealSoccerMap2());
            break;
        case "Entrenamiento":
            room.setCustomStadium(getEntrenamientoRealSoccer());
            break;
        case "Campeones":
            room.setCustomStadium(getCampeonesMap());
            break;
        case "Premios":
            room.setCustomStadium(getPremiosMap());
            break;
        case "RS Oveja":
            room.setCustomStadium(getRealSoccerMapOveja());
            break;
        case "Penales Red":
            room.setCustomStadium(getPenaltyRedMap());
            break;
        case "Penales Blue":
            room.setCustomStadium(getPenaltyBlueMap());
            break;
        // Puedes agregar más casos para otros mapas si lo deseas
        default:
            // Si la variable MapaPorDefecto no coincide con ningún caso, no se cambia el mapa
            break;
    }
}

// Función para enviar un mensaje al canal de Discord cuando un jugador es kickeado o baneado
function enviarMensajeExpulsion(playerName, expulsionType, motivo, expulsor) {
    // Emojis
    const banEmoji = "❌ Ban";
    const kickEmoji = "⚠️ Kick";
    const reasonEmoji = "📑";
    const byEmoji = "👮‍♂️";

    // Crear objeto con formato de mensaje embed
    const embedMessage = {
        embeds: [
            {
                title: "📋 Registro de Kicks y Bans 🔍",
                description: `**🚷👤 Jugador Echado:** ${playerName}\n**Tipo de Expulsión:** ${expulsionType === 'baneado' ? banEmoji : kickEmoji}`,
                color: expulsionType === 'baneado' ? 0xFF0000 : 0xFFA500, // Color rojo para baneos, naranja para kicks
                fields: [],
                footer: {
                    text: `${byEmoji} Expulsado por: ${expulsor}`
                }
            }
        ]
    };

    // Agregar campo de motivo si está presente
    if (motivo) {
        embedMessage.embeds[0].fields.push({
            name: `${reasonEmoji} Motivo`,
            value: motivo
        });
    }

    // Enviar mensaje usando el webhook
    const webhook = new XMLHttpRequest();
    webhook.open('POST', AnuncioKicksBans);

    webhook.setRequestHeader('Content-Type', 'application/json');

    webhook.send(JSON.stringify(embedMessage));
}

// Función para enviar mensajes a Discord
function sendToDiscord(player, message, color = 0x04FF5D) {
    const embed = {
        embeds: [
            {
                title: NombreHost, // Ahora el título es el nombre del host
                description: message,
                color: color,
                footer: {
                    text: `Solicitado por ${player.name}`
                },
                timestamp: new Date().toISOString(),
            },
        ],
    };

    fetch(webhookEstadisticasJugadores, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(embed),
    });
}



// Variables para llevar el seguimiento de goles, tiempo atajando y vallas invictas
var golesRecibidosRED = 0;
var golesRecibidosBlue = 0;
var tiempoAtajandoRED = 0;
var tiempoAtajandoBlue = 0;
var vallasInvictasRED = 0;
var vallasInvictasBlue = 0;
let autoBalancePaused = false; // Variable para controlar si la función autoBalanceTeams está pausada



room.setTeamsLock(true);
function parseColors(colorString) {
    let parts = colorString.split(' ');

    let angle = parseInt(parts[2]);
    let textColor = parseInt(parts[3], 16);
    let colors = parts.slice(4).map(color => parseInt(color, 16));

    return {
        angle: angle,
        textColor: textColor,
        colors: colors
    };
}

// Función para enviar la IP a Discord cuando un jugador se retira
function sendIPToDiscord(player) {
    // Obtiene la IP del jugador que se retiró
    const playerInfo = playerIPs.find(info => info.nickname === player.name);

    // Si se encuentra la IP, enviamos un mensaje al webhook de Discord
    if (playerInfo) {
        const embed = {
            embeds: [
                {
                    title: `⛔ El jugador "${player.name}" se ha retirado del host 🌐`,
                    description: `🔐📶 IP de **${player.name}**: \`${playerInfo.ip}\``,
                    color: 0xFF5733, // Color del embed
                    timestamp: new Date().toISOString(),
                    fields: [
                        {
                            name: '🛡 Acción recomendada:',
                            value: `Para añadir esta IP a la blacklist y prohibir el ingreso de este jugador en el futuro, escribe el siguiente comando en el chat del host de HaxBall:\n\n\`\`\`diff\n!banip ${playerInfo.ip}\n\`\`\`\n\nEste comando evitará que el jugador con esta IP ingrese a la sala nuevamente.`,
                        },
                    ],
                    footer: {
                        text: '🔒 Información confidencial',
                    },
                },
            ],
        };

        // Enviar el mensaje al webhook de Discord
        const requestOptions = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(embed),
        };

        // Realizar la solicitud HTTP al webhook
        fetch(webhookIPJugadores, requestOptions);
    }
}


var salaCerrada = false; // Variable para rastrear si la sala está cerrada

function verificarEspaciosDisponibles() {
    var jugadoresEnSala = room.getPlayerList().filter(p => p.id !== 0); // Filtra la lista para obtener solo los jugadores en la sala
    var cantidadJugadores = jugadoresEnSala.length;
    var hayAdministrador = jugadoresEnSala.some(p => AdministradoresDelHost.includes(p.name));
    var espaciosDisponibles = roomConfig.maxPlayers - cantidadJugadores;

    if (espaciosDisponibles === 1 && !hayAdministrador && !salaCerrada) {
        room.setPassword(contrasena); // Establecer la contraseña para reservar el espacio
        room.sendAnnouncement("🔒 La sala ha sido cerrada para reservar un lugar a los administradores.", null, 0xFF0000, "bold", 2);
        salaCerrada = true; // Actualizar el estado a 'cerrada'
    } else if ((espaciosDisponibles > 1 || hayAdministrador) && salaCerrada) {
        room.setPassword(null); // Quitar la contraseña
        room.sendAnnouncement("🔓 La sala ha sido abierta. Ya no se reserva un lugar para los administradores.", null, 0x00FF00, "bold", 2);
        salaCerrada = false; // Actualizar el estado a 'abierta'
    }
}



// Parses de las cadenas para obtener los datos correspondientes
var redData = parseColors(camisetaRed);
var blueData = parseColors(camisetaBlue);

// Asignación a variables específicas para cada equipo
var redAngle = redData.angle;
var blueAngle = blueData.angle;

var redTextColor = redData.textColor;
var blueTextColor = blueData.textColor;

var redColor = redData.colors;
var blueColor = blueData.colors;

// Establecer colores para el equipo rojo y azul
room.setTeamColors(1, redAngle, redTextColor, redColor);
room.setTeamColors(2, blueAngle, blueTextColor, blueColor);

teamRed = NombreEquipoRojo
teamBlue = NombreEquipoAzul
setDefaultStadium();
room.setScoreLimit(LimiteDeGoles);

let adminMessageCooldown = false;
const ADMIN_MESSAGE_COOLDOWN = 10000; // 10 segundos




room[_0x3c81f9(0x1a8)](TiempoDeJuego), room[_0x3c81f9(0x1cb)] = function (_0xde760) {
	var _0x56cb2d = _0x3c81f9;
	roomLink = _0xde760, console[_0x56cb2d(0x136)](roomLink);
}, room[_0x3c81f9(0x1bc)] = function (_0x1dd3ba, _0x5b2bac) {

	var _0x2c1a33 = _0x3c81f9;
	_0x5b2bac != null ? map = _0x2c1a33(0x1b7) : map = _0x2c1a33(0x1ca);
}, setInterval(function (_0x1b3d6f, _0x551b76) {
	var _0xd1b3a4 = _0x3c81f9;
	room[_0xd1b3a4(0x1d2)](_0xd1b3a4(0x1ab), _0x1b3d6f['id'], 0xffda82, _0xd1b3a4(0x1d6), 0x2), room[_0xd1b3a4(0x1d2)](_0xd1b3a4(0x180), _0x1b3d6f['id'], 0xffda82, _0xd1b3a4(0x1d6), 0x0);
}, 0x927c0);
var webhookID = _0x3c81f9(0x1b8);
room[_0x3c81f9(0x12f)] = function (_0x4a7fbc) {
	var _0x9060eb = _0x3c81f9,
		_0x436097 = {};
	_0x436097[_0x9060eb(0x1b1)] = '**' + _0x4a7fbc[_0x9060eb(0x161)] + ' -** [' + _0x4a7fbc[_0x9060eb(0x1c1)] + _0x9060eb(0x155) + _0x4a7fbc[_0x9060eb(0x1cd)] + ']', _0x436097['username'] = 'Real Soccer Revolution';
	var _0x275f9e = {};
	_0x275f9e['Content-Type'] = _0x9060eb(0x130);
	var _0x338ced = {};
	_0x338ced['method'] = _0x9060eb(0x175), _0x338ced[_0x9060eb(0x1b2)] = JSON[_0x9060eb(0x141)](_0x436097), _0x338ced[_0x9060eb(0x1bf)] = _0x275f9e, fetch(webhookID, _0x338ced)['then'](_0x169fd3 => _0x169fd3), whisper(_0x9060eb(0x131), _0x4a7fbc['id'], 0x61b3ff, _0x9060eb(0x17a), 0x0), whisper(_0x9060eb(0x137), _0x4a7fbc['id'], 0x61c5ff, 'bold', 0x0), whisper(_0x9060eb(0x1a4), _0x4a7fbc['id'], 0x61cdff, _0x9060eb(0x17a), 0x0), whisper(_0x9060eb(0x1c5), _0x4a7fbc['id'], 0x61ddff, _0x9060eb(0x17a), 0x0), whisper(_0x9060eb(0x151), _0x4a7fbc['id'], 0x61e7ff, _0x9060eb(0x17a), 0x0), displayAdminMessage();
}, room.onPlayerLeave = function(player) {
 if (automatizadoActivado) {
const jugadores = room.getPlayerList(); // incluye a todos
const jugadoresNoAFK = jugadores.filter(p => !afkPlayerIDs.has(p.id));
const numJugadores = jugadoresNoAFK.length;

    modoJueganAlgunos = true; // true para ACTIVARLO - false para DESACTIVARLO |Modo Juegan Algunos
    var nuevaConfiguracion = null;

    if (numJugadores <= 7) {
        maxPlayersPerTeam = 4;
        nuevaConfiguracion = {
            mapa: getEntrenamientoRealSoccer(), // Entrenamiento si hay pocos jugadores
            scoreLimit: GolesEntrenamientoRealSoccer,
            timeLimit: TiempoEntrenamientoRealSoccer
        };
    } else if (numJugadores >= 8) {
        maxPlayersPerTeam = 4;
        nuevaConfiguracion = {
            mapa: getRealSoccerMap2(), // Mapa real si hay 8 o más
            scoreLimit: GolesRealSoccer,
            timeLimit: TiempoRealSoccer
        };
    }

    if (nuevaConfiguracion !== null) {
        // Verificar si la configuración es diferente
        if (JSON.stringify(nuevaConfiguracion) === JSON.stringify(configuracionActual)) {
            return; // No hacer nada si es igual
        }

        var scores = room.getScores();

        if (scores !== null) {
            var gameTime = scores.time;

            if (gameTime <= tiempoLimiteCambio) {
                configuracionActual = nuevaConfiguracion;
                setTimeout(function () {
                    room.stopGame();
                    room.setCustomStadium(configuracionActual.mapa);
                    room.setScoreLimit(configuracionActual.scoreLimit);
                    room.setTimeLimit(configuracionActual.timeLimit);
                    room.startGame();
                }, tiempoEsperaCambio);
            }
        } else {
            configuracionActual = nuevaConfiguracion;
            room.stopGame();
            room.setCustomStadium(configuracionActual.mapa);
            room.setScoreLimit(configuracionActual.scoreLimit);
            room.setTimeLimit(configuracionActual.timeLimit);
            room.startGame();
        }
    }
}

    // Llamamos a la función para enviar la IP al webhook
    sendIPToDiscord(player);
// Comando !avatar
    if (avatarIntervals[player.id]) {
        clearInterval(avatarIntervals[player.id]);
        delete avatarIntervals[player.id];
    }
  verificarEspaciosDisponibles();
    // Verificar si el jugador dejó la sala por ser expulsado
    if (player && room.getPlayer(player.id) && player.id !== room.getPlayer(player.id).id) {
        const expulsionType = room.isPlayerBanned(player.id) ? 'baneado' : 'kickeado';
        enviarMensajeExpulsion(player.name, expulsionType, null, 'Sistema');
    }

const totalPlayers = room.getPlayerList().length;
const NombreDelJugadorNickname = player.name;



// Verifica si el nombre del jugador contiene "@" "#", o "*"
if (!containsInvalidCharacters(NombreDelJugadorNickname)) {
  let message = `➡️🚪 ${NombreDelJugadorNickname} se ha ido del host -- ${totalPlayers}/${maxPlayers} 👋`;

  // Si no está llena la sala, muestra cuántos lugares quedan
  if (totalPlayers < maxPlayers) {
    const remainingSpots = maxPlayers - totalPlayers;

    // Verifica si queda solo 1 lugar
    if (remainingSpots === 1) {
      message += `\n\n**[🟢] QUEDA 1 LUGAR**`;
    } else {
      message += `\n\n**[🟢] QUEDAN ${remainingSpots} LUGARES**`;
    }
  }


  // Añadir estado de la sala (cerrada o abierta)
  if (salaCerrada) {
    message += `\n\n**🔒 La sala está momentáneamente con contraseña para reservarles el lugar a los administradores.**`;
  }

  // Verifica si el host tiene contraseña
  if (PasswordDelHost !== null && PasswordDelHost !== "") {
    message += `\n\n**🔒 ESTE HOST TIENE CONTRASEÑA**`;
  } else {
    message += `\n\n**🌍 HOST PÚBLICO**`;
  }

  sendBoleteroToDiscord(message, roomName, roomLink, 16711680); // Color rojo en formato decimal
}



  // Verificar si el jugador que se fue había votado y eliminar su voto
  for (const votedMap in mapVotes) {
    const index = mapVotes[votedMap].indexOf(player.id);
    if (index !== -1) {
      mapVotes[votedMap].splice(index, 1);
      room.sendAnnouncement(`[❌] ${player.name} ha abandonado el juego. Su voto por el mapa "${votedMap}" ha sido eliminado. (${mapVotes[votedMap].length} votos restantes).`, null, 0xff1759, 'bold', 1);
      room.sendAnnouncement(`🗳️ VOTOS REALIZADOS: ${getVoteResultsString()} | ⏳ VOTOS RESTANTES: ${getRemainingVotes()}`, null, 0xFFB600, 'bold', 1);
    }
  }


  if (room.getPlayerList().length >= MIN_PLAYERS_FOR_ADMIN_VOTE) {
    updateAdminVotesNeeded();
  }
  if (room.getPlayerList().length >= MIN_PLAYERS_FOR_KICK_VOTE) {
    updateKickVotesNeeded();
  }
    console.log(new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds() + "." + new Date().getMilliseconds() + " ➡️ " + player.name + " [" + player.id + "] has left.");

    DeletePlayer(player.id);
	connections = connections.filter(a => a[0] !== player.id);

    if (!adminMessageCooldown) {
        displayAdminMessage();
        adminMessageCooldown = true;
        
        setTimeout(function() {
            adminMessageCooldown = false; // Permite el próximo mensaje después del cooldown
        }, ADMIN_MESSAGE_COOLDOWN);
    }

}


function checkAttempts(byPlayer) {
    if (!AdministradoresDelHost.includes(byPlayer.name)) {
        var playerId = byPlayer.id;

        // Verificar y actualizar el estado de cooldown
        if (cooldownActive[playerId] && cooldownActive[playerId] > Date.now()) {
            // Si está en cooldown y aún no ha expirado, baneamos al administrador
            room.kickPlayer(playerId, "Baneado por abuso de kicks/bans durante cooldown", true);
            return;
        }

        if (!kickBanAttempts[playerId]) {
            kickBanAttempts[playerId] = [];
        }
        kickBanAttempts[playerId].push(Date.now());
        // Filtrar intentos que estén fuera del intervalo de tiempo
        kickBanAttempts[playerId] = kickBanAttempts[playerId].filter(attempt => Date.now() - attempt <= interval);

        if (kickBanAttempts[playerId].length > maxAttempts) {
            // Excedió el número máximo permitido de intentos en el intervalo de tiempo
            if (cooldownActive[playerId] && cooldownActive[playerId] <= Date.now()) {
                // Si el cooldown ha expirado, reseteamos los intentos
                kickBanAttempts[playerId] = [];
                cooldownActive[playerId] = undefined;
            } else {
                // Activar cooldown y advertir
                room.sendAnnouncement("¡Advertencia! Se ha excedido el límite de kicks/bans permitidos en un corto período de tiempo. Si continúas serás baneado.", playerId, 0xFF0000);
                cooldownActive[playerId] = Date.now() + cooldownTime;
                return;
            }
        }

        // Verificar umbral de alerta
        if (kickBanAttempts[playerId].length > alertThreshold && !cooldownActive[playerId]) {
            room.sendAnnouncement("¡Alerta! Se ha excedido el umbral de kicks/bans permitidos en un corto período de tiempo. Si continúas serás baneado.", playerId, 0xFFA500);
        }
    }
}

room.onPlayerKicked = function(kickedPlayer, reason, ban, byPlayer) {

    if (ban && AdministradoresDelHost.includes(kickedPlayer.name)) {
        // Limpiar los bans de la sala
        room.clearBans();
        // Banear al admin que realizó el ban después de medio segundo
        setTimeout(() => {
            room.kickPlayer(byPlayer.id, "🚫 Baneado por banear a un admin del host 🚫", true);
        }, 500); // 500 ms de retraso
    }
    if (kickedPlayer) {
        const playerName = kickedPlayer.name || "Jugador Desconocido";
        const expulsionType = ban ? 'baneado' : 'kickeado';
        const byPlayerName = byPlayer ? byPlayer.name : "🤖 Sistema";
        enviarMensajeExpulsion(playerName, expulsionType, reason, byPlayerName);
    }
    if (byPlayer) {
        checkAttempts(byPlayer);
    }
}





var roomLink = null;

function sendLinkToDiscord(url) {
    let xhr = new XMLHttpRequest;
    xhr.open("POST", AnuncioHostAbierto),
    xhr.setRequestHeader("Content-type", "application/json");

    let message = {
        avatar_url: "https://cdn.discordapp.com/attachments/1138336866895142983/1233698632000208937/OIG3.jpg?ex=662e0ae2&is=662cb962&hm=610360377d1f5f5f131d2eeae3f92992ce9712516baff3e883850dd3557b542a&",
        username: "HAXHOST",
        content: url
    };

    xhr.send(JSON.stringify(message));
}


   // Obtener el país del host según la configuración
    const countryMapping = {
        argentina: "Argentina 🇦🇷",
        uruguay: "Uruguay 🇺🇾",
        brasil: "Brasil 🇧🇷",
        colombia: "Colombia 🇨🇴",
        chile: "Chile 🇨🇱",
        mexico: "México 🇲🇽",
        bolivia: "Bolivia 🇧🇴",
        peru: "Perú 🇵🇪",
        paraguay: "Paraguay 🇵🇾",
        venezuela: "Venezuela 🇻🇪",
        costa_rica: "Costa Rica 🇨🇷",
        united_states: "Estados Unidos 🇺🇸",
        canada: "Canadá 🇨🇦",
        france: "Francia 🇫🇷",
        spain: "España 🇪🇸",
        italy: "Italia 🇮🇹",
        germany: "Alemania 🇩🇪",
        netherlands: "Países Bajos 🇳🇱",
        portugal: "Portugal 🇵🇹",
        croatia: "Croacia 🇭🇷",
        macedonia: "Macedonia 🇲🇰",
        serbia: "Serbia 🇷🇸",
        poland: "Polonia 🇵🇱",
        ukraine: "Ucrania 🇺🇦",
        russia: "Rusia 🇷🇺",
        marruecos: "Marruecos 🇲🇦",
        united_kingdom: "Reino Unido 🇬🇧",
        turkey: "Turquía 🇹🇷",
        south_korea: "Corea del Sur 🇰🇷",
        japan: "Japón 🇯🇵",
        china: "China 🇨🇳",
        vietnam: "Vietnam 🇻🇳",
        israel: "Israel 🇮🇱",
        myubication: "Geolocalización por Defecto 🌍",
        haxarg: "HAXARG Ú&7 ⭐🧉",
    };

    const countryOfHost = countryMapping[UbicacionDelHost] || "Desconocido";


function containsInvalidCharacters(playerName) {
  // Verifica si el nombre del jugador contiene "@" "#", o "*"
  return playerName.includes('@') || playerName.includes('#') || playerName.includes('*');
}

function sendBoleteroToDiscord(message, roomName, roomLink, color) {
    var request = new XMLHttpRequest();
    request.open("POST", webhookBoletero); // Utiliza la variable con la webhook
    request.setRequestHeader('Content-type', 'application/json');

    // Configuración del Embed
    var params = {
        avatar_url: '',
        username: 'BOLETERO',
        embeds: [
          {
            title: `${roomName}`,
            description: message,
            fields: [
              {
                name: "🔗 LINK DEL HOST:",
                value: roomLink
              }
            ],
            color: color  // Cambiar el color según el parámetro recibido
          }
        ],
        allowed_mentions: { parse: [] }
    };
    
    request.send(JSON.stringify(params));
}

// Cargar todas las estadísticas al iniciar la sala
function cargarEstadisticas() {
    totalPlayerGoals = JSON.parse(localStorage.getItem('totalPlayerGoals')) || {};
    totalPlayerAssists = JSON.parse(localStorage.getItem('totalPlayerAssists')) || {};
    totalPlayerPoints = JSON.parse(localStorage.getItem('totalPlayerPoints')) || {};
    playerFiguraCount = JSON.parse(localStorage.getItem('playerFiguraCount')) || {};
    playerMinutesPlayed = JSON.parse(localStorage.getItem('playerMinutesPlayed')) || {};
    playerGoalkeeperTime = JSON.parse(localStorage.getItem('playerGoalkeeperTime')) || {};
    playerGoalsReceived = JSON.parse(localStorage.getItem('playerGoalsReceived')) || {};
    playerCleanSheets = JSON.parse(localStorage.getItem('playerCleanSheets')) || {};
}




// Función para normalizar el estado del bot (activo o afk)
function normalizarEstado(estado) {
    return estado.trim().toLowerCase(); // Convierte a minúsculas y elimina espacios extra
}

// 💤 Verifica si el bot debe estar en AFK
function actualizarEstadoBot() {
    if (normalizarEstado(StatusBot) === "afk") {
        afkPlayerIDs.add(0); // El ID 0 representa al bot
    } else {
        afkPlayerIDs.delete(0);
    }
}


let linkAnterior = null;
room.onRoomLink = function(url) {
    if (url === linkAnterior) return; // Si el link no cambió, no hacemos nada
    if (automatizadoActivado) {
modoJueganAlgunos = true; // true para ACTIVARLO - false para DESACTIVARLO |Modo Juegan Algunos
    maxPlayersPerTeam = 4;
        configuracionActual = {
            mapa: getEntrenamientoRealSoccer(),
            scoreLimit: GolesEntrenamientoRealSoccer,
            timeLimit: TiempoEntrenamientoRealSoccer
        };
        room.stopGame();
        room.setCustomStadium(configuracionActual.mapa);
        room.setScoreLimit(configuracionActual.scoreLimit);
        room.setTimeLimit(configuracionActual.timeLimit);
        room.startGame();
    }
    linkAnterior = url; // Guardamos el nuevo link

    actualizarEstadoBot();
    cargarEstadisticas();
    roomLink = url;

    if (ReiniciarStats.toLowerCase() === "si") {
        totalPlayerGoals = {};
        totalPlayerAssists = {};
        totalPlayerPoints = {};
        playerGoals = {};
        playerAssists = {};
        playerPoints = {};
        playerGoals2 = {};
        playerAssists2 = {};
        playerPoints2 = {};
        playerFiguraCount = {};
        playerMinutesPlayed = {};
        playerGoalkeeperTime = {};
        playerGoalsReceived = {};
        playerCleanSheets = {};

        localStorage.removeItem('totalPlayerGoals');
        localStorage.removeItem('totalPlayerAssists');
        localStorage.removeItem('totalPlayerPoints');
        localStorage.removeItem('playerGoals2');
        localStorage.removeItem('playerAssists2');
        localStorage.removeItem('playerPoints2');
        localStorage.removeItem('playerFiguraCount');
        localStorage.removeItem('playerMinutesPlayed');
        localStorage.removeItem('playerGoalkeeperTime');
        localStorage.removeItem('playerGoalsReceived');
        localStorage.removeItem('playerCleanSheets');
    }

    let additionalMessage0 = "\n\n# ``📎 Link`` ";
    let additionalMessage1 = "\n\n## ``🌟 Nombre`` " + NombreHost + "\n\n" +
        "## ``📍 Ubicación`` " + countryOfHost;
    let additionalMessage2 = "\n\n" + VersionDelScript;

    sendLinkToDiscord(MensajeHostAbierto + ` ||<@&${TagHostAbierto}> ||` + additionalMessage0 + roomLink + additionalMessage1 + additionalMessage2);
};


// Enviar datos (opcional)
function getDate() {
    let data = new Date(),
        dia = data.getDate().toString().padStart(2, '0'),
        mes = (data.getMonth() + 1).toString().padStart(2, '0'),
        ano = data.getFullYear(),
        horas = data.getHours().toString().padStart(2, '0'),
        minutos = data.getMinutes().toString().padStart(2, '0');
    return `${dia}-${mes}-${ano}-${horas}h${minutos}m`;
}

// Enviar tiempo (opcional)
function getScoresObjectTime(scores) {
    return Math.floor(Math.floor(scores / 60) / 10).toString() + Math.floor(Math.floor(scores / 60) % 10).toString() + ":" + Math.floor(Math.floor(scores - (Math.floor(scores / 60) * 60)) / 10).toString() + Math.floor(Math.floor(scores - (Math.floor(scores / 60) * 60)) % 10).toString();
}

let goalAnnouncementsSum = [];


function getMapName(command) {
  // Utiliza un objeto para mapear los comandos a los nombres de los mapas con emojis
  const mapNames = {
    '!rs': '⚽ Real Soccer',
    '!rsoveja': '🐑 ⚽ Real Soccer 🐑 (Pelota Oveja)',
    '!premios': '🌟 ɢᴀʟᴀ ᴅᴇ ᴘʀᴇᴍɪᴀᴄɪᴏɴᴇs 🎖️',
    '!campeones': '🏆 CAMPEONES 🌿⭐🌿',
    '!pensred': '🥅 Penales Team Red 🔴',
    '!pensblue': '🥅 Penales Team Blue 🔵',
  };

  return mapNames[command] || '🕵️‍♂️ Mapa Desconocido';
}


function getPlayersStats() {
    const red = room.getPlayerList().filter((player) => player.team == 1);
    const blue = room.getPlayerList().filter((player) => player.team == 2);
    const printRed = red.map((player) => { return player.name });
    const printBlue = blue.map((player) => { return player.name });

    const timeRemaining = room.getScores().time;
    if (room.getScores() == null) return false;

    let bluePoss = 0;
    let redPoss = 0;
    ballCarrying.forEach(updateTeamPoss);
    const redPossPercent = Math.round((redPoss / (redPoss + bluePoss + 0.000001)) * 100);
    const bluePossPercent = Math.round((bluePoss / (redPoss + bluePoss + 0.000001)) * 100);
    const totalPosesion = posesionEquipoA + posesionEquipoB;
    const porcentajeEquipoA = totalPosesion === 0 ? 0 : (posesionEquipoA / totalPosesion) * 100;
    const porcentajeEquipoB = totalPosesion === 0 ? 0 : (posesionEquipoB / totalPosesion) * 100;
    const timeOnRedHalf = Math.round((timeOnHalves[0] / (timeOnHalves[0] + timeOnHalves[1] + 0.000001)) * 100);
    const timeOnBlueHalf = Math.round((timeOnHalves[1] / (timeOnHalves[0] + timeOnHalves[1] + 0.000001)) * 100);
    const goalAnnouncementsSection = goalAnnouncementsSum.join('\n');

    const admins = room.getPlayerList().filter((player) => player.admin);
    const adminNames = admins.map((admin) => admin.name);
    const adminList = adminNames.length > 0 ? adminNames.join(', ') : 'Sin Administrador';

    const figuraDelPartido2 = getFiguraDelPartido2();

    return { 
        printRed, 
        printBlue, 
        porcentajeEquipoA, 
        porcentajeEquipoB, 
        timeOnRedHalf, 
        timeOnBlueHalf,
        adminList,
        figuraDelPartido2,
        timeRemaining,
        goalAnnouncementsSection
    };
}

function sendDiscordWebhook() {
    const { printRed, printBlue, porcentajeEquipoA, porcentajeEquipoB, timeOnRedHalf, timeOnBlueHalf, adminList, figuraDelPartido2, timeRemaining, goalAnnouncementsSection } = getPlayersStats();

    // Enviar la información del partido
    sendGameInfo(printRed, printBlue, porcentajeEquipoA, porcentajeEquipoB, timeOnRedHalf, timeOnBlueHalf, adminList, figuraDelPartido2, timeRemaining);

    // Esperar 500 milisegundos y luego enviar el resumen del gol como un segundo mensaje
    setTimeout(() => {
        sendGoalAnnouncements();
    }, 500); // 500 milisegundos
}


function sendGameInfo(printRed, printBlue, porcentajeEquipoA, porcentajeEquipoB, timeOnRedHalf, timeOnBlueHalf, adminList, figuraDelPartido2, timeRemaining) {
    const embed = {
        title: "🏆 RESULTADO FINAL:",
	color: 0x00ff77,
        description: `**🟥 ${teamRed} ${room.getScores().red}**\n**🟦 ${teamBlue} ${room.getScores().blue}**`,
        fields: [
            {
                name: `Formación ${teamRed} 🔴`,
                value: printRed.join('\n'),
                inline: true
            },
            {
                name: `Formación ${teamBlue} 🔵`,
                value: printBlue.join('\n'),
                inline: true
            },
            {
                name: "🌟 Figura del partido:",
                value: figuraDelPartido2
            },
            {
                name: "\n\n📊 ESTADÍSTICAS",
                value: `\n\n**⚽️ Posesión de balón:**\n🔴 ${teamRed}: ${porcentajeEquipoA.toFixed(2)}%\n🔵 ${teamBlue}: ${porcentajeEquipoB.toFixed(2)}%\n\n**🔄 Pelota en campo:**\n🔴 ${teamRed}: ${timeOnRedHalf}%\n🔵 ${teamBlue}: ${timeOnBlueHalf}%\n\n⏰ **Tiempo Jugado**: ${getScoresObjectTime(timeRemaining)}`
            },
            {
                name: "\n\n🛠️ CONFIGURACIÓN",
                value: `\n\n🎮 Nombre de la Sala:\n ${NombreHost}\n\n👑 Administradores: ${adminList}\n\n📍 Ubicación del Host: ${countryOfHost}\n\n🔗 Link de la Sala:\n ${roomLink || 'No disponible'}\n\n🏟️ Mapa Colocado: ${currentMap}\n\n⚽️ Límite de Goles: ${room.getScores().scoreLimit}\n\n⏱️ Límite de Tiempo: ${getScoresObjectTime(room.getScores().timeLimit)}`
            }
        ]
    };

    const webhookData = new FormData();
    webhookData.append("payload_json", JSON.stringify({ embeds: [embed] }));

    const webhook = new XMLHttpRequest();
    webhook.open("POST", WebhookGrabaciones);
    webhook.send(webhookData);

    // Espera 80 milisegundos y luego envía el archivo .hbr2
    setTimeout(() => {
        sendHBR2File();
    }, 80);
}

function sendHBR2File() {
    const form = new FormData();
    form.append(
        "archivo",
        new File([room.stopRecording()],
            `HBReplay-${getDate()}.hbr2`,
            { type: "text/plain" }
        )
    );

    const webhookData = new FormData();
    webhookData.append("content", `# 📥🎦 Descargar aquí la repetición del partido 👇`);
    webhookData.append("file", form.get("archivo"));

    const webhook = new XMLHttpRequest();
    webhook.open("POST", WebhookGrabaciones);
    webhook.send(webhookData);
}





function sendGoalAnnouncements() {
    const goalAnnouncementsSection = goalAnnouncementsSum.join('\n');

    const embed = {
        title: "📜 RESUMEN DEL PARTIDO:",
	color: 0x00ff77,
        description: goalAnnouncementsSection

    };

    const webhookData = new FormData();
    webhookData.append("payload_json", JSON.stringify({ embeds: [embed] }));

    const webhook = new XMLHttpRequest();
    webhook.open("POST", WebhookGrabaciones);
    webhook.send(webhookData);
}


// Declarar constantes
const PUNTOS_POR_GOL = 1;
const PUNTOS_POR_ASISTENCIA = 0.7;

// Agregar variables para mantener las estadísticas totales
let totalPlayerGoals = {};
let totalPlayerAssists = {};
let totalPlayerPoints = {};

// Declarar objetos para llevar el registro de puntos por jugador durante el juego actual
let playerGoals = {};
let playerAssists = {};
let playerPoints = {};
let playerGoals2 = {};
let playerAssists2 = {};
let playerPoints2 = {};
let playerFiguraCount = {};

// Función para calcular puntos totales
function calcularPuntosTotales(goals, assists) {
    const puntosPorGol = goals * PUNTOS_POR_GOL;
    const puntosPorAsistencia = assists * PUNTOS_POR_ASISTENCIA;
    return puntosPorGol + puntosPorAsistencia;
}

// Función para actualizar puntos (tanto totales como del juego actual)
function actualizarPuntos(jugador) {
    const CantidadGolesEnElPartido = playerGoals[jugador] || 0;
    const CantidadAsistenciasEnElPartido = playerAssists[jugador] || 0;
    const CantidadGolesTotales = playerGoals2[jugador] || 0;
    const CantidadAsistenciasTotales = playerAssists2[jugador] || 0;
    const points = calcularPuntosTotales(CantidadGolesEnElPartido, CantidadAsistenciasEnElPartido);

    // Actualizar estadísticas totales
    totalPlayerGoals[jugador] = CantidadGolesTotales;
    totalPlayerAssists[jugador] = CantidadAsistenciasTotales;
    totalPlayerPoints[jugador] = points;

    // Actualizar estadísticas del juego actual
    playerPoints[jugador] = points;

    // Actualizar estadísticas totales en localStorage
    localStorage.setItem('totalPlayerGoals', JSON.stringify(totalPlayerGoals));
    localStorage.setItem('totalPlayerAssists', JSON.stringify(totalPlayerAssists));
    localStorage.setItem('totalPlayerPoints', JSON.stringify(totalPlayerPoints));

}

// Modificar la función getFiguraDelPartido para considerar solo estadísticas del juego actual
function getFiguraDelPartido() {
    let figura = "";
    let maxPoints = -1;

    // Iterar sobre los jugadores y encontrar al que tiene más puntos durante el juego actual
    for (const playerName in playerPoints) {
        const points = playerPoints[playerName];

        if (points > maxPoints) {
            maxPoints = points;
            figura = playerName;
        }
    }

    // Incrementar el contador de figura para el jugador seleccionado
    playerFiguraCount[figura] = (playerFiguraCount[figura] || 0) + 1;

    // Almacenar playerFiguraCount en localStorage
    localStorage.setItem('playerFiguraCount', JSON.stringify(playerFiguraCount));

    return figura;
}


function getFiguraDelPartido2() {
    let figura2 = "";
    let maxPoints2 = -1;

    // Iterar sobre los jugadores y encontrar al que tiene más puntos
    for (const playerName in playerPoints) {
        const points2 = playerPoints[playerName];

        if (points2 > maxPoints2) {
            maxPoints2 = points2;
            figura2 = playerName;
        }
    }

    return figura2;
}


function enviarAnuncioFiguraDelPartido(figuraDelPartido) {
    room.sendAnnouncement(`🌟 FIGURA DEL PARTIDO: ${figuraDelPartido}`, null, 0xFFD700, 'bold', 1);
}



var opciones = [
    {
        partido: function () {
            redAngle = 180;
            redTextColor = 0xf5b606;
            redColor = [0x011ede, 0xc80056];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "BARCELONA";

            blueAngle = 73;
            blueTextColor = 0x0f2145;
            blueColor = [0xffc10a, 0xffffff, 0xffffff];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "REAL MADRID";
        },
        demanda: 600 // Demanda muy alta
    },
    {
        partido: function () {
            redAngle = 30;
            redTextColor = 0x231f20;
            redColor = [0xffffff, 0xee1b2c, 0xffffff];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "RIVER PLATE";

            blueAngle = 90;
            blueTextColor = 0xFFFFFF;
            blueColor = [0x033f86, 0xfab900, 0x033f86];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "BOCA JRS.";
        },
        demanda: 600 // Alta demanda
    },
    {
        partido: function () {
            redAngle = 90;
            redTextColor = 0xffffff;
            redColor = [0xD90119, 0xC7011A, 0xAB0918];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "MANCHESTER UNITED";

            blueAngle = 90;
            blueTextColor = 0xffffff;
            blueColor = [0x95c1e6];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "MANCHESTER CITY";
        },
        demanda: 600 // Alta demanda
    },
    {
        partido: function () {
            redAngle = 90;
            redTextColor = 0xFFFFFF;
            redColor = [0xdc052d, 0xed0038, 0xed0038];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "BAYERN  DE MUNICH";

            blueAngle = 90;
            blueTextColor = 0x1d1d1b;
            blueColor = [0x1d1d1b, 0xfad515, 0xfad515];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "BORUSSIA DORTMUND";
        },
        demanda: 500 // Alta demanda
    },

    {
        partido: function () {
            redAngle = 180;
            redTextColor = 0xffffff;
            redColor = [0xdf061b, 0x000000, 0xdf061b];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "AC MILAN";

            blueAngle = 180;
            blueTextColor = 0xFFFFFF;
            blueColor = [0x00239c, 0x000000, 0x00239c];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "INTER MILAN";
        },
        demanda: 500 // Alta demanda, partidos históricos en la Serie A
    },

    {
        partido: function () {
            redAngle = 180;
            redTextColor = 0xffffff;
            redColor = [0x1a2747, 0xde0319, 0x1a2747];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "PSG";

            blueAngle = 61;
            blueTextColor = 0xc99740;
            blueColor = [0x00a4dc, 0xffffff, 0xffffff];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "OLYMPIQUE MARSELLA";
        },
        demanda: 150 // Gran rivalidad en la Ligue 1 de Francia
    },

    {
        partido: function () {
            redAngle = 180;
            redTextColor = 0xffffff;
            redColor = [0xdf061b, 0x000000, 0xdf061b];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "AC MILAN";

            blueAngle = 180;
            blueTextColor = 0xf7c902;
            blueColor = [0x1f1a20, 0xffffff, 0x1f1a20];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "JUVENTUS";
        },
        demanda: 150 // Un enfrentamiento de alto nivel entre equipos históricos
    },

    {
        partido: function () {
            redAngle = 180;
            redTextColor = 0x00a032;
            redColor = [0xffcd00];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "BRASIL";

            blueAngle = 180;
            blueTextColor = 0x1e2930;
            blueColor = [0x98cef0, 0xffffff, 0x98cef0];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "ARGENTINA";
        },
        demanda: 450 // Enfrentamiento entre dos de los equipos más grandes de América
    },


   {
        partido: function () {
            redAngle = 180;
            redTextColor = 0xf3010f;
            redColor = [0xf8f8f8];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "INGLATERRA";

            blueAngle = 90;
            blueTextColor = 0xFFFFFF;
            blueColor = [0x000000, 0xDD0000, 0xFFCE00];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "ALEMANIA";
        },
        demanda: 200 // Un clásico del fútbol europeo con dos de las selecciones más fuertes.
    },

    {
        partido: function () {
            redAngle = 180;
            redTextColor = 0x00a032;
            redColor = [0xffcd00];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "BRASIL";

            blueAngle = 90;
            blueTextColor = 0xFFFFFF;
            blueColor = [0x000000, 0xDD0000, 0xFFCE00];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "ALEMANIA";
        },
        demanda: 150 // Ambos equipos tienen una enorme base de seguidores y tradición mundial.
    },

    {
        partido: function () {
    	redAngle = 90;  // Ángulo para el equipo rojo
    	redTextColor = 0xFFFFFF;  // Color del texto del equipo rojo
    	redColor = [0x000000, 0xDD0000, 0xFFCE00];  // Colores de Alemania (negro, rojo, amarillo)
    	room.setTeamColors(1, redAngle, redTextColor, redColor);
    	teamRed = "ALEMANIA";

    	blueAngle = 0;  // Ángulo para el equipo azul
    	blueTextColor = 0x0064aa;  // Color del texto del equipo azul
    	blueColor = [0x009e3f, 0xFFFFFF, 0xe40321];  // Colores de Italia (verde, blanco, rojo)
    	room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    	teamBlue = "ITALIA";
        },
        demanda: 300 // Italia y Alemania son selecciones históricas, aunque quizás con un poco menos de rivalidad directa.
    },

    {
        partido: function () {
            redAngle = 70;
            redTextColor = 0xffc000;
            redColor = [0xbb0c10];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "ESPAÑA";

            blueAngle = 90;
            blueTextColor = 0xeabc78;
            blueColor = [0x1b2a4a];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "FRANCIA";
        },
        demanda: 200 // Un gran partido europeo con mucha rivalidad reciente en competiciones como la Eurocopa y la Copa del Mundo.
    },

    {
        partido: function () {
            redAngle = 90;
            redTextColor = 0xffffff;
            redColor = [0xdd0125, 0x211f25, 0xdd0125];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "FLAMENGO";

            blueAngle = 69;
            blueTextColor = 0x801f32;
            blueColor = [0xffffff, 0xffffff, 0x621b21];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "FLUMINENSE";
        },
        demanda: 150 // Clásico carioca, una de las rivalidades más grandes de Brasil.
    },

    {
        partido: function () {
            redAngle = 90;
            redTextColor = 0xfad948;
            redColor = [0xbc0021];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "LIVERPOOL";

            blueAngle = 69;
            blueTextColor = 0x1b1a20;
            blueColor = [0xc70317, 0xffffff, 0xffffff];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "MANCHESTER UNITED";
        },
        demanda: 150 // Enfrentamiento clásico de la Premier League con grandes seguidores en todo el mundo.
    },

    {
        partido: function () {
            redAngle = 60;
            redTextColor = 0xffffff;
            redColor = [0xec1c24];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "INDEPENDIENTE";

            blueAngle = 90;
            blueTextColor = 0xFFFFFF;
            blueColor = [0x033f86, 0xfab900, 0x033f86];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "BOCA JRS.";
        },
        demanda: 120 // Clásico argentino, una de las rivalidades más intensas en el fútbol mundial.
    },

    {
        partido: function () {
            redAngle = 180;
            redTextColor = 0x292a6d;
            redColor = [0xe3221d, 0xffffff, 0xe3221d];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "ATLÉTICO MADRID";

            blueAngle = 73;
            blueTextColor = 0x0f2145;
            blueColor = [0xffc10a, 0xffffff, 0xffffff];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "REAL MADRID";
        },
        demanda: 150 // Enfrentamiento de alto nivel en La Liga, con una gran rivalidad entre los dos grandes de Madrid.
    },

    {
        partido: function () {
            redAngle = 90;
            redTextColor = 0xE3BA5B;
            redColor = [0xffffff, 0xe40615, 0xcd043a];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "ARSENAL FC";

            blueAngle = 66;
            blueTextColor = 0xfbb700;
            blueColor = [0x001489];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "CHELSEA";
        },
        demanda: 150 // Clásico londinense, entre dos grandes rivales de la Premier League.
    },

    {
        partido: function () {
            redAngle = 0;
            redTextColor = 0xffb200;
            redColor = [0x8f001c];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "AS ROMA";

            blueAngle = 180;
            blueTextColor = 0xffffff;
            blueColor = [0x81c6ee, 0x8ccaee , 0x81c6ee];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "LAZIO";
        },
        demanda: 120 // Clásico italiano, aunque menos mediático que los de otras ligas.
    },

    {
        partido: function () {
            redAngle = 30;
            redTextColor = 0x231f20;
            redColor = [0xffffff, 0xee1b2c, 0xffffff];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "RIVER PLATE";

            blueAngle = 180;
            blueTextColor = 0x002942;
            blueColor = [0x00a5e3, 0xFFFFFF, 0x00a5e3];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "RACING";
        },
        demanda: 150 // Uno de los clásicos más importantes de Argentina, muy seguido en todo el país.
    },

    {
        partido: function () {
            redAngle = 60;
            redTextColor = 0xffffff;
            redColor = [0xec1c24];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "INDEPENDIENTE";

            blueAngle = 180;
            blueTextColor = 0x002942;
            blueColor = [0x00a5e3, 0xFFFFFF, 0x00a5e3];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "RACING";
        },
        demanda: 600 // Rivalidad argentina entre dos equipos de Avellaneda, con mucha historia.
    },

    {
        partido: function () {
            redAngle = 180;
            redTextColor = 0xFFFFFF;
            redColor = [0xe9282d, 0x1d3b56, 0xe9282d];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "SAN LORENZO";

            blueAngle = 90;
            blueTextColor = 0xFFFFFF;
            blueColor = [0x033f86, 0xfab900, 0x033f86];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "BOCA JRS.";
        },
        demanda: 450 // Clásico del fútbol argentino con una gran rivalidad, especialmente en Buenos Aires.
    },

    {
        partido: function () {
            redAngle = 0;
            redTextColor = 0xffffff;
            redColor = [0xee1d23, 0x000000];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "NEWELLS";

            blueAngle = 180;
            blueTextColor = 0xFFFFFF;
            blueColor = [0xfcd828, 0x144178, 0xfcd828];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "ROSARIO CENTRAL";
        },
        demanda: 550 // Un clásico rosarino con una gran historia, muy importante en la ciudad de Rosario.
    },

    {
        partido: function () {
            redAngle = 90;
            redTextColor = 0xFFFFFF;
            redColor = [0x6a2331, 0x74192e, 0x74192e];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "LANÚS";

            blueAngle = 180;
            blueTextColor = 0xb59859;
            blueColor = [0x007836, 0xffffff, 0x007836];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "BANFIELD";
        },
        demanda: 50 // Clásico del fútbol argentino, aunque menos mediático que otros clásicos más populares.
    },

    {
        partido: function () {
            redAngle = 180;
            redTextColor = 0xa7a9ab;
            redColor = [0x1e315a, 0xFFFFFF, 0x1e315a];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "TALLERES (C)";

            blueAngle = 70;
            blueTextColor = 0xffffff;
            blueColor = [0x1a120c, 0x009cd0, 0x009cd0];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "BELGRANO";
        },
        demanda: 50 // Clásico cordobés, con mucha rivalidad y apoyo de los hinchas en Córdoba.
    },

    {
        partido: function () {
            redAngle = 90;
            redTextColor = 0x000000;
            redColor = [0xF4F4F6];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "CORINTHIANS";

            blueAngle = 90;
            blueTextColor = 0xFFFFFF;
            blueColor = [0x006337, 0x00713d, 0x00713d];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "PALMEIRAS";
        },
        demanda: 120 // Un clásico del fútbol brasileño con gran seguimiento, especialmente en São Paulo.
    },

    {
        partido: function () {
            redAngle = 180;
            redTextColor = 0xffffff;
            redColor = [0x9e0424, 0x1c6137, 0x9e0424];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "FLUMINENSE";

            blueAngle = 29;
            blueTextColor = 0xd42a2a;
            blueColor = [0x19181B, 0xE6E6E4, 0x19181B];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "VASCO DA GAMA";
        },
        demanda: 50 // Un clásico carioca entre dos de los clubes más tradicionales de Río de Janeiro.
    },

    {
        partido: function () {
            redAngle = 90;
            redTextColor = 0xFFFFFF;
            redColor = [0x006337, 0x00713d, 0x00713d];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "PALMEIRAS";

            blueAngle = 90;
            blueTextColor = 0x3b4043;
            blueColor = [0xf1f5f6];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "SANTOS FC";
        },
        demanda: 120 // Un clásico paulista entre dos gigantes del fútbol brasileño, con una gran rivalidad en São Paulo.
    },

    {
        partido: function () {
            redAngle = 90;
            redTextColor = 0xFFFFFF;
            redColor = [0xff020c];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "SC INTERNACIONAL";

            blueAngle = 180;
            blueTextColor = 0xFFFFFF;
            blueColor = [0x009ee2, 0x05171d, 0x009ee2];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "GREMIO";
        },
        demanda: 120 // Un clásico gaucho muy esperado por los hinchas de Porto Alegre, con una rivalidad histórica.
    },

    {
        partido: function () {
            redAngle = 90;
            redTextColor = 0xced3d9;
            redColor = [0x0b245f, 0x214196, 0x7e6fb8];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "ARGENTINA";

            blueAngle = 90;
            blueTextColor = 0x000000;
            blueColor = [0x75cbfa];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "URUGUAY";
        },
        demanda: 100 // El clásico rioplatense entre dos de las selecciones más grandes de Sudamérica.
    },

    {
        partido: function () {
            redAngle = 90;
            redTextColor = 0xE0B85A;
            redColor = [0xffffff, 0xe40615, 0xe40615];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "ARSENAL FC";

            blueAngle = 72;
            blueTextColor = 0x111836;
            blueColor = [0x0b0e1e, 0xffffff, 0xffffff];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "TOTTENHAM";
        },
        demanda: 70 // Un clásico del fútbol inglés con mucha rivalidad, especialmente en el norte de Londres.
    },

    {
        partido: function () {
            redAngle = 0;
            redTextColor = 0xFFFFFF;
            redColor = [0xfbba00, 0xab092e];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "GALATASARAY";

            blueAngle = 180;
            blueTextColor = 0x020E1F;
            blueColor = [0xfff100, 0x014582, 0xfff100];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "FENERBAHCE";
        },
        demanda: 50 // Un clásico turco entre dos de los equipos más grandes de Estambul, muy popular y lleno de historia.
    },

    {
        partido: function () {
            redAngle = 60;
            redTextColor = 0xFFFFFF;
            redColor = [0xdc0316, 0xdc0316, 0x08265c];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "MEDELLIN";

            blueAngle = 180;
            blueTextColor = 0x000000;
            blueColor = [0x018c4b, 0xffffff, 0x018c4b];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "ATL. NACIONAL (COL)";
        },
        demanda: 55 // Un clásico colombiano entre dos de los clubes más emblemáticos del país, muy disputado.
    },

    {
        partido: function () {
            redAngle = 90;
            redTextColor = 0x000000;
            redColor = [0x039940, 0xffffff, 0x039940];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "CELTIC";

            blueAngle = 180;
            blueTextColor = 0xFFFFFF;
            blueColor = [0x01319f];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "RANGERS";
        },
        demanda: 55 // El Old Firm de Escocia, una de las rivalidades más intensas y antiguas del fútbol europeo.
    },

    {
        partido: function () {
            redAngle = 33;
            redTextColor = 0x000000;
            redColor = [0xF6F6F7];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "COLO COLO";

            blueAngle = 33;
            blueTextColor = 0xf4f4f4;
            blueColor = [0x1C2445];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "U DE CHILE";
        },
        demanda: 35 // Un clásico del fútbol chileno, conocido por la rivalidad entre los dos equipos más grandes del país.
    },

    {
        partido: function () {
            redAngle = 90;
            redTextColor = 0xffffff;
            redColor = [0x00824A, 0x006327, 0x006327];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "FERRO";

            blueAngle = 180;
            blueTextColor = 0x0063a8;
            blueColor = [0xFFFFFF];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "VELEZ";
        },
        demanda: 36 // Un enfrentamiento argentino de gran historia, con dos clubes que representan diferentes estilos de fútbol.
    },

    {
        partido: function () {
            redAngle = 180;
            redTextColor = 0xFFFFFF;
            redColor = [0xe9282d, 0x1d3b56, 0xe9282d];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "SAN LORENZO";

            blueAngle = 180;
            blueTextColor = 0x0063a8;
            blueColor = [0xFFFFFF];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "VELEZ";
        },
        demanda: 35 // Un clásico argentino entre dos equipos de gran tradición, ambos de la ciudad de Buenos Aires.
    },

    {
        partido: function () {
            redAngle = 180;
            redTextColor = 0xFFFFFF;
            redColor = [0xe9282d, 0x1d3b56, 0xe9282d];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "SAN LORENZO";

            blueAngle = 52;
            blueTextColor = 0xff0000;
            blueColor = [0xFFFFFF];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "HURACÁN";
        },
        demanda: 156 // El clásico entre estos dos equipos del barrio de Boedo y Parque Patricios, siempre lleno de pasión.
    },

    {
        partido: function () {
            redAngle = 180;
            redTextColor = 0x323232;
            redColor = [0xe41815, 0xFFFFFF, 0xe41815];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "ESTUDIANTES (LP)";

            blueAngle = 90;
            blueTextColor = 0x00afef;
            blueColor = [0xFFFFFF, 0x12175e, 0xFFFFFF];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "GIMNASIA (LP)";
        },
        demanda: 544 // El clásico platense, un enfrentamiento muy esperado en la ciudad de La Plata entre dos de sus clubes más representativos.
    },

    {
        partido: function () {
            redAngle = 0;
            redTextColor = 0x812124;
            redColor = [0xE1DCC5];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "UNIVERSITARIO";

            blueAngle = 180;
            blueTextColor = 0xd9030f;
            blueColor = [0x062247, 0xFFFFFF, 0x062247];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "ALIANZA LIMA";
        },
        demanda: 35 // Un enfrentamiento clásico del fútbol peruano, muy esperado en el país, entre dos de los clubes más grandes de Lima.
    },

    {
        partido: function () {
            redAngle = 90;
            redTextColor = 0xFFFFFF;
            redColor = [0xF7F8FA, 0xd71716, 0xd71716];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "INDEPENDIENTE SANTA FE";

            blueAngle = 55;
            blueTextColor = 0xFFFFFF;
            blueColor = [0x232937, 0x1252b3, 0x1252b3];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "MILLONARIOS";
        },
        demanda: 330 // Un clásico del fútbol colombiano entre dos equipos de gran rivalidad de Bogotá, conocidos por su historia.
    },

    {
        partido: function () {
            redAngle = 180;
            redTextColor = 0xFFFFFF;
            redColor = [0xffca00, 0x000000, 0xffca00];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "PEÑAROL";

            blueAngle = 55;
            blueTextColor = 0xd0142c;
            blueColor = [0x003895, 0xFFFFFF, 0x003895];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "NACIONAL (UY)";
        },
        demanda: 610 // El clásico del fútbol uruguayo entre los dos clubes más grandes de Montevideo, con una rivalidad de larga data.
    },

    {
        partido: function () {
            redAngle = 180;
            redTextColor = 0xFFFFFF;
            redColor = [0xe10602, 0x00158c, 0xe10602];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "CERRO PORTEÑO";

            blueAngle = 90;
            blueTextColor = 0xa28026;
            blueColor = [0xFFFFFF, 0x0d0d0d, 0xFFFFFF];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "OLIMPIA";
        },
        demanda: 125 // Un clásico del fútbol paraguayo entre los dos equipos más grandes de Asunción, cargado de historia y emoción.
    },

    {
        partido: function () {
            redAngle = 180;
            redTextColor = 0xf7c902;
            redColor = [0x1f1a20, 0xffffff, 0x1f1a20];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "JUVENTUS";

            blueAngle = 180;
            blueTextColor = 0xffffff;
            blueColor = [0x01b9eb];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "NAPOLI";
        },
        demanda: 70 // El clásico italiano, un enfrentamiento entre los dos clubes más importantes del sur de Italia, con mucha historia y rivalidad.
    },

    {
        partido: function () {
            redAngle = 180;
            redTextColor = 0xceac02;
            redColor = [0xffffff, 0xda0120, 0xffffff];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "AJAX";

            blueAngle = 180;
            blueTextColor = 0xFFFFFF;
            blueColor = [0x0b826e, 0x02917f, 0x0b826e];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "FEYENOORD";
        },
        demanda: 100 // El clásico de los Países Bajos, con la rivalidad de estos dos grandes clubes de Ámsterdam y Rotterdam.
    },

    {
        partido: function () {
            redAngle = 0;
            redTextColor = 0xFFFFFF;
            redColor = [0xe30613];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "SL BENFICA";

            blueAngle = 180;
            blueTextColor = 0xd0000c;
            blueColor = [0x0747ab, 0xffffff, 0x0747ab];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "FC PORTO";
        },
        demanda: 70 // El clásico del fútbol portugués, un duelo tradicional entre los dos equipos más importantes de Lisboa y Oporto.
    },

    {
        partido: function () {
            redAngle = 180;
            redTextColor = 0xFFFFFF;
            redColor = [0xff6300, 0x060902, 0xff6300];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "SHAKHTAR DONETSK";

            blueAngle = 65;
            blueTextColor = 0x027fd9;
            blueColor = [0x0289da, 0xffffff, 0xffffff];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "DYNAMO KYIV";
        },
        demanda: 70 // Un enfrentamiento de dos grandes equipos ucranianos con una gran rivalidad entre Shakhtar Donetsk y Dynamo Kyiv.
    },

    {
        partido: function () {
            redAngle = 0;
            redTextColor = 0xFFFFFF;
            redColor = [0xe30613];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "SL BENFICA";

            blueAngle = 90;
            blueTextColor = 0x000000;
            blueColor = [0x008359, 0xffffff, 0x008359];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "SPORTING CP";
        },
        demanda: 100 // El derbi lisboeta entre SL Benfica y Sporting CP, con una rivalidad centenaria en la ciudad de Lisboa.
    },

    {
        partido: function () {
            redAngle = 0;
            redTextColor = 0xffb200;
            redColor = [0x8f001c];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "AS ROMA";

            blueAngle = 180;
            blueTextColor = 0xffffff;
            blueColor = [0x01b9eb];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "NAPOLI";
        },
        demanda: 80 // El clásico italiano, una rivalidad entre dos de los clubes más grandes del país: Roma y Nápoles.
    },

    {
        partido: function () {
            redAngle = 180;
            redTextColor = 0xf7c902;
            redColor = [0x1f1a20, 0xffffff, 0x1f1a20];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "JUVENTUS";

            blueAngle = 180;
            blueTextColor = 0xFFFFFF;
            blueColor = [0x00239c, 0x000000, 0x00239c];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "INTER MILAN";
        },
        demanda: 120 // Un enfrentamiento clásico de Italia, entre la Juventus y el Inter de Milán, dos de los equipos más exitosos de la Serie A.
    },

    {
        partido: function () {
            redAngle = 90;
            redTextColor = 0x0A1129;
            redColor = [0xffba00, 0x0033cc, 0xffba00];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "TIGRES UANL";

            blueAngle = 180;
            blueTextColor = 0xe50913;
            blueColor = [0x0e2141, 0xffffff, 0x0e2141];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "MONTERREY";
        },
        demanda: 65 // Un clásico regio de la liga mexicana, lleno de rivalidad y pasión.
    },

    {
        partido: function () {
            redAngle = 90;
            redTextColor = 0xffffff;
            redColor = [0xdd0125, 0x211f25, 0xdd0125];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "FLAMENGO";

            blueAngle = 90;
            blueTextColor = 0xFFFFFF;
            blueColor = [0x006337, 0x00713d, 0x00713d];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "PALMEIRAS";
        },
        demanda: 220 // Un clásico brasileño muy esperado entre estos dos equipos, con mucha historia y rivalidad.
    },

    {
        partido: function () {
            redAngle = 123;
            redTextColor = 0x005da4;
            redColor = [0xeb2a2f, 0xFFFFFF, 0xeb2a2f];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "ARGENTINOS JRS.";

            blueAngle = 90;
            blueTextColor = 0xfd6f21;
            blueColor = [0xFFFFFF, 0x5a3e22, 0xFFFFFF];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "PLATENSE";
        },
        demanda: 65 // Un partido entre equipos del fútbol argentino con rivalidad y mucha historia local.
    },

    {
        partido: function () {
            redAngle = 130;
            redTextColor = 0xf9cd39;
            redColor = [0xa92121, 0xa92121, 0x01553e];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "PORTUGAL";

            blueAngle = 180;
            blueTextColor = 0x1e2930;
            blueColor = [0x98cef0, 0xffffff, 0x98cef0];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "ARGENTINA";
        },
        demanda: 200 // Un partido internacional entre selecciones de gran nivel con historia de enfrentamientos.
    },

    {
        partido: function () {
            redAngle = 66;
            redTextColor = 0xffffff;
            redColor = [0xf36b22];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "HOLANDA";

            blueAngle = 180;
            blueTextColor = 0x1e2930;
            blueColor = [0x98cef0, 0xffffff, 0x98cef0];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "ARGENTINA";
        },
        demanda: 40 // Otro clásico internacional, con equipos de renombre mundial enfrentándose.
    },

    {
        partido: function () {
            redAngle = 0;
            redTextColor = 0x0064aa;
            redColor = [0x009e3f, 0xFFFFFF, 0xe40321];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "ITALIA";

            blueAngle = 90;
            blueTextColor = 0x000000;
            blueColor = [0x75cbfa];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "URUGUAY";
        },
        demanda: 140 // Un clásico de selecciones de nivel mundial, con mucha historia en la Copa del Mundo.
    },

   {
        partido: function () {
            redAngle = 0;
            redTextColor = 0x0064aa;
            redColor = [0x009e3f, 0xFFFFFF, 0xe40321];
            room.setTeamColors(1, redAngle, redTextColor, redColor);
            teamRed = "ITALIA";

            blueAngle = 90;
            blueTextColor = 0xeabc78;
            blueColor = [0x1b2a4a];
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
            teamBlue = "FRANCIA";
        },
        demanda: 200 // Un enfrentamiento clásico entre dos selecciones de renombre mundial, con mucha historia en competiciones internacionales.
    },


    // Agregar más opciones según sea necesario
];

function toggleSwapColors() {
    cambioCami = !cambioCami;
    if (cambioCami) {
        room.sendAnnouncement("🔄👕 Cambio de Camisetas Automático ACTIVADO ✅", null, 0x00ff5e, "bold", 2);
    } else {
        room.sendAnnouncement("🔄👕 Cambio de Camisetas Automático DESACTIVADO ❌", null, 0xff363e, "bold", 2);
    }
}

var lastFiveGames = []; // Array para almacenar los últimos 5 partidos jugados

function shuffleOptions() {
    // Crear una lista ponderada de opciones en función de la demanda
    let weightedOptions = [];
    
    // Agregar los partidos tantas veces como su demanda
    opciones.forEach(option => {
        // Usamos directamente la demanda para determinar cuántas veces agregar la opción
        // La demanda va de 1 a 100, los más cercanos a 100 se agregarán más veces
        for (let i = 0; i < option.demanda; i++) {
            weightedOptions.push(option);
        }
    });

    // Mezclar las opciones ponderadas dos veces aleatoriamente
    let selectedOption = null;

    do {
        // Primera mezcla aleatoria
        weightedOptions.sort(function () {
            return 0.5 - Math.random();
        });

        // Segunda mezcla aleatoria
        weightedOptions.sort(function () {
            return 0.5 - Math.random();
        });

        // Seleccionamos el primer partido de la lista aleatoria
        selectedOption = weightedOptions[0];

    } while (lastFiveGames.includes(selectedOption) && lastFiveGames.length >= 5); // Verificamos que no haya estado en los últimos 5

    // Ejecutar el partido seleccionado
    selectedOption.partido();

    // Añadir el partido seleccionado a los últimos 5 partidos
    lastFiveGames.push(selectedOption);

    // Si hay más de 5 partidos en el array, eliminamos el más antiguo
    if (lastFiveGames.length > 5) {
        lastFiveGames.shift();
    }
}


function swapTeamColors() { 
    if (cambioCami) {
        // Mezclar las opciones antes de elegir
        shuffleOptions();

        // Ejecutar la opción elegida
        let selectedOption = lastFiveGames[lastFiveGames.length - 1]; // Obtener la última opción seleccionada
        selectedOption.partido(); // Llamar a la función del partido seleccionado
    }
}


// Objeto para registrar tiempos jugados durante el partido actual
var playerCurrentMatchTime = {}; // { playerId: { joinTime: timestamp, totalTime: seconds } }

// Evento al iniciar el partido (reiniciar registro y registrar inicio del partido)
var matchStartTime = Date.now();


var gameRestarting = false; // Variable de control para evitar reinicios continuos

room.onGameStart = function(byPlayer) {
    // Restablecemos los cambios de tamaño de cada jugador a 0 al inicio de cada partida
    cantidadDeCambios = {};
    // Evitar reinicio infinito
    if (gameRestarting) return;

    game = new Game();  // Crear una nueva instancia de Game

    matchStartTime = Date.now();
    playerCurrentMatchTime = {}; // Reiniciar tiempos para este partido
    room.getPlayerList().forEach(player => {
        if (player.team !== 0) {
            playerCurrentMatchTime[player.id] = { joinTime: Date.now(), totalTime: 0 };
        }
    });

    swapTeamColors();

    // Reiniciar las variables al inicio de cada juego
    ArqueroRED = null;
    ArqueroBLUE = null;
    goalAnnouncementsSum = [];
    room.sendAnnouncement("🎮 La partida está siendo grabada. 🎥");
    room.startRecording();
    posesionEquipoA = 0;
    posesionEquipoB = 0;
    let players = room.getPlayerList();
    let redTeam = players.filter(p => p.team === 1);
    let blueTeam = players.filter(p => p.team === 2);

    let redPlayers = redTeam.map(p => `${p.name}`);
    let bluePlayers = blueTeam.map(p => `${p.name}`);

    room.sendAnnouncement(`Formación ` + teamRed + `: ` + ` ${redPlayers.join(' - ')}`, null, 0xd28e9b, 'bold', 1);
    room.sendAnnouncement(`Formación ` + teamBlue + `: ` + ` ${bluePlayers.join(' - ')}`, null, 0x8ed2cc, 'bold', 1);

    tookASize = {};
    [redTeam,blueTeam] = whichTeam();
    ballCarrying = initBallCarrying(redTeam, blueTeam);
    timeOnHalves = [0,0];
    isTimeAddedShownseis = false;
    DetenerAnuncio = false;
    DetenerAviso = false;
    DetenerAviso2 = false;
    ReiniciarStatsEnCero = false;

    var _0xefa5db = _0x3c81f9;

    if (RSRMap == false){
        game = new Game();  // Aseguramos que game se reinicie solo una vez
    }

    if (RSRMap == true){
        currentMap = "⚽ Real Soccer";
        if (byPlayer == null) {
            game = new Game();    
        }
        else {
            if (room.getScores().timeLimit != 0) {
                gameTime = room.getScores().timeLimit / 60;
            }
            else {
                gameTime = 10;
            }

            // Activamos el flag de reinicio
            gameRestarting = true;
            room.stopGame();
            room.setTimeLimit(0);            
            room.startGame();

            // Después de un pequeño delay, desactivamos el flag de reinicio y enviamos el anuncio
            setTimeout(() => {
                gameRestarting = false;
                announce("Duración del juego establecida en " + gameTime + " minutos"); // Enviar el anuncio
            }, 500); // Esperamos 500ms antes de permitir el siguiente reinicio
        }
    }
}


room.onGameStop = function(byPlayer) {
    // Actualizar tiempos finales al detener el partido
    const currentTime = Date.now();
    for (let playerId in playerCurrentMatchTime) {
        const data = playerCurrentMatchTime[playerId];
        if (data.joinTime) {
            playerCurrentMatchTime[playerId].totalTime += Math.floor((currentTime - data.joinTime) / 1000);
        }
    }
	PartidoArrancado = false;
    whoTouchedLast = undefined;

		if (byPlayer == true) {
			room.setTimeLimit(gameTime);
		}
}

room.onPlayerBallKick = function(player) {
  // Incrementar la posesión de balón del equipo del jugador que realiza el disparo
  if (player.team === 1) {
    equipoAzulPosesion++;
  } else if (player.team === 2) {
    equipoRojoPosesion++;
  }
  
  game.rsTouchTeam = player.team;
  game.updateLastKicker(player.id, player.name, player.team);
  
  if (game.rsReady == true) {
    var players = room.getPlayerList().filter((player) => player.team != 0);
    players.forEach(function(player) {			
      if (room.getPlayerDiscProperties(player.id).invMass.toFixed(1) != 0.3 && RSRMap == true) {
        room.setPlayerDiscProperties(player.id, {invMass: 0.3});
      }
    });
  }

  //=========== GRAVEDAD (INDEPENDIENTE) ===========
  if (combaMode) { 
      room.setDiscProperties(0, {
          xgravity: -room.getPlayerDiscProperties(player.id).yspeed / 30,
          ygravity: -room.getPlayerDiscProperties(player.id).yspeed / 30
      });


          setTimeout(() => {
              room.setDiscProperties(0, { xgravity: 0, ygravity: 0 });
          }, 500);
  }

  //=========== POWERSHOT CODE ===========
  if (powerShotMode == true) { // Se ejecuta el PowerShot sin importar el valor de RSRMap
    if (game.powershotCounter > 52) {
        // Aplicar gravedad solo si JabulaniMode está activado
        if (JabulaniMode) {
            room.setDiscProperties(0, {
                xgravity: -room.getPlayerDiscProperties(player.id).yspeed / 30,
                ygravity: -room.getPlayerDiscProperties(player.id).yspeed / 30
            });

                setTimeout(() => {
                    room.setDiscProperties(0, { xgravity: 0, ygravity: 0 });
                }, 500);

        }

        game.rsSwingTimer = 50;
        room.sendAnnouncement("DISPARO POTENTE REALIZADO!", player.pm, 0x33dddd, "bold", 1);
    }

    game.powershotCounter = 0;
    game.powershotID = 0;
    game.powershotTrigger = false;

    if (RSRMap == true) {
        if (parseFloat(room.getDiscProperties(0).invMass.toFixed(2)) != 1.05) {
            room.setDiscProperties(0, { invMass: 1.05, color: `0x${PelotaRS}` });
        }
    } else { // Cuando RSRMap == false
        if (parseFloat(room.getDiscProperties(0).invMass.toFixed(2)) != 1.5) {
            room.setDiscProperties(0, { invMass: 1.5, color: `0x${PelotaFutsal}` });
        }
    }
  }
  //=========== POWERSHOT CODE ===========

  if (game.rsReady == true && RSRMap == false) {
    var players = room.getPlayerList().filter((player) => player.team != 0);
    players.forEach(function(player) {			
      if (room.getPlayerDiscProperties(player.id).acceleration.toFixed(1) != 0.11) {
        room.setPlayerDiscProperties(player.id, {"bCoef" : 0,"acceleration" : 0.11,"kickingAcceleration" : 0.083,"kickStrength" : 5});
      }
    });
  }
  
  if (game.rsReady == true && RSRMap == true) {
    var players = room.getPlayerList().filter((player) => player.team != 0);
    players.forEach(function(player) {			
      if (room.getPlayerDiscProperties(player.id).invMass.toFixed(1) != 0.3) {
        room.setPlayerDiscProperties(player.id, {invMass: 0.3});
      }
    });
  }
  
  if (game.rsActive == false && game.rsReady == true && (game.rsCorner == true || game.rsGoalKick == true)) { // make game active on kick from CK/GK
    game.boosterState = true;
    game.rsActive = true;
    game.rsReady = false;
    room.setDiscProperties(1, {x: 2000, y: 2000 });
    room.setDiscProperties(2, {x: 2000, y: 2000 });
    room.setDiscProperties(0, {color: `0x${PelotaRS}`});
    game.rsTimer = 1000000;
    game.warningCount++;	
    
    // set gravity for real soccer corners/goalkicks
    if (game.rsCorner == true) {
      if (room.getDiscProperties(0).y < 0) { //top corner
        room.setDiscProperties(0, {xgravity: room.getPlayerDiscProperties(player.id).xspeed/35*-1, ygravity: 0.05});
      }
      else { //bottom corner
        room.setDiscProperties(0, {xgravity: room.getPlayerDiscProperties(player.id).xspeed/35*-1, ygravity: -0.05});
      }
    }	
    if (game.rsGoalKick == true) {			
      room.setDiscProperties(0, {xgravity: 0, ygravity: room.getPlayerDiscProperties(player.id).yspeed/40*-1});		
    }
    
    game.rsCorner = false;
    game.rsGoalKick = false;
    game.rsCorner2 = false;
    game.rsGoalKick2 = false;
    game.outStatus = "";		
  }
  
  if (game.outStatus == "redThrow" || game.outStatus == "blueThrow") {
    game.throwinKicked = true;
  }

  // Código adicional para cuando el mapa no es "RSR"
  if (map !== "RSR") {
    // Agrega aquí tu lógica personalizada para cuando el mapa no es "RSR"
  }
}



var webhookPass = 'https://discord.com/api/webhooks/816063918781890580/hBOBmjKaR4sJHWNnK-MZIo68r7Np3bxtHf5N43VI-rVkyEYDW6axIXAHKkEDWe4190L3';

var ModoChatPausado = [];


const CensurarMensajes = ['rs', 'con', 'real', 'soccer', 'creo', ' con', '  con', '   con', '    con', ' rs', '  rs', '   rs', '    rs', 'R.S', 'R.S C.O.N T.I.A', 'r.s c.o.n t.i.a', 'c.on', 'co.n', 'c.o.n', 'C.ON', 'CO.N', 'C.O.N', 'r.s c.o.n t.i.a', 'R_S', 'R_S C_O_N T_I_A', 'r_s c_o_n t_i_a', 'c_on', 'co_n', 'c_o_n', 'C_ON', 'CO_N', 'C_O_N', 'r_s c_o_n t_i_a', 'R-S C-O-N T-I-A', 'r-s c-o-n t-i-a', 'c-on', 'co-n', 'c-o-n', 'C-ON', 'CO-N', 'C-O-N', 'C.REO', 'CR.EO', 'CRE.O', 'c.reo', 'cr.eo', 'cre.o', 'C-REO', 'CR-EO', 'CRE-O', 'c-reo', 'cr-eo', 'cre-o', 'c_reo', 'cr_eo', 'cre_o', 'C_REO', 'CR_EO', 'CRE_O', 'r.s', 'on', 'C.on', 'mogólico', 'mógolico', 'mogolíco', 'mogolicó', 'mógólícó', 'MOGÓLICO', 'MÓGOLICO', 'MOGOLÍCO', 'MOGOLICÓ', 'MÓGÓLÍCÓ', 'm.ogolico', 'mo.golico', 'mog.olico', 'mogo.lico', 'mogol.ico', 'mogoli.co', 'mogolic.o', 'M.OGOLICO', 'MO.GOLICO', 'MOG.OLICO', 'MOGO.LICO', 'MOGOL.ICO', 'MOOGOLI.CO', 'MOGOLIC.O', 'm-ogolico', 'mo-golico', 'mog-olico', 'mogo-lico', 'mogol-ico', 'mogoli-co', 'mogolic-o', 'M-OGOLICO', 'MO-GOLICO', 'MOG-OLICO', 'MOGO-LICO', 'MOGOL-ICO', 'MOOGOLI-CO', 'MOGOLIC-O', 'm_ogolico', 'mo_golico', 'mog_olico', 'mogo_lico', 'mogol_ico', 'mogoli_co', 'mogolic_o', 'M_OGOLICO', 'MO_GOLICO', 'MOG_OLICO', 'MOGO_LICO', 'MOGOL_ICO', 'MOOGOLI_CO', 'MOGOLIC_O', 'dawn', 'daun', 'doun', 'DÓWN', 'dówn', 'dáun', 'daún', 'dáún', 'DAWN', 'cancerígeno', 'CANCERÍGENO'];


function filter(message)
{
    message = message.toLowerCase();
    message = message.replace(/\s/g, '');
    message = message.replace(/\./g,' ')
    if(message.includes("ఌ") ||message.includes("甈") ||message.includes("㐷") ||message.includes("怅") ||message.includes("瘪") ||message.includes("⑸") ||message.includes("㬆") ||message.includes("権") ||message.includes("怜") ||message.includes("∯") ||message.includes("㤒") ||message.includes("䉊") ||message.includes("匊") ||message.includes("ᙻ") ||message.includes("ൽ") ||message.includes("ᴧ") ||message.includes("爂") ||message.includes("爇") ||message.includes("त") ||message.includes("権") ||message.includes("怜") ||message.includes("∯") ||message.includes("㤒") ||message.includes("﷽") ||message.includes("m0g0l1c") ||message.includes("﷽") ||message.includes("﷽") ||message.includes("﷽") ||message.includes("﷽") ||message.includes("﷽") ||message.includes("﷽") ||message.includes("﷽") ||message.includes("﷽") ||message.includes("﷽") ||message.includes("﷽") ||message.includes("䐃") ||message.includes("䉧") ||message.includes("瀩") ||message.includes("琐") ||message.includes("䳌") ||message.includes("氊") ||message.includes("瘠") ||message.includes("銡") ||message.includes("歘") ||message.includes("桋") ||message.includes("鼜") ||message.includes("窭") ||message.includes("谡") ||message.includes("輽") ||message.includes("怼") ||message.includes("霽") ||message.includes("椣") ||message.includes("䖎") ||message.includes("蘗") ||message.includes("徠"))
    {
        return true;
    }else return false;
}

function CensuradorDeSpammeros(message) {
    if (CensurarMensajes.includes(message)) {
        return true;
    }else return false;
}

function pmFun(player, message){ //!pv
    var pm = message.substr(4);
    var index = message.split(" ").slice(1);
    var playerID = index[0]
    var message2 = message.substr(5);
    var message3 = "[ ID: " + player.id + " - 💬🔒] " + player.name + ":" + message2;
    console.log(playerID);
    console.log(index);
    console.log(message);
    console.log(message2);
    console.log(message3);
    room.sendAnnouncement(message3, parseInt(playerID), 0xc7a2ff, "bold", 2);
    var players = room.getPlayerList().filter((player) => player.id != 0 );
    if ( players.find((player => player.id === playerID))) {room.sendAnnouncement("❌ Ese ID no funciona, escribe !ids para ver los ID de los jugadores del host.", player.id, 0xff3c3c, "normal", 0);}
    else {room.sendAnnouncement("[📨] Mensaje Privado enviado con éxito! ✅", player.id, 0x3fff6c, "normal", 0);};
    return false;
}


setInterval(function(player, message){
var isRoomMuted = false;
        isRoomMuted = false;
        mutedPlayers = [];
    room.sendAnnouncement('✅ 💬 Desmutee a todos los jugadores', null, 0xd733ff, "normal", 0); },1800000);

function ListaDeJugadoresFun(player) { // !help
	    Jugadores = room.getPlayerList();
	    playersString = "";
   let conn = connections.find(a => a[1] === player.conn);
	    for(i=0; i<Jugadores.length; i++){
		playersString = playersString + "      📛 NICKNAME: " +  Jugadores[i].name + "          🆔 ID:  " + Jugadores[i].id + "\n";
	    }
	    room.sendAnnouncement("ID DE LOS JUGADORES DEL HOST:",player.id,0xFFFF00,"normal",1);
	    room.sendAnnouncement(playersString,player.id,0xFFFF00,"normal",1);
	}


function helpFun(player) {


  var message = '📣 COMANDOS DISPONIBLES 📣:\n\n';
    message = '⯌ 💬 CHAT PRIVADO:\n';
    message += ' CON EQUIPO: "t + Mensaje"    -   CON JUGADOR: "@@Nickname + Mensaje"\n\n';
    room.sendAnnouncement(message, player.id, 0xffffff, "small-bold", 1);

  setTimeout(function() {
  message = '⯌ 👋 SALIR DEL HOST: !nv    !acomer    !adormir   !bb\n';
    message += '   Salir de la sala y volver al lobby.\n\n';
  room.sendAnnouncement(message, player.id, 0xffffff, "small-bold", 1);
  }, 3000);
 
  setTimeout(function() {
    message = '⯌ ❌ VOTAR BAN:      "!expulsar + IDdelJugador"  |    VOTAR JUGADOR PARA QUE SEA ADMIN: "!admin + IDdelJugador" \n';
    message += '   Inicia una votación para expulsar o hacer administrador a un jugador, para ver los IDs de los jugadores escribe !ids.\n\n';
    room.sendAnnouncement(message, player.id, 0xffffff, "small-bold", 1);
  }, 6000);

  setTimeout(function() {
    message = '👑 ADMINISTRACIÓN DEL HOST: !adminhelp      !mapas      !camisetas      !llamaradmins      !votarmapa" \n';
    message += '   Utiliza !adminhelp para ver los comandos para Admins. ¿Quieres llamar a un admin? utiliza !llamaradmins\n\n';
    room.sendAnnouncement(message, player.id, 0xffffff, "small-bold", 1);
  }, 9000);  


  setTimeout(function() {
    message = '⯌ 📊 TABLAS Y ESTADÍSTICAS: !me      !stats      !goleadores    !asistidores    !promedios      !mvp      !ganadores      !victorias      !presencias      !viciosos      !racha-actual      !racha-historica      !goles-recibidos      !vallas-invictas      !promedios-recibidos\n';
    message += '   !me (para ver tus estadísticas) | !stats ID (ver las estadísticas de otro jugador) | Ejemplo: !stats 15 \n\n';
    room.sendAnnouncement(message, player.id, 0xffffff, "small-bold", 1);
  }, 12000);

  setTimeout(function() {
    message = '⯌ ACTIVAR Y DESACTIVAR AFK: !afk\n';
    message += '   Cambiar tu estado a AFK (inactivo) o volver a estar activo.\n\n';
    room.sendAnnouncement(message, player.id, 0xffffff, "small-bold", 1);
  }, 15000);

  
  setTimeout(function() {
    message = '⯌ OTROS:      !poss      !avatar       !numeros      !script      !tutorial      !ids      !niveles\n';
    room.sendAnnouncement(message, player.id, 0xffffff, "small-bold", 1);
  }, 21000);
  

  setTimeout(function() {
    message = '⯌ ⌚ VER DURACIÓN DEL PARTIDO: !time\n';
    message += '   Ver la duración establecida del partido y los minutos o segundos de tiempo extra.\n\n';
    room.sendAnnouncement(message, player.id, 0xffffff, "small-bold", 1);
  }, 24000);
  

  setTimeout(function() {
    message = '⯌ 🏆 TORNEO: !resultados\n';
    message += '   Ver los resultados del torneo actual.\n\n';
    room.sendAnnouncement(message, player.id, 0xffffff, "small-bold", 1);
  }, 27000);

  setTimeout(function() {
    message = '⯌ AVATAR: !avatar\n';
    message += '   Ejemplo de uso: !avatar HO,LA | Ejemplo 2: !avatar 😈,👿\n\n';
    room.sendAnnouncement(message, player.id, 0xffffff, "small-bold", 1);
  }, 30000);


}

function ResultadosFun(player) { // !help
    room.sendAnnouncement('🏆 Tabla de posiciones: 🔗' + ChallongeLink + '/standings', player.id, 0xbfff35, "small-bold", 0);
}

function FixtureFun(player) { // !help
    room.sendAnnouncement('🏆 Fixture: 🔗' + ChallongeLink, player.id, 0xbfff35, "small-bold", 0);
}

function ReglamentoFun(player) { // !help
    room.sendAnnouncement('📜 𝐑𝐄𝐆𝐋𝐀𝐌𝐄𝐍𝐓𝐎 𝐃𝐄𝐋 𝐓𝐎𝐑𝐍𝐄𝐎', player.id, 0xbfff35, "small-bold", 0);

    room.sendAnnouncement(regla1, player.id, 0xea9999, "small-bold", 0);

    room.sendAnnouncement(regla2, player.id, 0xffe800, "small-bold", 0);

    room.sendAnnouncement(regla3, player.id, 0xff2e2e, "small-bold", 0);

    room.sendAnnouncement(regla4, player.id, 0x2efeb6, "small-bold", 0);

    room.sendAnnouncement(regla5, player.id, 0x94e5ff, "small-bold", 0);
}

function TenisFun(player){
    room.sendAnnouncement('PUEDES ELEGIR:', player.id, 0xE5FF00, "normal", 0);
    room.sendAnnouncement('!tenis-ladrillo', player.id, 0xFFAA00, "normal", 0);
    room.sendAnnouncement('!tenis-cemento', player.id, 0x0088FF, "normal", 0);
    room.sendAnnouncement('!tenis-pasto', player.id, 0x6FFF00, "normal", 0);

}



function resetFun(player){
    if (player.admin == true){
        room.stopGame();
        room.startGame();
    }
}

function leaveFun(player, message) {
if (message == "!nv")
room.kickPlayer(player.id, "Adiós vaquero! 👋", false);
else if (message == "!adormir")
room.kickPlayer(player.id, "💤 Buenas noches!! <3", false);
else if (message == "!bb")
room.kickPlayer(player.id, "👋 Andá máquina nomás, nadie te detiene", false);
else if (message == "!acomer")
room.kickPlayer(player.id, "😋 Bon appetit ! 🍽", false);
}










function swapFun(player){
			if (player.admin == true) {
					var players = room.getPlayerList().filter((player) => player.id != 0 );
					if ( players.length == 0 ) return false;
					players.forEach(function(player) {	
						if (player.team == 1) {
							room.setPlayerTeam(player.id, 2);
						}
						if (player.team == 2) {
							room.setPlayerTeam(player.id, 1);
						}
					});
					announce("🔄 Los equipos han cambiado");
				
			}
			else {
				whisper("Comando solo de administrador", player.id);
			}
		}





function MapasFun(player) { // !mapas
    room.sendAnnouncement('REAL SOCCER ⚽: !rs - !rsoveja - !entrenamiento - !pensred - !pensblue', player.id, 0xd32668, "normal", 0);
    room.sendAnnouncement('CAMPEONES 🏆: !campeones - !premios', player.id, 0xd32668, "normal", 0);

}




function sendAdminMessage(player, message, delay) {
  setTimeout(function() {
    room.sendAnnouncement(message, player.id, 0xffe400, "small", 0);
  }, delay);
}

function adminHelpFun(player) {
  room.sendAnnouncement('🌟 ¡Bienvenido, administrador! Aquí tienes los comandos que puedes usar:', player.id, 0xffbb00, "normal", 0);
  sendAdminMessage(player, 'J U G A D O R E S -- A F K ⚡', 2000);
  sendAdminMessage(player, 'Ver jugadores AFK: `!afks`', 4000);
  sendAdminMessage(player, 'Kickear jugadores AFK: `!kickafks`', 6000);

  sendAdminMessage(player, 'B A N E O -- Y -- D E S B A N E O 🚫', 8000);
  sendAdminMessage(player, 'Banear IP: `!banip + IpDeJugador`', 10000);
  sendAdminMessage(player, 'Desbanear IP: `!unbanip + IpDeJugador`', 12000);
  sendAdminMessage(player, 'Desbanear todas las IPs baneadas: `!unbanallips`', 14000);
  sendAdminMessage(player, 'Desbanear a todos los jugadores baneados: `!clearbans`', 16000);

  sendAdminMessage(player, 'S I L E N C I A R -- Y  -- D E S M U T E A R 🔇', 18000);
  sendAdminMessage(player, 'Mutear jugador: `!mute + ID`', 20000);
  sendAdminMessage(player, 'Desmutear jugador: `!unmute + ID`', 22000);
  sendAdminMessage(player, 'Desmutear a todos los jugadores muteados: `!unmuteall`', 24000);
  sendAdminMessage(player, 'Silenciar palabras: `!silenciar + palabra`', 26000);
  sendAdminMessage(player, 'Desilenciar palabras: `!desilenciar + palabra`', 28000);

  sendAdminMessage(player, ' M O D O S -- D E -- J U E G O 🎮', 30000);
  sendAdminMessage(player, 'Activar/Desactivar modo "Juegan Todos": `!juegantodos`', 32000);
  sendAdminMessage(player, 'Activar modo "Juegan Algunos": `!juegan <cantidad de jugadores máxima por equipo>`', 34000);
  sendAdminMessage(player, 'Desactivar modo "Juegan Algunos": `!juegan-off`', 36000);
  sendAdminMessage(player, 'Activar/Desactivar sistema "Gana Sigue": `!ganasigue`', 38000);
  sendAdminMessage(player, 'Activar/Desactivar el equilibrio equipos automático: `!auto_balance`', 40000);
  sendAdminMessage(player, 'Activar/Desactivar Power Shot: `!powershot`', 42000);
  sendAdminMessage(player, 'Activar/Desactivar Modo Automatizado: `!automatizado`', 44000);
  sendAdminMessage(player, 'Activar/Desactivar Modo FairPlay: `!fairplay`', 46000);
  sendAdminMessage(player, 'Activar/Desactivar Gol de Oro: `!goldeoro`', 48000);

  sendAdminMessage(player, ' H O S T -- C O N -- C O N T R A S E Ñ A 🔒', 50000);
  sendAdminMessage(player, 'Colocar contraseña: `!set_password + Contraseña`', 52000);
  sendAdminMessage(player, 'Quitar contraseña: `!clear_password`', 54000);

  sendAdminMessage(player, ' C O M A N D O S -- D E L -- J U E G O 🎲', 56000);
  sendAdminMessage(player, 'Reiniciar partido: `!rr`', 58000);
  sendAdminMessage(player, '(SÓLO PARA RS) Cambiar la cantidad de minutos de juego: `!minutos + CantidadDeMinutos`', 60000);
  sendAdminMessage(player, 'Mezclar aleatoriamente los equipos: `!random`', 62000);
  sendAdminMessage(player, 'Cambiar de lado a los jugadores: `!swap`', 64000);
  sendAdminMessage(player, '`!camisetas` (Ver camisetas disponibles)', 74000);
  sendAdminMessage(player, 'Activar/Desactivar el cambio automático de las camisetas: `!clubcolors`', 76000);
  sendAdminMessage(player, 'Invertir camisetas de los equipos: `!swapcolors`', 78000);
  sendAdminMessage(player, 'Equilibrar equipos por los niveles de los jugadores: `!equilibrar`', 80000);
  sendAdminMessage(player, 'Publicidad: `!publicidad <intervalo de minutos> <mensaje>`', 82000);
  sendAdminMessage(player, 'COOLDOWN:\n!spam_limit <Cantidad de Mensajes permitidos antes de activar el cooldown> | EJEMPLO: !spam_limit 5\n!cooldown_time <Cantidad de segundos de cooldown después de enviar muchos mensajes> | EJEMPLO: !cooldown_time 10\n!toggle_cooldown Activar/Desactivar Cooldown', 82000);
  sendAdminMessage(player, 'Establecer el tiempo de esperar entre cada llamada a los admins: `!minutosllamada <Cantidad de Minutos>`', 86000);
  sendAdminMessage(player, 'TAMAÑO JUGADORES: !tamañominimo <número> (Ej: !tamañominimo 10 | !tamañomaximo <número> (Ej: !tamañomaximo 25) | !limitesize <número>` (Ej: !limitesize 2)', 88000);
  sendAdminMessage(player, 'O F I C I A L E S:', 90000);
  sendAdminMessage(player, 'Activar/Desactivar las firmas: `!ofi`', 92000);
  sendAdminMessage(player, 'Para que los jugadores firmen: !firmo', 94000);
}




function clearbansFun(player){ // !clear
    if (player.admin == true){ room.clearBans(); room.sendAnnouncement(" [🗑️ 🧹]  Los bans han sido removidos por " + player.name + ".", player.id, 0xEB172D, "normal", 0);}
}

function setpasswordFun(player, message){  //!set_password  !confirm
    if (player.admin == true){
    code = message.substr(14)
    room.setPassword(code);
	room.sendAnnouncement("✳🔒 - " + player.name + " le ha colocado una contraseña al host.", null, 0xff8400, 'normal', 2);
    return false;
    }
}
 
function clearpasswordFun(player, message){  //!clear_password
    if (player.admin == true){
    room.setPassword();
	room.sendAnnouncement("🆓🔓 - " + player.name + " ha retirado la contraseña del host.", null, 0xff8400, 'normal', 2);
    return false;
    }
}



function ReglasFun(player) { // !reglas
    room.sendAnnouncement("📜 REGLAS DE LOS PENALES:", player.id, 0x00FFBB, "normal", 0);
    room.sendAnnouncement("⒈ Sólo puede haber 1️⃣ (un) arquero.", player.id, 0x00FFBB, "normal", 1);
    room.sendAnnouncement("⒉ Los jugadores deben patear en orden. ✨", player.id, 0x00FFBB, "normal", 0);
    room.sendAnnouncement("⒊ El jugador 𝐍𝐎 puede  ″𝙰𝙼𝙰𝙶𝙰𝚁″ en la ejecución del penal.​​", player.id, 0x00FFBB, "normal", 0);
    room.sendAnnouncement("👨‍⚖️ Si incumple con ésta regla pero erra el penal, no hace falta repetir la ejecución.", player.id, 0x00FFBB, "normal", 0);
    room.sendAnnouncement("Caso contrario, si el jugador amaga y convierte el penal, deberá ejecutarlo nuevamente. ⚖​ 🔁", player.id, 0x00FFBB, "normal", 0);
    room.sendAnnouncement("⒋ Si un equipo tiene menos de 4 jugadores, tienen derecho a decidir si uno de ellos patea dos veces o eligen a un espectador.", player.id, 0x00FFBB, "normal", 0);
    room.sendAnnouncement("⒌ No vale invadir el área mientras un jugador está por patear. 🚫", player.id, 0x00FFBB, "normal", 0);
    room.sendAnnouncement("⒍ Si se ejecutaron todos los penales y aún persiste el empate:", player.id, 0x00FFBB, "normal", 0);
    room.sendAnnouncement("Los arqueros deberán enfrentarse entre ellos hasta 5️⃣ v̲e̲c̲e̲s̲ c̲o̲m̲o̲ m̲á̲x̲i̲m̲o̲. ", player.id, 0x00FFBB, "normal", 0);
    room.sendAnnouncement("Y si el empate persiste, t̲o̲d̲o̲s̲ l̲o̲s̲ j̲u̲g̲a̲d̲o̲r̲e̲s̲ d̲e̲b̲e̲r̲á̲n̲ p̲a̲t̲e̲a̲r̲ l̲o̲s̲ p̲e̲n̲a̲l̲e̲s̲ n̲u̲e̲v̲a̲m̲e̲n̲t̲e̲.", player.id, 0x00FFBB, "normal", 0);
}

const inactivityTimeout = MinutosPermitidosAFK * 60 * 1000; // 5 minutos
const playerInactivity = new Map(); // Mapa para rastrear la inactividad de los jugadores


function checkAutoKickAFKs() {
    const afkNonAdmins = room.getPlayerList().filter(p => afkPlayerIDs.has(p.id) && !p.admin);
    if (afkNonAdmins.length >= LimiteMaximoDeJugadoresAFK) {
        afkNonAdmins.forEach(p => {
            room.kickPlayer(p.id, "⚠️ Muchos jugadores AFK", false);
            afkPlayerIDs.delete(p.id);
            playerInactivity.delete(p.id);
        });
        room.sendAnnouncement("🚨 Se expulsaron automáticamente a jugadores AFK porque se superó el límite permitido. 🛑", null, 0xff0000, 'bold', 2);
    }
}

function afkFun(player, message) {
    if (player.admin) {
        if (afkPlayerIDs.has(player.id)) {
            // Jugador regresó de AFK
            clearTimeout(playerInactivity.get(player.id));
            playerInactivity.delete(player.id);
            afkPlayerIDs.delete(player.id);

            if (modoJueganTodos) {
                const blueTeamCount = room.getPlayerList().filter(p => p.team === 1).length;
                const redTeamCount = room.getPlayerList().filter(p => p.team === 2).length;
                room.setPlayerTeam(player.id, blueTeamCount <= redTeamCount ? 1 : 2);
            }

            room.sendAnnouncement("🚀 ¡" + player.name + " volvió y está listo para jugar! 🎮", null, 0x00FFBB, "bold", 0);

        } else {
            // Jugador se va a AFK
            afkPlayerIDs.add(player.id);
            checkAutoKickAFKs();
            room.setPlayerTeam(player.id, 0);

            setTimeout(() => {
                room.sendAnnouncement("🌴   ¡" + player.name + " se encuentra actualmente A F K! 🕒 💤", null, 0xff8400, 'bold', 2);
                if (playerPositions[player.id]) {
                    playerPositions[player.id].lastUpdateTime = Date.now();
                }
            }, 500);
            setTimeout(() => {
                room.sendAnnouncement("📢   Para salir del AFK, escribe !afk otra vez. ↩️", player.id, 0xff8400, 'small-bold', 2);
            }, 1000);

            const admins = room.getPlayerList().filter(admin => admin.admin);
            const adminNames = admins.map(admin => admin.name).join(", ");
            setTimeout(() => {
                const msg = admins.length > 0
                    ? `🛠️ Administrador(es): ${adminNames}, ¡Pueden usar !kickafks para expulsar a los jugadores AFK!`
                    : "📣 El administrador puede echar a los jugadores AFK con el comando !kickafks.";
                room.sendAnnouncement(msg, null, 0x00FFBB, 'bold', 0);
            }, 3000);

 if (automatizadoActivado) {
const jugadores = room.getPlayerList(); // incluye a todos
const jugadoresNoAFK = jugadores.filter(p => !afkPlayerIDs.has(p.id));
const numJugadores = jugadoresNoAFK.length;

    modoJueganAlgunos = true; // true para ACTIVARLO - false para DESACTIVARLO |Modo Juegan Algunos
    var nuevaConfiguracion = null;

    if (numJugadores <= 7) {
        maxPlayersPerTeam = 4;
        nuevaConfiguracion = {
            mapa: getEntrenamientoRealSoccer(), // Entrenamiento si hay pocos jugadores
            scoreLimit: GolesEntrenamientoRealSoccer,
            timeLimit: TiempoEntrenamientoRealSoccer
        };
    } else if (numJugadores >= 8) {
        maxPlayersPerTeam = 4;
        nuevaConfiguracion = {
            mapa: getRealSoccerMap2(), // Mapa real si hay 8 o más
            scoreLimit: GolesRealSoccer,
            timeLimit: TiempoRealSoccer
        };
    }

    if (nuevaConfiguracion !== null) {
        // Verificar si la configuración es diferente
        if (JSON.stringify(nuevaConfiguracion) === JSON.stringify(configuracionActual)) {
            return; // No hacer nada si es igual
        }

        var scores = room.getScores();

        if (scores !== null) {
            var gameTime = scores.time;

            if (gameTime <= tiempoLimiteCambio) {
                configuracionActual = nuevaConfiguracion;
                setTimeout(function () {
                    room.stopGame();
                    room.setCustomStadium(configuracionActual.mapa);
                    room.setScoreLimit(configuracionActual.scoreLimit);
                    room.setTimeLimit(configuracionActual.timeLimit);
                    room.startGame();
                }, tiempoEsperaCambio);
            }
        } else {
            configuracionActual = nuevaConfiguracion;
            room.stopGame();
            room.setCustomStadium(configuracionActual.mapa);
            room.setScoreLimit(configuracionActual.scoreLimit);
            room.setTimeLimit(configuracionActual.timeLimit);
            room.startGame();
        }
    }
}

        }

    } else {
        if (afkPlayerIDs.has(player.id)) {
            // Jugador regresó de AFK
            clearTimeout(playerInactivity.get(player.id));
            playerInactivity.delete(player.id);
            afkPlayerIDs.delete(player.id);

            if (modoJueganTodos) {
                const blueTeamCount = room.getPlayerList().filter(p => p.team === 1).length;
                const redTeamCount = room.getPlayerList().filter(p => p.team === 2).length;
                room.setPlayerTeam(player.id, blueTeamCount <= redTeamCount ? 1 : 2);
            }

            room.sendAnnouncement("🚀 ¡" + player.name + " volvió y está listo para jugar! 🎮", null, 0x00FFBB, "bold", 0);

        } else {
            // Jugador se va a AFK
            afkPlayerIDs.add(player.id);
            checkAutoKickAFKs();

            const inactivityTimer = setTimeout(() => {
                room.kickPlayer(player.id, "⌛️ EXPULSADO por INACTIVIDAD 😴🚫", false);
                playerInactivity.delete(player.id);
            }, inactivityTimeout);
            playerInactivity.set(player.id, inactivityTimer);

            room.setPlayerTeam(player.id, 0);
            setTimeout(() => {
                room.sendAnnouncement("🌴   ¡" + player.name + " se encuentra actualmente A F K! 🕒 💤", null, 0xff8400, 'bold', 2);
                if (playerPositions[player.id]) {
                    playerPositions[player.id].lastUpdateTime = Date.now();
                }
            }, 500);
            setTimeout(() => {
                room.sendAnnouncement("📢   Para salir del AFK, escribe !afk otra vez. ↩️", player.id, 0xff8400, 'small-bold', 2);
            }, 1000);
            setTimeout(() => {
                room.sendAnnouncement("🚨 ¡ATENCIÓN! Si te quedas AFK por " + MinutosPermitidosAFK + " MINUTOS ⌛, serás EXPULSADO del host. 🛑", player.id, 0xff8400, 'small-bold', 2);
            }, 1500);
            setTimeout(() => {
                room.sendAnnouncement("📌   RECUERDA QUE:        ⚠️ Si el administrador lo decide, puede echarte del host usando !kickafks. ⚠️", player.id, 0xff8400, 'small-bold', 2);
            }, 2000);

            const admins = room.getPlayerList().filter(admin => admin.admin);
            const adminNames = admins.map(admin => admin.name).join(", ");
            setTimeout(() => {
                const msg = admins.length > 0
                    ? `🛠️ Administrador(es): ${adminNames}, ¡Pueden usar !kickafks para expulsar a los jugadores AFK!`
                    : "📣 El administrador puede echar a los jugadores AFK con el comando !kickafks.";
                room.sendAnnouncement(msg, null, 0x00FFBB, 'bold', 0);
            }, 3000);

 if (automatizadoActivado) {
const jugadores = room.getPlayerList(); // incluye a todos
const jugadoresNoAFK = jugadores.filter(p => !afkPlayerIDs.has(p.id));
const numJugadores = jugadoresNoAFK.length;

    modoJueganAlgunos = true; // true para ACTIVARLO - false para DESACTIVARLO |Modo Juegan Algunos
    var nuevaConfiguracion = null;

    if (numJugadores <= 7) {
        maxPlayersPerTeam = 4;
        nuevaConfiguracion = {
            mapa: getEntrenamientoRealSoccer(), // Entrenamiento si hay pocos jugadores
            scoreLimit: GolesEntrenamientoRealSoccer,
            timeLimit: TiempoEntrenamientoRealSoccer
        };
    } else if (numJugadores >= 8) {
        maxPlayersPerTeam = 4;
        nuevaConfiguracion = {
            mapa: getRealSoccerMap2(), // Mapa real si hay 8 o más
            scoreLimit: GolesRealSoccer,
            timeLimit: TiempoRealSoccer
        };
    }

    if (nuevaConfiguracion !== null) {
        // Verificar si la configuración es diferente
        if (JSON.stringify(nuevaConfiguracion) === JSON.stringify(configuracionActual)) {
            return; // No hacer nada si es igual
        }

        var scores = room.getScores();

        if (scores !== null) {
            var gameTime = scores.time;

            if (gameTime <= tiempoLimiteCambio) {
                configuracionActual = nuevaConfiguracion;
                setTimeout(function () {
                    room.stopGame();
                    room.setCustomStadium(configuracionActual.mapa);
                    room.setScoreLimit(configuracionActual.scoreLimit);
                    room.setTimeLimit(configuracionActual.timeLimit);
                    room.startGame();
                }, tiempoEsperaCambio);
            }
        } else {
            configuracionActual = nuevaConfiguracion;
            room.stopGame();
            room.setCustomStadium(configuracionActual.mapa);
            room.setScoreLimit(configuracionActual.scoreLimit);
            room.setTimeLimit(configuracionActual.timeLimit);
            room.startGame();
        }
    }
}

        }
    }
}











function afksFun(player, message){ // !huge
    const afkPlayers = room.getPlayerList().filter(player => afkPlayerIDs.has(player.id));
    if (afkPlayers.length === 0) {
        room.sendAnnouncement("❎ No hay jugadores AFK en este host. ¡Todos están listos para jugar!", player.id, 0x00FFBB, "bold", 0);
    } else {
        const afkPlayersString = afkPlayers.map(player => player.name).join(", ");
        room.sendAnnouncement("💤 Jugadores AFK: " + afkPlayersString, player.id, 0x00FFBB, "bold", 0);
    }
}
 
function kickafksFun(player, message) {
    if (player.admin) {
        const adminName = player.name;
        const afkPlayers = room.getPlayerList().filter(x => afkPlayerIDs.has(x.id));
        for (const afkPlayer of afkPlayers) {
            if (!afkPlayer.admin) {
                // Excluir a los administradores de la expulsión
                room.kickPlayer(afkPlayer.id, "⚠️ ¡Expulsado por " + adminName + " por estar AFK!", false);
            }
        }
    }
}


function initBallCarrying(redTeam, blueTeam){
    var ballCarrying = new Map();
    var playing = redTeam.concat(blueTeam);
    for (var i = 0; i < playing.length; i++) {
        ballCarrying.set(playing[i].name, [0, playing[i].team]); // secs, team, %
    }
    return ballCarrying;
}
 
 
function updateTeamPoss(value){
    if (value[1] == 1) redPoss += value[0];
    if (value[1] == 2) bluePoss += value[0];
}
 
var bluePoss;
var redPoss;
var timeOnHalves;
function PosesionBalonFun(player, message){


    // Enviar el anuncio con el porcentaje de posesión de cada equipo

    if (room.getScores() == null) return false;
    bluePoss = 0;
    redPoss = 0;
    ballCarrying.forEach(updateTeamPoss);
    var redPossPercent = Math.round((redPoss / (redPoss + bluePoss + 0.000001)) * 100);
    var bluePossPercent = Math.round((bluePoss / (redPoss + bluePoss + 0.000001)) * 100);
    var totalPosesion = posesionEquipoA + posesionEquipoB;
    var porcentajeEquipoA = totalPosesion === 0 ? 0 : (posesionEquipoA / totalPosesion) * 100;
    var porcentajeEquipoB = totalPosesion === 0 ? 0 : (posesionEquipoB / totalPosesion) * 100;

var mensaje = 'Posesión de balón ⚽ 𒁂 [ 🔴 ' + teamRed + ': ' + porcentajeEquipoA.toFixed(2) + '% ] 🆚 [ 🔵 ' + teamBlue + ': ' + porcentajeEquipoB.toFixed(2) + '% ] 𒁂';
room.sendAnnouncement(mensaje, player.id, 0xc2ff33, "bold", 0);

    var timeOnRedHalf = Math.round((timeOnHalves[0] / (timeOnHalves[0] + timeOnHalves[1] + 0.000001)) * 100);
    var timeOnBlueHalf = Math.round((timeOnHalves[1] / (timeOnHalves[0] + timeOnHalves[1] + 0.000001)) * 100);
var timeAnnouncement = 'Pelota en campo ⚽ 𒁂 [ 🔴 ' + teamRed + ' ' + timeOnRedHalf + '% ] 🆚 [ 🔵 ' + teamBlue + ' ' + timeOnBlueHalf + '% ] 𒁂';
room.sendAnnouncement(timeAnnouncement, player.id, 0xc2ff33, "bold", 0);}



function teamPossFun(player, message){

    // Enviar el anuncio con el porcentaje de posesión de cada equipo

    if (room.getScores() == null) return false;
    bluePoss = 0;
    redPoss = 0
    ballCarrying.forEach(updateTeamPoss);
    var redPossPercent = Math.round((redPoss / (redPoss + bluePoss + 0.000001)) * 100);
    var bluePossPercent = Math.round((bluePoss / (redPoss + bluePoss + 0.000001)) * 100);
    var totalPosesion = posesionEquipoA + posesionEquipoB;
    var porcentajeEquipoA = totalPosesion === 0 ? 0 : (posesionEquipoA / totalPosesion) * 100;
    var porcentajeEquipoB = totalPosesion === 0 ? 0 : (posesionEquipoB / totalPosesion) * 100;

var AnuncioPosesion = 'Posesión de balón ⚽ 𒁂 [ 🔴 ' + teamRed + ': ' + porcentajeEquipoA.toFixed(2) + '% ] 🆚 [ 🔵 ' + teamBlue + ': ' + porcentajeEquipoB.toFixed(2) + '% ] 𒁂';
room.sendAnnouncement(AnuncioPosesion, null, 0xc2ff33, "bold", 0);

    var timeOnRedHalf = Math.round((timeOnHalves[0] / (timeOnHalves[0] + timeOnHalves[1] + 0.000001)) * 100);
    var timeOnBlueHalf = Math.round((timeOnHalves[1] / (timeOnHalves[0] + timeOnHalves[1] + 0.000001)) * 100);
var AnuncioPelotaEnCampo = 'Pelota en campo ⚽ 𒁂 [ 🔴 ' + teamRed + ' ' + timeOnRedHalf + '% ] 🆚 [ 🔵 ' + teamBlue + ' ' + timeOnBlueHalf + '% ] 𒁂';
room.sendAnnouncement(AnuncioPelotaEnCampo, null, 0xc2ff33, "bold", 0);
}  





function BanIpFun(player, message) {
    // Previene que alguien hable en la sala (utiliza el apodo, no el ID)
    // necesita ser administrador
    if (player.admin == true) {
        let ipToAdd = message.substr(7);

        // Busca el nombre asociado a la IP
        const NickDelJugador = getPlayerNameByIP(ipToAdd);

        // Agrega la IP a la lista
        if (!IpPlayers.includes(ipToAdd)) {
            IpPlayers.push(ipToAdd);

            // Envía el anuncio
            room.sendAnnouncement(`El Administrador ${player.name} ha añadido la IP de ${NickDelJugador} a la Blacklist`, null, 0x05ff02, "normal", 0);

            // Verifica si el jugador está presente en la sala
            const targetPlayer = room.getPlayerList().find(p => p.name === NickDelJugador);
            if (targetPlayer) {
                // Kickea al jugador y lo banea
                room.kickPlayer(targetPlayer.id, MensajeBaneoPorIp, true);
            } else {
                // Envía anuncios si el jugador es desconocido
                room.sendAnnouncement(`Admin ${player.name}: La forma correcta de usar !banip es: !banip <IP del Jugador> | Ejemplo: !banip 123.456.789`, player.id, 0xFF5252, "normal", 0);
                room.sendAnnouncement(`Para ver la IP de un jugador, utiliza el comando: !ip NICKNAME DEL JUGADOR | Ejemplo: !ip Lionel Messi #10`, player.id, 0x05ff02, "normal", 0);
            }
        }
    }
}


function unBanIpFun(player, message) {
    // Allow somebody to talk if he has been muted
    // need to be admin
    if (player.admin == true) {
        let ipToRemove = message.substr(9);

        // Busca el nombre asociado a la IP
        const NickDelJugador = getPlayerNameByIP(ipToRemove);

        // Elimina la IP de la lista
        let pos = IpPlayers.indexOf(ipToRemove);
        if (pos !== -1) {
            IpPlayers.splice(pos, 1);

            // Envía el anuncio
            room.sendAnnouncement(`El Administrador ${player.name} ha retirado la IP de ${NickDelJugador} de la Blacklist`, null, 0x05ff02, "normal", 0);
        }
    }
}

// Función para obtener el nombre de jugador asociado a una IP
function getPlayerNameByIP(ip) {
    const playerInfo = playerIPs.find(info => info.ip === ip);
    return playerInfo ? playerInfo.nickname : "Jugador Desconocido";
}


var JugadoresBaneadosXIp = false;
function unBanAllIpsFun(player, message){ // !mute Anddy
    // Prevent somebody to talk in the room (uses the nickname, not the id)
    // need to be admin
    if (player.admin == true){
        JugadoresBaneadosXIp = false;
        IpPlayers = [];
	room.clearBans();
    room.sendAnnouncement("[✅ 🔓] " + player.name + " ha eliminado la lista de jugadores baneados por IP.", null, 0xd733ff, "normal", 0);
    }
} 


// Función para mutear a un jugador
function pushMute(playerId, duration, adminName) {
    // Buscar el jugador con el ID especificado
    const targetPlayer = room.getPlayer(playerId);

    if (targetPlayer) {
        // Calcular el tiempo de muteo en milisegundos
        const muteTime = duration === Infinity ? Infinity : Date.now() + (duration * 60 * 1000); // Convertir minutos a milisegundos

        // Almacenar el tiempo de muteo para el jugador utilizando su nombre como clave
        mutedPlayers[targetPlayer.name] = { muteTime: muteTime, admin: adminName };

        // Formatear el anuncio con emojis para mayor impacto visual
        var announcement;
        if (duration === Infinity) {
            announcement = "🔇 " + targetPlayer.name + " ha sido MUTEADO 🤐 indefinidamente por " + adminName + ".";
        } else {
            announcement = "🔇 " + targetPlayer.name + " ha sido MUTEADO 🤐 por " + duration + " minutos por " + adminName + ".";
        }
        room.sendAnnouncement(announcement, null, 0xFF0000, "bold", 0);
    } else {
        var usageMessage = "❗️ No se encontró ningún jugador con el ID especificado. Por favor, asegúrate de usar el formato correcto: !mute ID [duration] ❗️";
        room.sendAnnouncement(usageMessage, null, 0xFF0000, "bold", 2);
    }
}

// Función para desmutear a un jugador
function unmuteFun(player, message) { // !unmute ID
    // Permitir que alguien hable si ha sido silenciado previamente
    // Debe ser administrador
    if (player.admin === true) {
        const spacePos = message.search(" ");
        const targetPlayerId = parseInt(message.substr(spacePos + 1)); // Parsear el ID como entero

        // Si el ID no es un número válido o si no se incluyó un ID en el comando
        if (isNaN(targetPlayerId) || spacePos === -1) {
            var usageMessage = "❗️ Uso incorrecto del comando !unmute. Por favor, asegúrate de usar el formato correcto: !unmute ID ❗️";
            room.sendAnnouncement(usageMessage, player.id, 0xFF0000, "bold", 2);
            return;
        }

        // Buscar el jugador con el ID especificado
        const targetPlayer = room.getPlayer(targetPlayerId);

        if (targetPlayer) {
            // Eliminar al jugador de la lista de jugadores muteados
            delete mutedPlayers[targetPlayer.name];

            // Formatear el anuncio con emojis para mayor impacto visual
            var announcement = "🔊 " + targetPlayer.name + " ha sido DESMUTEADO 🔓 por " + player.name + " 🔊";
            room.sendAnnouncement(announcement, null, 0x00FF00, "bold", 0);
        }
    }
}

var isRoomMuted = false;
function UnmuteAll(player, message){ // !mute Anddy
    // Prevent somebody to talk in the room (uses the nickname, not the id)
    // need to be admin
    if (player.admin == true){
        isRoomMuted = false;
        mutedPlayers = [];
    room.sendAnnouncement("📣 " + player.name + " ha desmuteado a todos los jugadores. 🗣️🔓", null, 0x32cd32, "bold", 0);
    }
}  
 

function EspecialesFun(player) { // !1
    room.sendAnnouncement('⎝༽  | ︻╦̵̵╤── | ඞ |  ⊹ | ✧ | ✦ | ツ | ♬ | ᕦ( ͡° ͜ʖ ͡°)ᕤ | 乡 | 『』 | 卍 | 〘〙| ༒ |  ௵ | 々| 𒆜 | 𒐫 | 𒈞', player.id, 0xFF003C, "normal", 0);
}
function NumeroUnoFun(player) { // !1
    room.sendAnnouncement('🔢  𝟭         ౹         𝟏          𝟷          𝟣         １         ߗ1𐰯¹₁⥠↿˥⒈         𝟏        𝟷𐰯 І        Ι         Ӏ        ᅵ        𝗹        ।         ⅂        𐐑        ⓵        ①         ➀         ➊         ⅼ   para más ve a https://tell.wtf', player.id, 0xFF003C, "normal", 0);
}
function NumeroDosFun(player) { // !1
    room.sendAnnouncement('🔢  𝟮        Ƨ        2️⃣        ౽        ੨ 	       ૨        ২        २        ௨        𝟐        ２        2        ᒿ        𝟤        ᒾ        ²        ₂        շ        𝟸        ᘖ        𝟚        Ձ        ⒉        ƻ        Չ        Զ        ϩ        ⓶        ②        ➁        ❷        ㈃        ⒛ para más ve a https://tell.wtf', player.id, 0xFF003C, "normal", 0);
}
function NumeroTresFun(player) { // !1
    room.sendAnnouncement('🔢  Ʒ        3        3️⃣        ३        ੩        ʒ        ӡ        Ӡ        ᴣ        ᶾ        э        Э        ℈        ぅ        う        ㄋ        ȝ        Ȝ        𝟯        𝟥        з        ɜ        ᴈ        ᢃ        ౩        ⓷        ③        ➂        ❸        ੩        ૩        ३ para más ve a https://tell.wtf', player.id, 0xFF003C, "normal", 0);
}
function NumeroCuatroFun(player) { // !1
    room.sendAnnouncement('🔢  𝟰        ㏣        ㍜        𝟒        ４        𝟺        𝟦        4        ₄        ⁴        Ϥ        կ        Կ        Ч        ч        ɥ        ౺        ⒋ para más ve a https://tell.wtf', player.id, 0xFF003C, "normal", 0);
}
function NumeroCincoFun(player) { // !1
    room.sendAnnouncement('🔢  Ƽ        ƽ        𐐠        𐑈        𝟱        𝟓        ５        ㏤        5        ㍝        5️⃣        𝟻        5        ₅        ⁵        ⒌ para más ve a https://tell.wtf', player.id, 0xFF003C, "normal", 0);
}
function NumeroSeisFun(player) { // !1
    room.sendAnnouncement('🔢  𝟲        𝟔        ６        𝟼        ㏥        ㍞        6        𝟨        ₆        ⁶        𝟞        ⒍        ⑥        ⓺        ➅        ➏        ❻        ɓ        ꕃ para más ve a https://tell.wtf', player.id, 0xFF003C, "normal", 0);
}
function NumeroSieteFun(player) { // !1
    room.sendAnnouncement('🔢 𐓒        𐒇        ⅂        𐐑        ヿ        ⏋        ⌉        𝟳        𝟕        𝟟        7        𝟽        ７        ⁊        ₇        ⁷        𝟩        7️⃣        ⒎        ꔔ para más ve a https://tell.wtf', player.id, 0xFF003C, "normal", 0);
}
function NumeroOchoFun(player) { // !1
    room.sendAnnouncement('🔢  𝟴        𝟖        8        𝟪        ৪        ⁸        ₈        ８        𐌚        𝟾        ꖉ        ⊟        𝛉        ⒏        ㏧        ㍠        8️⃣ para más ve a https://tell.wtf', player.id, 0xFF003C, "normal", 0);
}
function NumeroNueveFun(player) { // !1
    room.sendAnnouncement('🔢  𝟵        𝟗        9        𝟿        ９        𝟫        ⁹        ₉        ୨        ց        ɡ        ᕤ        ⒐        9        ㏨        ㍡        9️⃣        𝟡        ۹        ٩        ᑫ        ᑴ        𐒘 para más ve a https://tell.wtf', player.id, 0xFF003C, "normal", 0);
}
function NumeroDiezFun(player) { // !1
    room.sendAnnouncement('🔢  ⒑        🔟        ⑩        ➉        ➓        ❿        ю        Ю        ㍢        ㏩        ⑽ para más ve a https://tell.wtf', player.id, 0xFF003C, "normal", 0);
}

function LinkDiscordFun(player) { // !1
    room.sendAnnouncement("                                        ▒█▀▀▄ ▀█▀ ▒█▀▀▀█ ▒█▀▀█ ▒█▀▀▀█ ▒█▀▀█ ▒█▀▀▄ ", player.id, 0x7289da, "normal", 0)
    room.sendAnnouncement("                                        ▒█░▒█ ▒█░ ░▀▀▀▄▄ ▒█░░░ ▒█░░▒█ ▒█▄▄▀ ▒█░▒█ ", player.id, 0x7289da, "normal", 0)
    room.sendAnnouncement("                                        ▒█▄▄▀ ▄█▄ ▒█▄▄▄█ ▒█▄▄█ ▒█▄▄▄█ ▒█░▒█ ▒█▄▄▀ ", player.id, 0x7289da, "normal", 0);
    room.sendAnnouncement("                                        💬👥 𝑼𝑵𝑨𝑵𝑺𝑬 𝑨𝑳 𝑫𝑰𝑺𝑪𝑶𝑹𝑫 ➡ " + DiscordLink + " ⬅", player.id, 0xF6FF43, "normal", 0);
}

function AvatarNumerosFun(player) { // !1
    var ColoresRandomBot2 = [0xF6FF43, 0x00ffd5, 0xbfff50, 0xffd050];
    var GeneradorColoresRandom2 = ColoresRandomBot2[(Math.random() * ColoresRandomBot2.length) | 0]
    room.sendAnnouncement('Para ver números para tu avatar escribe !1, !2, !3, !4, !5, !6, !7, !8, !9 o !10.', player.id, GeneradorColoresRandom2, "normal", 0);
}

function TamanoJugadorFun(player) {
    var ColoresRandomBot2 = [0xF6FF43, 0x00ffd5, 0xbfff50, 0xffd050];
    var GeneradorColoresRandom2 = ColoresRandomBot2[(Math.random() * ColoresRandomBot2.length) | 0]
  room.sendAnnouncement('🏀 ¡Elige el tamaño de tu jugador! 📏 \n\nPara ajustar el tamaño de tu jugador, escribe "!size Número". Debe ser un número entre ' + TamanoMinimoPermitido + ' y ' + TamanoMaximoPermitido + ', siendo 15 el tamaño normal. \n\n🔽 Cuanto más pequeño sea el número, más pequeño será tu jugador. \n\n🔼 Si colocas un número grande, ¡tu jugador será más grande! 🎉', player.id, GeneradorColoresRandom2, "normal", 0);
  room.sendAnnouncement('Ejemplo: !size 12', player.id, 0x34F73A, "normal", 0);
}



var cantidadDeCambios = {};

function changeOurSize(player, message) { 
    const DEFAULT_SIZE = 15;
    var MIN_SIZE = TamanoMinimoPermitido;
    var MAX_SIZE = TamanoMaximoPermitido;

    if (player.team !== 0 && (!tookASize.hasOwnProperty(player.id) || cantidadDeCambios[player.id] < CantidadCambiarTamano)) {
        let size = message.substr("!size ".length);
        if (!isNaN(size) && size >= MIN_SIZE && size <= MAX_SIZE) {
            // Calculando invmass basado en el tamaño
            let invMass = 0.5 + (DEFAULT_SIZE - size) * 0.02;

            room.setPlayerDiscProperties(player.id, {
                radius: size,
                invMass: invMass
            });
            tookASize[player.id] = size;
            cantidadDeCambios[player.id] = (cantidadDeCambios[player.id] || 0) + 1;

            room.sendAnnouncement("📏 ¡Tu tamaño ha sido cambiado a " + size + "! ⚽️", player.id, 0xbfff35, "normal", 0);
            
            // Determinamos cuántos cambios restantes tiene el jugador
            let cambiosRestantes = CantidadCambiarTamano - cantidadDeCambios[player.id];
            if (cambiosRestantes > 0) {
                let mensajeCambio = (cambiosRestantes === 1) ? "vez" : "veces";
                room.sendAnnouncement("🔄 ¡Puedes cambiar tu tamaño " + cambiosRestantes + " " + mensajeCambio + " más por partido! ⚽️", player.id, 0xbfff35, "normal", 0);
            } else {
                room.sendAnnouncement("🔄 ¡Ya no puedes cambiar tu tamaño más por partido! ⚽️", player.id, 0xbfff35, "normal", 0);
            }
        } else {
            room.sendAnnouncement("📏 ¡Personaliza tu tamaño por el que quieras! 🏀\nSolo escribe !size seguido de un número entre " + MIN_SIZE + " y " + MAX_SIZE + " para ajustar tu tamaño. 😄 Si escribes !size 12, por ejemplo, te volverás más pequeño. El tamaño que tienen por defecto es 15.\n¡Diviértete jugando! 🎉", player.id, 0xbfff35, "normal", 0);
        }
    } else {
        if (cantidadDeCambios[player.id] >= CantidadCambiarTamano) {
            room.sendAnnouncement("🔄 ¡Ya has alcanzado el límite de cambios de tamaño por partido! ⚽️\nRecuerda que solo puedes cambiar tu tamaño " + CantidadCambiarTamano + " vez por partido. ¡Elige sabiamente! 🎉", player.id, 0xbfff35, "normal", 0);
        } else {
            let cambiosRestantes = CantidadCambiarTamano - cantidadDeCambios[player.id];
            let mensajeCambio = (cambiosRestantes === 1) ? "vez" : "veces";
            room.sendAnnouncement("🔄 ¡Puedes cambiar tu tamaño " + cambiosRestantes + " " + mensajeCambio + " más por partido! ⚽️", player.id, 0xbfff35, "normal", 0);
        }
    }
    return false;
}


function InvertirColores(player) {
    if (player.admin == true) {
        // Intercambiar colores de los equipos
        room.setTeamColors(1, blueAngle, blueTextColor, blueColor);
        room.setTeamColors(2, redAngle, redTextColor, redColor);

        // Enviar anuncio
        room.sendAnnouncement("[🔄👕] ¡Camisetas intercambiadas con éxito!", null, 0x00FF00, "bold", 2);

        // Intercambiar valores de las variables
        let saveCamiAngle = blueAngle;
        let saveCamiColor = blueColor;
        let saveCamiText = blueTextColor;

        blueAngle = redAngle;
        blueTextColor = redTextColor;
        blueColor = redColor;

        redAngle = saveCamiAngle;
        redColor = saveCamiColor;
        redTextColor = saveCamiText;

        // Intercambiar nombres de equipos
        let tempTeamName = teamRed;
        teamRed = teamBlue;
        teamBlue = tempTeamName;
    }
}

function UEFAFun(player) { // !camisetas
    room.sendAnnouncement("UEFA 🌍: !premierleague ✦ !ligue1 ✦  !bundesliga ✦ !seriea ✦ !serieb ✦ !laliga ✦ !eredivisie ✦ !primeiraliga ✦ !superlig ✦ !campeonatoruso ✦ !1hnl ✦ !premierucrania  !superligasuiza ✦ !nb1 ", player.id, 0xea9999, "bold", 0);
}
function CONMEBOLFun(player) { // !camisetas
    room.sendAnnouncement("CONMEBOL 🌎: !primera ✦ !ascenso ✦ !brasileirao ✦ !campeonatouruguayo ✦ !ligaparaguaya ✦ !ligaaguila ✦ !ligapro ✦ !liga1peru ✦ !campeonatochileno ✦ !ligaboliviana ✦ !ligavenezolana", player.id, 0xa4c2f4, "bold", 0);
}
function CONCACAFFun(player) { // !camisetas
    room.sendAnnouncement("CONCACAF 🌎: !ligamx ✦ !mls", player.id, 0xffd966, "bold", 0);
}


function CamisetasFun(player) { // !camisetas
    room.sendAnnouncement("!UEFA 🌍✦ !CONMEBOL 🌎✦ !CONCACAF 🌎✦ !paises 🌐✦ !fantasmas  👻 ✦ !amateurs 🛡✦ !superheroes 🦸 | !haxball | !esports", player.id, 0xb4a7d6, "bold", 0);
    setTimeout(function() {
      var paso1 = "📢 ¡Hola! ¿Quieres jugar con la camiseta de tu equipo favorito? Es muy fácil, sigue estos pasos:\n\n";
      paso1 += "1️⃣ Escribe las letras abreviadas de tu equipo (por ejemplo, riv para River Plate, boc para Boca Juniors, arg para Argentina, bra para Brasil, etc.) 🏟️";
      room.sendAnnouncement(paso1, player.id, 0xffffff, "bold", 0);
    }, 5000);

    setTimeout(function() {
      var paso2 = "2️⃣ Luego, escribe qué tipo de camiseta deseas (titular, alternativa, tercera, clásica o bandera para selecciones nacionales) 🌟";
      room.sendAnnouncement(paso2, player.id, 0xffffff, "bold", 0);
    }, 8000);

    setTimeout(function() {
      var paso3 = "3️⃣ Por último, elige si quieres la camiseta para el equipo rojo 🔴 (red) o azul 🔵(blue)";
      room.sendAnnouncement(paso3, player.id, 0xffffff, "bold", 0);
    }, 11000);

    setTimeout(function() {
      var ejemplo = "\nPor ejemplo, si quieres ver la camiseta titular de River Plate en el equipo rojo, escribe: riv/titular/red";
      ejemplo += "\nSi quieres la camiseta titular de Boca Juniors en el equipo azul, escribe: boc/titular/blue";
      ejemplo += "\nRecuerda poner el símbolo '/' entre cada parte del comando.";
      room.sendAnnouncement(ejemplo, player.id, 0xffffff, "bold", 0);
    }, 14000);

    setTimeout(function() {
      var final = "\n¡Y listo! 🎉 Verás la camiseta del equipo que elegiste en el equipo que quieras. ¡Disfruta representando a tu equipo favorito! ⚽️👕";
      room.sendAnnouncement(final, player.id, 0xffffff, "bold", 0);
    }, 17000);
}

function SuperHeroesFun(player) { // !fantasmas
    room.sendAnnouncement("💪 SUPERHÉROES: ", player.id, 0xfaebd6, "bold", 0);
    room.sendAnnouncement("MARVEL: SPIDERMAN | HULK | CAPITANAMERICA", player.id, 0xfaebd6, "bold", 0);
    room.sendAnnouncement("DC: BATMAN", player.id, 0xfaebd6, "bold", 0);
}

function FantasmasFun(player) { // !fantasmas
    room.sendAnnouncement("📜 👻 EQUIPOS FANTASMAS: ", player.id, 0xfaebd6, "bold", 0);
    room.sendAnnouncement("🌍 exSelecciones:  | URSS | YUG | CZE", player.id, 0xfaebd6, "bold", 0);
    room.sendAnnouncement("🛡 exClubes: | ALU | LOA | OCFC | BAC | ROAC | CAPORT", player.id, 0xfaebd6, "bold", 0);
}

function SuperligaFun(player) { // !superliga
    room.sendAnnouncement("🅰 PRIMERA DIVISIÓN: | RIV | BOC | RAC | IND | SLO | EST | VEL | LAN | DYJ", player.id, 0xADF4FF, "bold", 0); 
    room.sendAnnouncement(" | AAAJ | NOB | CEN | ARSE | BAND | TAL | CSF | HUR | GIM ", player.id, 0xADF4FF, "bold", 0); 
    room.sendAnnouncement(" | UNI | ALD | ATU | CCS | GOD | PAT | BARR | TIG | PLA | SAR", player.id, 0xADF4FF, "bold", 0); 
}

function AscensoFun(player) { // !ascenso
    room.sendAnnouncement('🅱 ASCENSO: | ALB | FCO | CHA | ATL |  SMT | OLP | BEL | QUI | MOR | NCH | ALM | SMSJ | ABROWN', player.id, 0xDB1414, "bold", 0); 
    room.sendAnnouncement('| DOC | SCH | RIE | AGR | ALV | STEL​ | MER | AdQ | CJA | GyT | CADU | VSC | EBA | BOCHZ | CDE | SIT | MDY | CDN | LAF | SM | DOU', player.id, 0xDB1414, "bold", 0); 
}

function EquiposAmateursFun(player) { // !ascenso
    room.sendAnnouncement('🔰 AMATEURS (LIGAS BARRIALES) : | CDYBGR', player.id, 0xDB1414, "bold", 0); 
}

function CampeonatoChilenoFun(player) { // !campeonatochileno
    room.sendAnnouncement("(🇨🇱) CAMPEONATO CHILENO:  | CCO | UDC | UCA | CDP | COB | EVDM | ULC |", player.id, 0xFF2A12, "bold", 0); 
    room.sendAnnouncement("| AUD | HUA | IQU | OHI | UES | SWA | CUR | CDA | UCON | DLS | COQ", player.id, 0xFF2A12, "bold", 0); 
}

function LigaBolivianaFun(player) { // !ligaboliviana
    room.sendAnnouncement("(🇧🇴) LIGA BOLIVIANA:  | BLV | STG | WTM | PET | ALWR", player.id, 0x5ACC31, "bold", 0); 
}

function MLSFun(player) { // !mls
    room.sendAnnouncement("(🇺🇸) MLS: | LA | TOFC | NYC | ATLU | LAFC | SEA | NYRB | PTIM | ORL | MIA", player.id, 0x1930FF, "bold", 0); 
}

function LigaUruguayaFun(player) { // !campeonatouruguayo
    room.sendAnnouncement('(🇺🇾) CAMPEONATO URUGUAYO: | NAC | PEN | DAN | RAM | RIU | WAN | MCT | CRL | DFS | PCOL', player.id, 0x69CDFF, "bold", 0); 
}

function CampeonatoRusoFun(player) { // !campeonatoruso
    room.sendAnnouncement('(🇷🇺) CAMPEONATO RUSO: | SPM | CSK | ZEN | LOK | DIN', player.id, 0xe11a22, "bold", 0); 
}

function PremierUcranianaFun(player) { // !premierucrania
    room.sendAnnouncement('(🇺🇦) LIGA PREMIER UCRANIA: | SHA | DYK | NYV', player.id, 0xFFF954, "bold", 0); 
}

function LaLigaFun(player) { // !laliga
    room.sendAnnouncement('(🇪🇸) LALIGA: | RMA | BAR | ATM | SEV | VIL | VAL | ATH | GET | CEL | BET | LEV | RAY | RCDE | MLL', player.id, 0xFF2A00, "bold", 0); 
}

function LigaAguilaFun(player) { // !ligaaguila
    room.sendAnnouncement('(🇨🇴) LIGA ÁGUILA: | ATN | MIL | AME | SFE | CAL | ONC | DEPTOL', player.id, 0xFFE959, "bold", 0); 
}

function LigaParaguayaFun(player) { // !ligaparaguaya
    room.sendAnnouncement('(🇵🇾) LIGA PARAGUAYA: | CCP | OLI | GUA | LIB', player.id, 0xa3a3a3, "bold", 0);
}

function SerieATIMFun(player) { // !seriea
    room.sendAnnouncement('(🇮🇹) SERIE A: | JUV | INT | ACM | ATA | NAP | LAZ | ROM | FIO | TOR | GEN | PLM | CHVER', player.id, 0x6699FF, "bold", 0);
}

function SerieBItaliaFun(player) { // !seriea
    room.sendAnnouncement('(🇮🇹) SERIE B: | VENFC', player.id, 0x6699FF, "bold", 0);
}

function BrasilLeagueFun(player) { // !brasileirão
    room.sendAnnouncement('(🇧🇷) BRASILEIRAO: SAO | SAN | CRU | FLA | PAL | CAM | SCI | GRE | COR | BOT | PAR | FLU | VAS | FORT | RBB | AMCMIN', player.id, 0xF7FF19, "bold", 0);
}

function PremierLeagueFun(player) { // !premierleague
    room.sendAnnouncement('(🇬🇧) PREMIER LEAGUE: MCI | LIV | CHE | MUN | TOT | LEI | ARS | EVE | WHU | WOL | AVL | NEW | SOU | WAT | CRY | LEE | FUL | WBA | HUL', player.id, 0xFFFFFF, "bold", 0); 
}

function SuperLigFun(player) { // !superlig
    room.sendAnnouncement('(🇹🇷) SUPER LIG: | GS | FB | BJK ', player.id, 0xFA0000, "bold", 0); 
}

function LigaVenezolanaFun(player) { // !ligavenezolana
    room.sendAnnouncement('(🇻🇪) Liga Venezolana: TACH | CARC | MNG | DLAR', player.id, 0xF7FF19, "bold", 0);
}

function PaisesFun(player) { // !paises
    room.sendAnnouncement('🌍 EUROPA: FRA | ALE | ITA | ESP | ING | BELG | POR | HOL | CRO | | GAL | RUS | SWE | SUI | AUT | UKR | POL | MAR | SRB | TUN | DEN', player.id, 0x5793FA, "bold", 0);  
    room.sendAnnouncement('🌎 AMÉRICA: BRA | ARG | COL | URU | CHI | USA  | MEX | ECU | PGY | PER | VEN | BOL | CAN | CRC', player.id, 0x5793FA, "bold", 0);  
    room.sendAnnouncement('🌏 ASIA y OCEANIA: JAP | QAT | CNO | NZE | IRN | KOR | KSA | AUS', player.id, 0x5793FA, "bold", 0); 
    room.sendAnnouncement('🌍 AFRICA: NGA | CDM | CMR | SEN | GHA', player.id, 0x5793FA, "bold", 0); 
}

function BundesligaFun(player) { // !bundesliga
    room.sendAnnouncement('(🇩🇪) BUNDESLIGA: | FCB | BVB | RBL | B04 | HSV', player.id, 0xF5FAF8, "bold", 0); 
}

function EredivisieFun(player) { // !eredivisie
    room.sendAnnouncement('(🇳🇱) EREDIVISIE: | AJA | FEY | PSV | WIL', player.id, 0xFA6400, "bold", 0); 
} 

function Ligue1Fun(player) { // !ligue1
    room.sendAnnouncement('(🇫🇷) LIGUE 1: | PSG | OGC | OM | OL | ASM | FCN | REN | STE', player.id, 0x3744FA, "bold", 0); 
}

function LigaMXFun(player) { // !ligamx
    room.sendAnnouncement('(🇲🇽) LIGA MX: | AMC | CHV | CRUZ | TGS | MTY', player.id, 0x75FF59, "bold", 0); 
} 

function LigaProFun(player) { // !ligapro
    room.sendAnnouncement('(🇪🇨) LIGA PRO: | LDU | BSC | EME | IDV | DEPUCA', player.id, 0xFAFF5C, "bold", 0); 
}

function RaiffeisenSuperLeagueFun(player) { // !superligasuiza
    room.sendAnnouncement('(🇨🇭) RAIFFEISEN SUPER LEAGUE: | BAS | ', player.id, 0xFF0A0A, "bold", 0); 
}

function Liga1PeruFun(player) { // !liga1peru
    room.sendAnnouncement('(🇵🇪) LIGA 1: | UNV | ALI | CRI | MEL | UCV', player.id, 0xFF1C1C, "bold", 0); 
}

function PrimeiraLigaFun(player) { // !primeiraliga
    room.sendAnnouncement('(🇵🇹) Primeira Liga: | BEN | SPO | FCP | SCB', player.id, 0xFF3B3B, "bold", 0); 
}

function EquiposEsportsFun(player) { // !esports
    room.sendAnnouncement("(🎮) EQUIPOS ESPORTS:  | FURIA | ISURUS | 9Z | KUNISPORT | TRONCOS | PORCINOS | SAIYANS | BARRIO | ANIQUILADORES |", player.id, 0x00FF00, "bold", 0); 
    room.sendAnnouncement("| JIJANTES | MOSTOLES | RAYO | XBUYER | 1K | FURIUS | PIO |", player.id, 0x00FF00, "bold", 0); 
}


var comandosGLH = {
    // Command that doesnt need to know players attributes.
    "!swapcolors": InvertirColores,
    "!help": helpFun,
    "!ayuda": helpFun,
    "!ids": ListaDeJugadoresFun,
    "!resultados": ResultadosFun,
    "!reglamento": ReglamentoFun,
    "!fixture": FixtureFun,
    "!size": changeOurSize,
    "!tamaño": TamanoJugadorFun,
    "!discord": LinkDiscordFun,
    "!avatar": AvatarNumerosFun,
    "!numeros": AvatarNumerosFun,
    "!1": NumeroUnoFun,
    "!especiales": EspecialesFun,
    "!2": NumeroDosFun,
    "!3": NumeroTresFun,
    "!4": NumeroCuatroFun,
    "!5": NumeroCincoFun,
    "!6": NumeroSeisFun,
    "!7": NumeroSieteFun,
    "!8": NumeroOchoFun,
    "!9": NumeroNueveFun,
    "!10": NumeroDiezFun,
    "!banip" : BanIpFun,
    "!unbanip" : unBanIpFun,
    "!unbanallips": unBanAllIpsFun,
    "!unmuteall" : UnmuteAll,
    "!afk" : afkFun,
    "!poss" : PosesionBalonFun,
    "!afks" : afksFun,
    "!kickafks" : kickafksFun,
    "!reglas": ReglasFun,
    "!clearbans": clearbansFun,
    "!clear_password": clearpasswordFun,
    "!swap": swapFun,
    "!tenis": TenisFun,
    "!mapas": MapasFun,
    "!rr": resetFun,
    "!nv" : leaveFun,
    "!bb" : leaveFun,
    "!adormir" : leaveFun,
    "!acomer" : leaveFun,
    "!camisetas": CamisetasFun,
    "!ksk": CamisetasFun,
"!conmebol": CONMEBOLFun,
"!uefa": UEFAFun,
"!concacaf": CONCACAFFun,
"!superheroes": SuperHeroesFun,
"!primera": SuperligaFun,
"!fantasmas": FantasmasFun,
"!amateurs": EquiposAmateursFun,
"!ascenso": AscensoFun,
"!ligaboliviana": LigaBolivianaFun,
"!campeonatochileno": CampeonatoChilenoFun,
"!mls": MLSFun,
"!campeonatouruguayo": LigaUruguayaFun,
"!campeonatoruso": CampeonatoRusoFun,
"!premierucrania": PremierUcranianaFun,
"!laliga": LaLigaFun,
"!seriea": SerieATIMFun,
"!serieb": SerieBItaliaFun,
"!brasileirao": BrasilLeagueFun,
"!premierleague": PremierLeagueFun,
"!superlig": SuperLigFun,
"!paises": PaisesFun,
"!bundesliga": BundesligaFun,
"!eredivisie": EredivisieFun,
"!ligaaguila": LigaAguilaFun,
"!ligaparaguaya": LigaParaguayaFun,
"!ligue1": Ligue1Fun,
"!ligamx": LigaMXFun,
"!ligapro": LigaProFun,
"!superligasuiza": RaiffeisenSuperLeagueFun,
"!liga1peru": Liga1PeruFun,
"!primeiraliga": PrimeiraLigaFun,
"!ligavenezolana": LigaVenezolanaFun,
"!esports": EquiposEsportsFun,


}


var commands = {
    "!adminhelp": adminHelpFun,
    "!unmute": unmuteFun,
    "!md": pmFun,
    "!pv": pmFun,
    "!set_password": setpasswordFun
}

function LinkDelScript(player) {
    var scores = room.getScores();
    var ColoresRandomBot = [0xF6FF43, 0x00ffd5, 0xbfff50, 0xffd050];
    var GeneradorColoresRandom = ColoresRandomBot[(Math.random() * ColoresRandomBot.length) | 0]
    var AvisosRandomBot = ['🤖 CREÁ TU PROPIO HOST CON BOT:', '🔗 LINK DEL BOT DE ESTE HOST:', '📚 TUTORIAL PARA CREAR TU HOST CON BOT:', '🏟️ CREÁ TU PROPIA SALA DE REAL SOCCER REVOLUTION:', '📖 TUTORIAL PARA CREAR HOST DE RS REVOLUTION:']
    var GeneradorAvisosRandom = AvisosRandomBot[(Math.random() * AvisosRandomBot.length) | 0]
    if (scores.time > 3 && !isTimeAddedShownseis) {
    room.sendAnnouncement("                                        𒁂 ✨ " + GeneradorAvisosRandom  + "  ➡ https://youtu.be/Mkh7WcN8pSg ⬅ 𒁂", player, GeneradorColoresRandom, "normal", 0);
    isTimeAddedShownseis = true;
}
    if (scores.time > 0.3 && !isTimeAddedShownseis) {

  isGamePaused = false;
    room.sendAnnouncement("   🏆    E S T A N    J U G A N D O  :       " + teamRed + "   vs   " + teamBlue, player, GeneradorColoresRandom, "normal", 0);
    room.sendAnnouncement("Escribe !help para ver los comandos disponibles.", player, GeneradorColoresRandom, "normal", 0);    
isTimeAddedShownseis = true;


    }
}


// Función para convertir un color en formato de cadena hexadecimal a número entero
function hexToInt(hexColor) {
    return parseInt(hexColor, 16);
}


function LinkDelScript3(player) {
    var scores = room.getScores();
    var TiempoEnElQueApareceElMensaje = AnuncioMinuto * 60 + AnuncioSegundos;
    if (scores.time > TiempoEnElQueApareceElMensaje && !DetenerAviso) {
        var colorAnuncioInt = hexToInt(ColorAnuncio); // Convertir a número entero
        room.sendAnnouncement(Anuncio, player, colorAnuncioInt, `${TipoDeLetraAnuncio}`, 0);
        DetenerAviso = true;
    }
}


function LinkDelScript4(player) {
    var scores = room.getScores();
    var TiempoEnElQueApareceElMensaje2 = Anuncio2Minuto * 60 + Anuncio2Segundos;
    if (scores.time > TiempoEnElQueApareceElMensaje2 && !DetenerAviso2) {
        var colorAnuncio2Int = hexToInt(ColorAnuncio2); // Convertir a número entero
        room.sendAnnouncement(Anuncio2, player, colorAnuncio2Int, `${TipoDeLetraAnuncio2}`, 0);
        DetenerAviso2 = true;
    }
}


function LinkDelScript2(player) {
    if (room.getScores().time >= 5 && !DetenerAnuncio) {
        // Obtener la lista de jugadores
        var players = room.getPlayerList();

        // Filtrar jugadores por equipo Rojo
        var redPlayers = players.filter(player => player.team === 1);

        // Filtrar jugadores por equipo Azul
        var bluePlayers = players.filter(player => player.team === 2);

        // Encontrar al jugador del equipo Rojo con la posición en X más baja
        ArqueroRED = redPlayers.reduce((minXPlayer, currentPlayer) => {
            return minXPlayer.position.x < currentPlayer.position.x ? minXPlayer : currentPlayer;
        }, redPlayers[0]);

        // Encontrar al jugador del equipo Azul con la posición en X más alta
        ArqueroBLUE = bluePlayers.reduce((maxXPlayer, currentPlayer) => {
            return maxXPlayer.position.x > currentPlayer.position.x ? maxXPlayer : currentPlayer;
        }, bluePlayers[0]);

        // Enviar el anuncio con la información sobre los arqueros
        var message = "🔴 🧤⚽ GK " + teamRed + ": " +(ArqueroRED ? ArqueroRED.name : "No tiene") + " ------- 🔵 🧤⚽ GK " + teamBlue + ": " + (ArqueroBLUE ? ArqueroBLUE.name : "No tiene");
        room.sendAnnouncement(message, null, 0xFFFFFF, "bold", 0);  // Puedes ajustar el color según tus preferencias

        // Reiniciar las variables en cada tick (si es necesario)
        // ArqueroRED = null;
        // ArqueroBLUE = null;
DetenerAnuncio = true;

    }
}



function ReiniciarPuntosJugadores(player) {
    if (room.getScores().time > 0.1 && !ReiniciarStatsEnCero) {
    playerGoals = {};
    playerAssists = {};
    playerPoints = {};
ReiniciarStatsEnCero = true;

    }
}




function DetectorGK(player) {
    if (room.getScores().time >= 0.2) {
        // Obtener la lista de jugadores
        var players = room.getPlayerList();

        // Filtrar jugadores por equipo Rojo
        var redPlayers = players.filter(player => player.team === 1);

        // Filtrar jugadores por equipo Azul
        var bluePlayers = players.filter(player => player.team === 2);

        // Encontrar al jugador del equipo Rojo con la posición en X más baja
        ArqueroRED = redPlayers.reduce((minXPlayer, currentPlayer) => {
            return minXPlayer.position.x < currentPlayer.position.x ? minXPlayer : currentPlayer;
        }, redPlayers[0]);

        // Encontrar al jugador del equipo Azul con la posición en X más alta
        ArqueroBLUE = bluePlayers.reduce((maxXPlayer, currentPlayer) => {
            return maxXPlayer.position.x > currentPlayer.position.x ? maxXPlayer : currentPlayer;
        }, bluePlayers[0]);

        // Enviar el anuncio con la información sobre los arqueros
        var message = "🔴 🧤⚽ GK " + teamRed + ": " +(ArqueroRED ? ArqueroRED.name : "No tiene") + " ------- 🔵 🧤⚽ GK " + teamBlue + ": " + (ArqueroBLUE ? ArqueroBLUE.name : "No tiene");

    }
}


function GetTeam(id){
    return room.getPlayerList().filter((player) => player.id != 0 && player.team == id);
}

function CreatePlayer(player){
    ListaDeJugadores[ListaDeJugadores.length]={
	name:player.name,
	id:player.id,
	auth:undefined,
	conn:undefined,
	jointime:0
    };
}

function DeletePlayer(id){
    for(var i=0; i<ListaDeJugadores.length; i++){
	if(ListaDeJugadores[i].id==id){
	    ListaDeJugadores.splice(i,1);
	}
    }
}

function GetPlayer(id){
    for(var i=0; i<ListaDeJugadores.length; i++){
	if(ListaDeJugadores[i].id==id){
	    return ListaDeJugadores[i];
	}
    }
}

function GetIDByName(name){
    for(var i=0; i<ListaDeJugadores.length; i++){
	if(ListaDeJugadores[i].name==name){
	    return ListaDeJugadores[i].id;
	}
    }
}

function GetAuthByID(id){
    for(var i=0; i<ListaDeJugadores.length; i++){
	if(ListaDeJugadores[i].id==id){
	    return GetPlayer(ListaDeJugadores[i].id).auth;
	}
    }
}



function generar_respuesta_aleatoria(player) {
  // Lista de respuestas posibles
  var respuestas = [
    "Sí. 🗿",
    "Naa, ni en pedo flaco ❌",
    "Puede ser capo... ಠ_ಠ",
    "Obvio que sí, papá (ง︡'-'︠)ง",
    "Ni a palos, hermano ❎",
    "Capaz, ¿por qué no? 🤔",
    "Sin duda alguna rey 💯",
    "¡Por supuesto que sí! (ง︡'-'︠)ง",
    "Es probable 🤔",
    "No ❌",
    "Sin duda alguna, hermano 💯",
    "¡Ni en pedo, flaco! ❌",
    "Podría ser, no te aseguro nada capo 🤔",
    "Totalmente rey 💯",
    "No, olvidate ❎",
    "Ni en pedo, ni lo sueñes ❌",
    "Tristemente sí. ಥ_ಥ",
    "Tristemente no. ಥ_ಥ",
  ];

  // Selecciona una respuesta aleatoria de la lista
  var respuesta = respuestas[Math.floor(Math.random() * respuestas.length)];

  return respuesta;
}







function removeAccents(str) {
  const accents = "ÁÉÍÓÚáéíóú";
  const replacements = "AEIOUaeiou";
  const accentMap = new Map();

  for (let i = 0; i < accents.length; i++) {
    accentMap.set(accents[i], replacements[i]);
  }

  return str.replace(/[ÁÉÍÓÚáéíóú]/g, (character) => accentMap.get(character));
}

// Función para mezclar aleatoriamente los jugadores de los equipos
function shuffleTeams() {
  const players = room.getPlayerList();

  // Filtrar jugadores activos y asignar a los equipos
  const activePlayers = players.filter(player => !player.spectator);
  const team1Players = activePlayers.filter(player => player.team === 1);
  const team2Players = activePlayers.filter(player => player.team === 2);

  // Mezclar los jugadores de los equipos
  const shuffledPlayers = shuffleArray(team1Players.concat(team2Players));

  // Asignar los jugadores a los equipos de forma alternativa
  const totalPlayers = shuffledPlayers.length;
  const halfPlayers = Math.floor(totalPlayers / 2);

  for (let i = 0; i < totalPlayers; i++) {
    const player = shuffledPlayers[i];
    const team = (i < halfPlayers) ? 1 : 2;
    room.setPlayerTeam(player.id, team);
  }

  // Colocar los jugadores restantes como espectadores
  const remainingPlayers = players.filter(player => !activePlayers.includes(player));
  for (const player of remainingPlayers) {
    room.setPlayerTeam(player.id, 0); // 0 representa el equipo de espectadores
  }

  room.sendAnnouncement("¡Los equipos han sido mezclados de forma aleatoria!");
}

// Función para equilibrar los equipos
function balanceTeams() {
  const players = room.getPlayerList();

  // Filtrar jugadores activos y asignar a los equipos
  const activePlayers = players.filter(player => !player.spectator);
  const totalPlayers = activePlayers.length;

  // Calcular el número objetivo de jugadores en cada equipo
  const targetPlayersPerTeam = Math.floor(totalPlayers / 2);

  const team1Players = activePlayers.filter(player => player.team === 1);
  const team2Players = activePlayers.filter(player => player.team === 2);

  const diff = Math.abs(team1Players.length - team2Players.length);

  if (diff > 1) {
    // Realizar el equilibrio de equipos solo si hay una disparidad mayor a 1 jugador
    const playersToMove = Math.floor(diff / 2);

    if (team1Players.length > team2Players.length) {
      const playersToMoveFromTeam1 = team1Players.slice(-playersToMove);
      for (const player of playersToMoveFromTeam1) {
        room.setPlayerTeam(player.id, 2);
      }
    } else {
      const playersToMoveFromTeam2 = team2Players.slice(-playersToMove);
      for (const player of playersToMoveFromTeam2) {
        room.setPlayerTeam(player.id, 1);
      }
    }

    room.sendAnnouncement("¡Los equipos han sido equilibrados!");
  } else {
    room.sendAnnouncement("No es necesario equilibrar los equipos.");
  }
}


// Función para equilibrar los equipos de forma automática
function autoBalanceTeams() {
  if (!autoBalanceEnabled || autoBalancePaused) {
    return; // Salir si el equilibrio automático está desactivado o pausado
  }

  const players = room.getPlayerList();

  // Filtrar jugadores activos y asignar a los equipos
  const activePlayers = players.filter(player => !player.spectator);
  const totalPlayers = activePlayers.length;

  // Calcular el número objetivo de jugadores en cada equipo
  const targetPlayersPerTeam = Math.floor(totalPlayers / 2);

  const team1Players = activePlayers.filter(player => player.team === 1);
  const team2Players = activePlayers.filter(player => player.team === 2);

  const diff = Math.abs(team1Players.length - team2Players.length);

  if (diff > 1) {
    // Realizar el equilibrio de equipos solo si hay una disparidad mayor a 1 jugador
    const playersToMove = Math.floor(diff / 2);

    if (team1Players.length > team2Players.length) {
      const playersToMoveFromTeam1 = team1Players.slice(-playersToMove);
      for (const player of playersToMoveFromTeam1) {
        room.setPlayerTeam(player.id, 2);
      }
    } else {
      const playersToMoveFromTeam2 = team2Players.slice(-playersToMove);
      for (const player of playersToMoveFromTeam2) {
        room.setPlayerTeam(player.id, 1);
      }
    }

	room.sendAnnouncement("¡Los equipos han sido equilibrados automáticamente! 🔄⚖️", null, 0x00ff00, "bold", 0);

  }
}




function sendAnnouncementInChat(message, targetId, color, style, sound) {
  room.sendAnnouncement(message, targetId, color, style, sound);
}



function getRankEmoji(rank) {
const rankEmojis = ["🥇", "🥈", "🥉", "4️⃣", "5️⃣", "6️⃣", "7️⃣", "8️⃣", "9️⃣", "1️⃣0️⃣",
  "1️⃣1️⃣", "1️⃣2️⃣", "1️⃣3️⃣", "1️⃣4️⃣", "1️⃣5️⃣", "1️⃣6️⃣", "1️⃣7️⃣", "1️⃣8️⃣", "1️⃣9️⃣", "2️⃣0️⃣",
  "2️⃣1️⃣", "2️⃣2️⃣", "2️⃣3️⃣", "2️⃣4️⃣", "2️⃣5️⃣", "2️⃣6️⃣", "2️⃣7️⃣", "2️⃣8️⃣", "2️⃣9️⃣", "3️⃣0️⃣",
  "3️⃣1️⃣", "3️⃣2️⃣", "3️⃣3️⃣", "3️⃣4️⃣", "3️⃣5️⃣", "3️⃣6️⃣", "3️⃣7️⃣", "3️⃣8️⃣", "3️⃣9️⃣", "4️⃣0️⃣",
  "4️⃣1️⃣", "4️⃣2️⃣", "4️⃣3️⃣", "4️⃣4️⃣", "4️⃣5️⃣", "4️⃣6️⃣", "4️⃣7️⃣", "4️⃣8️⃣", "4️⃣9️⃣", "5️⃣0️⃣",
  "5️⃣1️⃣", "5️⃣2️⃣", "5️⃣3️⃣", "5️⃣4️⃣", "5️⃣5️⃣", "5️⃣6️⃣", "5️⃣7️⃣", "5️⃣8️⃣", "5️⃣9️⃣", "6️⃣0️⃣",
  "6️⃣1️⃣", "6️⃣2️⃣", "6️⃣3️⃣", "6️⃣4️⃣", "6️⃣5️⃣", "6️⃣6️⃣", "6️⃣7️⃣", "6️⃣8️⃣", "6️⃣9️⃣", "7️⃣0️⃣",
  "7️⃣1️⃣", "7️⃣2️⃣", "7️⃣3️⃣", "7️⃣4️⃣", "7️⃣5️⃣", "7️⃣6️⃣", "7️⃣7️⃣", "7️⃣8️⃣", "7️⃣9️⃣", "8️⃣0️⃣",
  "8️⃣1️⃣", "8️⃣2️⃣", "8️⃣3️⃣", "8️⃣4️⃣", "8️⃣5️⃣", "8️⃣6️⃣", "8️⃣7️⃣", "8️⃣8️⃣", "8️⃣9️⃣", "9️⃣0️⃣",
  "9️⃣1️⃣", "9️⃣2️⃣", "9️⃣3️⃣", "9️⃣4️⃣", "9️⃣5️⃣", "9️⃣6️⃣", "9️⃣7️⃣", "9️⃣8️⃣", "9️⃣9️⃣", "1️⃣0️⃣0️⃣", "1️⃣0️⃣1️⃣", "1️⃣0️⃣2️⃣", "1️⃣0️⃣3️⃣", "1️⃣0️⃣4️⃣", "1️⃣0️⃣5️⃣", "1️⃣0️⃣6️⃣", "1️⃣0️⃣7️⃣", "1️⃣0️⃣8️⃣", "1️⃣0️⃣9️⃣",
  "1️⃣1️⃣0️⃣", "1️⃣1️⃣1️⃣", "1️⃣1️⃣2️⃣", "1️⃣1️⃣3️⃣", "1️⃣1️⃣4️⃣", "1️⃣1️⃣5️⃣", "1️⃣1️⃣6️⃣", "1️⃣1️⃣7️⃣", "1️⃣1️⃣8️⃣", "1️⃣1️⃣9️⃣",
  "1️⃣2️⃣0️⃣", "1️⃣2️⃣1️⃣", "1️⃣2️⃣2️⃣", "1️⃣2️⃣3️⃣", "1️⃣2️⃣4️⃣", "1️⃣2️⃣5️⃣", "1️⃣2️⃣6️⃣", "1️⃣2️⃣7️⃣", "1️⃣2️⃣8️⃣", "1️⃣2️⃣9️⃣",
  "1️⃣3️⃣0️⃣", "1️⃣3️⃣1️⃣", "1️⃣3️⃣2️⃣", "1️⃣3️⃣3️⃣", "1️⃣3️⃣4️⃣", "1️⃣3️⃣5️⃣", "1️⃣3️⃣6️⃣", "1️⃣3️⃣7️⃣", "1️⃣3️⃣8️⃣", "1️⃣3️⃣9️⃣",
  "1️⃣4️⃣0️⃣", "1️⃣4️⃣1️⃣", "1️⃣4️⃣2️⃣", "1️⃣4️⃣3️⃣", "1️⃣4️⃣4️⃣", "1️⃣4️⃣5️⃣", "1️⃣4️⃣6️⃣", "1️⃣4️⃣7️⃣", "1️⃣4️⃣8️⃣", "1️⃣4️⃣9️⃣",
  "1️⃣5️⃣0️⃣", "1️⃣5️⃣1️⃣", "1️⃣5️⃣2️⃣", "1️⃣5️⃣3️⃣", "1️⃣5️⃣4️⃣", "1️⃣5️⃣5️⃣", "1️⃣5️⃣6️⃣", "1️⃣5️⃣7️⃣", "1️⃣5️⃣8️⃣", "1️⃣5️⃣9️⃣",
  "1️⃣6️⃣0️⃣", "1️⃣6️⃣1️⃣", "1️⃣6️⃣2️⃣", "1️⃣6️⃣3️⃣", "1️⃣6️⃣4️⃣", "1️⃣6️⃣5️⃣", "1️⃣6️⃣6️⃣", "1️⃣6️⃣7️⃣", "1️⃣6️⃣8️⃣", "1️⃣6️⃣9️⃣",
  "1️⃣7️⃣0️⃣", "1️⃣7️⃣1️⃣", "1️⃣7️⃣2️⃣", "1️⃣7️⃣3️⃣", "1️⃣7️⃣4️⃣", "1️⃣7️⃣5️⃣", "1️⃣7️⃣6️⃣", "1️⃣7️⃣7️⃣", "1️⃣7️⃣8️⃣", "1️⃣7️⃣9️⃣",
  "1️⃣8️⃣0️⃣", "1️⃣8️⃣1️⃣", "1️⃣8️⃣2️⃣", "1️⃣8️⃣3️⃣", "1️⃣8️⃣4️⃣", "1️⃣8️⃣5️⃣", "1️⃣8️⃣6️⃣", "1️⃣8️⃣7️⃣", "1️⃣8️⃣8️⃣", "1️⃣8️⃣9️⃣",
  "1️⃣9️⃣0️⃣", "1️⃣9️⃣1️⃣", "1️⃣9️⃣2️⃣", "1️⃣9️⃣3️⃣", "1️⃣9️⃣4️⃣", "1️⃣9️⃣5️⃣", "1️⃣9️⃣6️⃣", "1️⃣9️⃣7️⃣", "1️⃣9️⃣8️⃣", "1️⃣9️⃣9️⃣",
  "2️⃣0️⃣0️⃣"];

return rank < rankEmojis.length ? rankEmojis[rank] : rankEmojis[3];
}

// Función para obtener emojis numéricos
function getNumericEmoji(number) {
  const numericEmojis = ["0️⃣", "1️⃣", "2️⃣", "3️⃣", "4️⃣", "5️⃣", "6️⃣", "7️⃣", "8️⃣", "9️⃣"];
  return number
    .toString()
    .split("")
    .map((digit) => numericEmojis[parseInt(digit)])
    .join("");
}


// Variables globales para la votación de administrador
let adminVotingActive = false;
let adminVotes = {};

// Variables globales para la votación de expulsión
let kickVotingActive = false;
let kickVotes = {};

// Cantidad mínima de jugadores para iniciar una votación de administrador
const MIN_PLAYERS_FOR_ADMIN_VOTE = 5;

// Cantidad mínima de jugadores para iniciar una votación de expulsión
const MIN_PLAYERS_FOR_KICK_VOTE = 5;

// Duración en segundos para ambas votaciones
const DURACION_VOTACION = 120;


function getLevelInfo(points) {
  if (points >= 0 && points < 0.7) {
    return { level: "Noob 😅 (Nivel 1)", nextPoints: 0.7 - points, nextLevel: "Amateur 🎮 (Nivel 2)" };
  } else if (points >= 0.7 && points < 1) {
    return { level: "Amateur 🎮 (Nivel 2)", nextPoints: 1 - points, nextLevel: "Aficionado ⚽️ (Nivel 3)" };
  } else if (points >= 1 && points < 2) {
    return { level: "Aficionado ⚽️ (Nivel 3)", nextPoints: 2 - points, nextLevel: "Promesa 🌱 (Nivel 4)" };
  } else if (points >= 2 && points < 3) {
    return { level: "Promesa 🌱 (Nivel 4)", nextPoints: 3 - points, nextLevel: "Avanzado 🚀 (Nivel 5)" };
  } else if (points >= 3 && points < 4) {
    return { level: "Avanzado 🚀 (Nivel 5)", nextPoints: 4 - points, nextLevel: "Experto 🧠 (Nivel 6)" };
  } else if (points >= 4 && points < 5) {
    return { level: "Experto 🧠 (Nivel 6)", nextPoints: 5 - points, nextLevel: "Profesional 🎯 (Nivel 7)" };
  } else if (points >= 5 && points < 10) {
    return { level: "Profesional 🎯 (Nivel 7)", nextPoints: 10 - points, nextLevel: "Estrella ⭐ (Nivel 8)" };
  } else if (points >= 10 && points < 20) {
    return { level: "Estrella ⭐ (Nivel 8)", nextPoints: 20 - points, nextLevel: "Distinto 👽 (Nivel 9)" };
  } else if (points >= 20 && points < 30) {
    return { level: "Distinto 👽 (Nivel 9)", nextPoints: 30 - points, nextLevel: "Maestro 🎓 (Nivel 10)" };
  } else if (points >= 30 && points < 40) {
    return { level: "Maestro 🎓 (Nivel 10)", nextPoints: 40 - points, nextLevel: "Sobrenatural 🌌 (Nivel 11)" };
  } else if (points >= 40 && points < 50) {
    return { level: "Sobrenatural 🌌 (Nivel 11)", nextPoints: 50 - points, nextLevel: "Crack 💥 (Nivel 12)" };
  } else if (points >= 50 && points < 60) {
    return { level: "Crack 💥 (Nivel 12)", nextPoints: 60 - points, nextLevel: "Figura Máxima 👑 (Nivel 13)" };
  } else if (points >= 60 && points < 70) {
    return { level: "Figura Máxima 👑 (Nivel 13)", nextPoints: 70 - points, nextLevel: "Elite 💎 (Nivel 14)" };
  } else if (points >= 70 && points < 80) {
    return { level: "Elite 💎 (Nivel 14)", nextPoints: 80 - points, nextLevel: "Invencible 🛡️ (Nivel 15)" };
  } else if (points >= 80 && points < 90) {
    return { level: "Invencible 🛡️ (Nivel 15)", nextPoints: 90 - points, nextLevel: "Prodigio 🌟 (Nivel 16)" };
  } else if (points >= 90 && points < 95) {
    return { level: "Prodigio 🌟 (Nivel 16)", nextPoints: 95 - points, nextLevel: "Leyenda 🏆 (Nivel 17)" };
  } else if (points >= 95 && points < 100) {
    return { level: "Leyenda 🏆 (Nivel 17)", nextPoints: 100 - points, nextLevel: "Legendario 🐉 Bronce (Nivel 18)" };
  } else if (points >= 100 && points < 110) {
    return { level: "Legendario 🐉 Bronce (Nivel 18) 🥉", nextPoints: 110 - points, nextLevel: "Legendario 🐉 Plata (Nivel 19) 🥈" };
  } else if (points >= 110 && points < 120) {
    return { level: "Legendario 🐉 Plata (Nivel 19) 🥈", nextPoints: 120 - points, nextLevel: "Legendario 🐉 Oro (Nivel 20) 🥇" };
  } else if (points >= 120 && points < 130) {
    return { level: "Legendario 🐉 Oro (Nivel 20) 🥇", nextPoints: 130 - points, nextLevel: "Legendario 🐉 Zafiro (Nivel 21) 🔷" };
  } else if (points >= 130 && points < 140) {
    return { level: "Legendario 🐉 Zafiro (Nivel 21) 🔷", nextPoints: 140 - points, nextLevel: "Legendario 🐉 Rubí (Nivel 22) 🔴" };
  } else if (points >= 140 && points < 150) {
    return { level: "Legendario 🐉 Rubí (Nivel 22) 🔴", nextPoints: 150 - points, nextLevel: "Legendario 🐉 Esmeralda (Nivel 23) 🟢" };
  } else if (points >= 150 && points < 160) {
    return { level: "Legendario 🐉 Esmeralda (Nivel 23) 🟢", nextPoints: 160 - points, nextLevel: "Legendario 🐉 Amatista (Nivel 24) 🟣" };
  } else if (points >= 160 && points < 170) {
    return { level: "Legendario 🐉 Amatista (Nivel 24) 🟣", nextPoints: 170 - points, nextLevel: "Legendario 🐉 Perla (Nivel 25) ⚪" };
  } else if (points >= 170 && points < 180) {
    return { level: "Legendario 🐉 Perla (Nivel 25) ⚪", nextPoints: 180 - points, nextLevel: "Legendario 🐉 Obsidiana (Nivel 26) ⚫" };
  } else if (points >= 180 && points < 190) {
    return { level: "Legendario 🐉 Obsidiana (Nivel 26) ⚫", nextPoints: 190 - points, nextLevel: "Legendario 🐉 Diamante (Nivel 27) 💎" };
  } else {
    return { level: "Legendario 🐉 Diamante (Nivel 27) 💎", nextPoints: 0, nextLevel: null };
  }
}








var AnuncioGolDeOro = false;


// Objeto para almacenar estadísticas de victorias, empates, derrotas y partidos jugados
let playerStats = {};

// Función para obtener el mensaje de los últimos 10 partidos con el resultado más reciente primero
function getLastGamesMessage(playerName) {
    const lastGames = getLastGames(playerName);
    const reversedLastGames = lastGames.reverse(); // Invertir el orden de los últimos juegos
    const lastGamesMessage = `📊 Historial (Últimos 10 Partidos): ${reversedLastGames.map(getResultEmoji).join('')}`;
    return lastGamesMessage;
}

// Función para obtener los resultados de los últimos 10 partidos con el resultado más reciente primero
function getLastGames(playerName) {
    if (!playerStats[playerName] || !playerStats[playerName].gameResults) {
        return [];
    }

    const gameResults = playerStats[playerName].gameResults;
    const startIndex = Math.max(0, gameResults.length - 10);
    const lastGames = gameResults.slice(startIndex);
    return lastGames;
}

// Función para obtener el emoji correspondiente a cada resultado (victoria, empate, derrota)
function getResultEmoji(result) {
    if (result === 'victory') {
        return '✅';
    } else if (result === 'draw') {
        return '➖';
    } else if (result === 'defeat') {
        return '❌';
    }
    return '';
}

// Función para actualizar estadísticas después de cada juego
function updatePlayerStats(playerName, result) {
    if (!playerStats[playerName]) {
        playerStats[playerName] = { 
            victories: 0, 
            draws: 0, 
            defeats: 0, 
            totalGames: 0, 
            currentStreak: 0, 
            highestStreak: 0, 
            gameResults: [] 
        };
    }

    playerStats[playerName].totalGames++;

    if (result === 'victory') {
        playerStats[playerName].victories++;
        playerStats[playerName].currentStreak++;
        playerStats[playerName].highestStreak = Math.max(playerStats[playerName].highestStreak, playerStats[playerName].currentStreak);
    } else if (result === 'draw') {
        playerStats[playerName].draws++;
        playerStats[playerName].currentStreak = 0; // Reiniciar la racha en caso de empate
    } else if (result === 'defeat') {
        playerStats[playerName].defeats++;
        playerStats[playerName].currentStreak = 0; // Reiniciar la racha en caso de derrota
    }

    // Asegurarse de que gameResults sea un array
    if (!Array.isArray(playerStats[playerName].gameResults)) {
        playerStats[playerName].gameResults = [];
    }

    playerStats[playerName].gameResults.push(result);

    // Asegurarse de que highestStreak y currentStreak no sean undefined
    playerStats[playerName].highestStreak = playerStats[playerName].highestStreak || 0;
    playerStats[playerName].currentStreak = playerStats[playerName].currentStreak || 0;
    // Almacenar estadísticas en localStorage
    localStorage.setItem(playerName, JSON.stringify(playerStats[playerName]));


}




// Función para llamar a los admins
function llamarAdmins(playerName, motivo) {
    const mensaje = `# 🚨 LLAMARON A LOS ADMINS 🚨\n## El jugador ${playerName} está llamando a los administradores del host.   ||<@&${RolAdminHost}> ||\n# 🔗 LINK DEL HOST: ${roomLink}\n# 🔑 CLAVE PARA SER ADMINISTRADOR: ||${ClaveParaSerAdmin}|| \n# 📑 MOTIVO: ${motivo}`;

    const webhook = new XMLHttpRequest();
    webhook.open('POST', WebhookParaLlamarAdmins);

    const formData = new FormData();
    formData.append('content', mensaje);

    webhook.send(formData);
}


// Constants
const MIN_PLAYERS_FOR_MAP_VOTE = 3;
const MAP_VOTE_DURATION = 60; // en segundos

// Variables para la votación de mapas
let mapVotes = {};
let mapVotingActive = false;

// Función para iniciar la votación de mapas
function startMapVoting() {
  const totalPlayers = room.getPlayerList().length;
  const votesNeeded = Math.floor(totalPlayers / 2) + 1;

  if (!mapVotingActive && totalPlayers >= MIN_PLAYERS_FOR_MAP_VOTE) {
    mapVotingActive = true;
    mapVotes = {};

    setTimeout(function () {
      endMapVoting();
    }, MAP_VOTE_DURATION * 1000);

    room.sendAnnouncement(`🗳️ 🔄 ¡LA VOTACIÓN PARA CAMBIAR DE MAPA HA COMENZADO! Escribe "!votarmapa nombre_del_mapa" para votar por un mapa. Se necesitan al menos ${votesNeeded} votos para finalizar la votación. 🏟️✅`, null, 0xFFA359, "bold", 2);
  }
}

// Función para finalizar la votación de mapas y aplicar el mapa seleccionado
function endMapVoting() {
  if (mapVotingActive) {
    mapVotingActive = false;

    let maxVotes = 0;
    let winningMap = null;

    for (const votedMap in mapVotes) {
      const voteCount = mapVotes[votedMap].length;
      if (voteCount > maxVotes) {
        maxVotes = voteCount;
        winningMap = votedMap;
      }
    }

    if (winningMap !== null && isMajorityVote(maxVotes, room.getPlayerList().length)) {
      applyMapConfiguration(winningMap);
      room.sendAnnouncement(`¡La Votación de Mapa ha llegado a su Fin! 🗳️ | 🌟 ¡Gracias a todos por participar! ${getVoteResultsString()} 🎉`, null, 0xffe32b, "bold", 0);
    } else {
      room.sendAnnouncement('La votación no ha tenido éxito. No se ha seleccionado un mapa mayoritario. ❌🗳️', null, 0xff4d4d, "bold", 0);
    }
  }
}



// Función para aplicar la configuración del mapa ganador
async function applyMapConfiguration(winningMap, message) {
  if (winningMap === 'rs' || winningMap === 'entrenamiento' || winningMap === 'rsoveja' || winningMap === 'pensred' || winningMap === 'pensblue') {
    room.stopGame();

  // Verificar si el mapa más votado tiene más de la mitad de los votos
  if (isMajorityVote(mapVotes[winningMap].length, room.getPlayerList().length)) {
    // Esperar 500 milisegundos antes de cambiar la configuración
    await new Promise(resolve => setTimeout(resolve, 300));

    if (winningMap === 'rs') {
				currentMap = getMapName(message); 
				room.setCustomStadium(getRealSoccerMap2());
				RSRMap = true;

			room.setScoreLimit(0);
			room.setTimeLimit(0);	
    } else if (winningMap === 'entrenamiento') {
				currentMap = getMapName(message); 
				room.setCustomStadium(getEntrenamientoRealSoccer());
				RSRMap = true;
    }

 else if (winningMap === 'rsoveja') {
				currentMap = getMapName(message); 
				room.setCustomStadium(getRealSoccerMapOveja());
				RSRMap = true;

			room.setScoreLimit(0);
			room.setTimeLimit(0);
    }
 else if (winningMap === 'pensred') {
				RSRMap = false;
isAFKpaused = true;
				currentMap = getMapName(message); 
				room.setCustomStadium(getPenaltyRedMap());
			room.setScoreLimit(0);
			room.setTimeLimit(0);
			powerShotMode = false;	
    }
 else if (winningMap === 'pensblue') {
				RSRMap = false;
isAFKpaused = true;
				currentMap = getMapName(message); 
				room.setCustomStadium(getPenaltyBlueMap());
			room.setScoreLimit(0);
			room.setTimeLimit(0);	
			powerShotMode = false;	
    }

 else if (winningMap === 'campeones') {
				RSRMap = false;
isAFKpaused = true;
				currentMap = getMapName(message); 
				room.setCustomStadium(getCampeonesMap());
		room.setScoreLimit(0);
		room.setTimeLimit(0);	
    }

    // Esperar 500 milisegundos antes de iniciar el juego
    await new Promise(resolve => setTimeout(resolve, 300));

    room.startGame();
  } else {
    room.sendAnnouncement(`El mapa "${winningMap}" no ha obtenido más de la mitad de los votos. No se realizarán cambios. 🚫`, null, 0xff2b52, "bold", 0);
  }
}
}

// Función para verificar si un número es mayoritario respecto al total
function isMajorityVote(votes, totalPlayers) {
  return votes > Math.floor(totalPlayers / 2);
}


// Función para obtener una cadena de resultados de votación
function getVoteResultsString() {
  let resultsString = ''; // Eliminado 'Resultados: '
  for (const votedMap in mapVotes) {
    resultsString += `"${votedMap}": ${mapVotes[votedMap].length} votos, `;
  }
  return resultsString.slice(0, -2); // Elimina la coma y el espacio al final
}



// Función para enviar mensajes del chat como embeds al Discord
function sendChatToDiscord(player, message) {
    // Colores según el tipo de jugador
    var color = 0xf0f6ff; // Por defecto (espectadores)
    if (player.admin) {
        color = 0xFFD700; // Administradores
    } else if (player.team === 1) {
        color = 0xff8e8e; // Equipo rojo
    } else if (player.team === 2) {
        color = 0x8eb1ff; // Equipo azul
    }
    // Filtrar mensajes que contienen "@" "#", o "*"
    if (!/[@#*]/.test(message) && !/[#@*]/.test(player.name) && !message.includes(ClaveParaSerAdmin)) {
        const embed = {
            embeds: [
                {
                    author: {
                        name: NombreHost,
                        icon_url: player.avatar, // Puedes agregar la URL del avatar del jugador aquí
                    },
                    description: `**${player.name}:** ${message}`,
                    color: color, // Puedes cambiar el color según tus preferencias
                    timestamp: new Date().toISOString(),
                },
            ],
        };

        const requestOptions = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(embed),
        };

        fetch(webhookMensajesJugadores, requestOptions);
    }
}


  // LLAMAR ADMINS WEBHOOK
var ultimaLlamadaAdmins = 0;
var TiempoEsperaEnMilisegundos = tiempoEsperaAdminsEnMinutos * 60 * 1000;


var ofiHabilitado = false;
// Variable para almacenar los jugadores que han firmado
var jugadoresFirmados = [];




var usedValues = {}; // Objeto para almacenar los valores asignados a los jugadores
var lastCommandUse = {}; // Objeto para almacenar la última vez que cada jugador usó el comando
var cooldown = 15 * 1000; // Cooldown de 15 segundos (60000 ms)

var comentarios = {
    micropene: [
        "¡Es más fácil encontrar a Wally que eso!",
        "¡Ese tiene que ser el Minion más pequeño que existe!",
        "¡Eso no es un pito, es un error de la fábrica!",
        "¿Necesitas pinzas para manejar eso?",
        "¡Es tan chiquito que ni el Viagra lo encuentra!",
        "¡Eso es más chico que la autoestima de un cornudo!",
        "¡Necesitás un microscopio para ver esa mierda!",
        "¡Parece que la madre naturaleza se quedó sin material!",
        "¡Eres la definición viviente de 'chiquito pero peligroso'!"
    ],
    debajoPromedio: [
        "¡Tranquilo! No todos pueden ser estrellas porno.",
        "¡A veces menos es más... o eso dicen!",
        "¡La compensación viene en otras áreas, amigo!",
        "¡No te preocupes, el carisma lo es todo!",
        "¡Vos te bajás los pantalones y sube la autoestima de todos!",
        "¡Con eso no hacés ni cosquillas!",
        "¡Eso es tan chico que ni para mear bien sirve!"


    ],
    promedio: [
        "¡Ni muy grande ni muy pequeño, perfecto para cualquier agujero!",
        "¡Eres el término medio, el equilibrio perfecto!",
    "¡Lo importante es cómo lo usas, dicen por ahí!",
    "¡No es el tamaño, es cómo lo mueves!",
        "¡Lo justo para no pasar vergüenza, pero tampoco para presumir!",
        "¡Cumplís, pero sin pena ni gloria!"

    ],
    encimaPromedio: [
        "¡Tenés un misil entre las piernas!",
        "¡El tamaño sí importa, y lo sabes!",
        "¡Te bajás los pantalones y aplauden!",
        "¡Con eso podés asustar hasta a King Kong!",
        "¡Tremenda anaconda tenes ahí!",
        "¡Te bajás los pantalones y parece una película porno!",
        "¡Con esa cosa puedes hacer feliz a varias de una vez!",
        "¡Cuidado, que eso podría necesitar un permiso de armas!"
    ],
    grande: [
        "¡Con eso hasta los caballos te respetan!",
        "¡Con eso podés colgar la ropa de toda la cuadra!",
        "¡Eso sí que es un 'paquete' de verdad!",
        "¡Eres el orgullo del Host!",
        "¡Con eso puedes hacer sombras en un día soleado!",
        "¡Eso podría causar un eclipse solar!",
        "¡Eso no es un pene, es un arma de destrucción masiva!"

    ]
};

function obtenerComentario(valor) {
    if (valor >= 1 && valor <= 7) {
        return comentarios.micropene[Math.floor(Math.random() * comentarios.micropene.length)];
    } else if (valor > 7 && valor <= 12) {
        return comentarios.debajoPromedio[Math.floor(Math.random() * comentarios.debajoPromedio.length)];
    } else if (valor > 12 && valor <= 16) {
        return comentarios.promedio[Math.floor(Math.random() * comentarios.promedio.length)];
    } else if (valor > 16 && valor <= 20) {
        return comentarios.encimaPromedio[Math.floor(Math.random() * comentarios.encimaPromedio.length)];
    } else {
        return comentarios.grande[Math.floor(Math.random() * comentarios.grande.length)];
    }
}

// Función para enviar mensajes de equipo
function sendTeamMessage(player, teamMsg) {
    const teamColor = player.team == 1 ? RedTeamChatColor : BlueTeamChatColor;
    const teamIcon = player.team == 1 ? '🔴' : '🔵';
    const teamPlayers = room.getPlayerList().filter(p => p.team == player.team);
    
    teamPlayers.forEach(p => {
        room.sendAnnouncement(`[TEAM CHAT ${teamIcon}] ${player.name}: ${teamMsg}`, p.id, teamColor, "bold", 2);
    });
}


// Obtener jugadores mencionados
function getMentionedPlayers(message) {
    return message.split(' ').reduce((mentioned, word) => {
        if (word.startsWith('@')) {
            const playerName = word.substring(1).replace(/_/g, ' ');
            const player = room.getPlayerList().find(p => p.name.toLowerCase() === playerName.toLowerCase());
            if (player) mentioned.push(player);
        }
        return mentioned;
    }, []);
}





// Función para obtener el prefijo según la configuración
function getPlayerPrefix(player) {
    const option = ColocarJuntoAlNickname.toLowerCase(); // Convertir a minúsculas

    if (option === "nivel") {
        // Obtener puntos y nivel
        const goals = totalPlayerGoals[player.name] || 0;
        const assists = totalPlayerAssists[player.name] || 0;
        const totalPoints = goals + (assists * 0.7);
        const levelInfo = getLevelInfo(totalPoints);

        return `«${levelInfo.level}»`;
    } else if (option === "id") {
        return `« 🆔: ${player.id} »`;
    } else {
        // Valor por defecto si no coincide con "nivel" ni "id"
        return ``;
    }
}


// Enviar mensaje a jugadores mencionados
function sendMentionedMessage(player, message, mentionedPlayers, color, roleName) {
    const prefix = getPlayerPrefix(player);
    mentionedPlayers.forEach(mentionedPlayer => {
        room.sendAnnouncement(
            `${prefix} ${roleName} ~ ${player.name}: ${message}`,
            mentionedPlayer.id,
            color,
            "bold",
            2
        );
    });
}

// Enviar mensaje al resto de los jugadores
function sendMessageToOthers(player, message, mentionedPlayers, color, roleName) {
    const prefix = getPlayerPrefix(player);
    room.getPlayerList().forEach(p => {
        if (!mentionedPlayers.includes(p)) {
            const roleAttr = RoleAttributes[roleName] || { style: "normal", sound: 1 };
            room.sendAnnouncement(
                `${prefix} ${roleName} ~ ${player.name}: ${message}`,
                p.id,
                color,
                roleAttr.style,
                roleAttr.sound
            );
        }
    });
}

// Manejar menciones especiales (@everyone, @here)
function handleMentions(player, message, color, roleName, isAdmin) {
    const prefix = getPlayerPrefix(player);
    const allPlayers = room.getPlayerList();

    if (message.toLowerCase().includes('@everyone') && isAdmin) {
        allPlayers.forEach(p => {
            room.sendAnnouncement(
                `${prefix} ${roleName} ~ ${player.name}: ${message}`,
                p.id,
                color,
                "bold",
                2
            );
        });
        return false;
    }

    if (message.toLowerCase().includes('@here') && isAdmin) {
        allPlayers.forEach(p => {
            const isAFK = afkPlayerIDs.has(p.id);
            room.sendAnnouncement(
                `${prefix} ${roleName} ~ ${player.name}: ${message}`,
                p.id,
                color,
                isAFK ? "normal" : "bold",
                isAFK ? 1 : 2
            );
        });
        return false;
    }
    return true;
}

// Función para gestionar mensajes de cooldown
function handleCooldown(player) {
    if (!cooldownEnabled) {
        return true;
    }

    const now = Date.now();

    // Si el jugador es administrador, no aplicar cooldown
    if (player.admin) {
        return true;
    }

    // Inicializar el registro de tiempos de mensajes y cooldowns para el jugador
    if (!messageTimestamps[player.id]) {
        messageTimestamps[player.id] = [];
    }

    // Limpiar los mensajes viejos
    messageTimestamps[player.id] = messageTimestamps[player.id].filter(timestamp => now - timestamp < MESSAGE_COOLDOWN);

    // Añadir la nueva marca de tiempo
    messageTimestamps[player.id].push(now);

    // Si el jugador está en cooldown, enviar un mensaje y salir
    if (playerCooldowns[player.id] && now < playerCooldowns[player.id]) {
        whisper(`[⚠️] Estás escribiendo demasiado rápido. Espera unos segundos antes de enviar otro mensaje.`, player.id);
        return false;
    }

    // Si el jugador ha enviado demasiados mensajes, activar el cooldown y registrar advertencia
    if (messageTimestamps[player.id].length > SPAM_LIMIT) {
        playerCooldowns[player.id] = now + COOLDOWN_TIME;
        spamWarnings[player.id] = (spamWarnings[player.id] || 0) + 1;

        if (spamWarnings[player.id] >= KICK_THRESHOLD) {
            room.kickPlayer(player.id, "Has sido expulsado por spam.", false);
            return false;
        } else {
            whisper(`[⚠️] Has enviado demasiados mensajes rápidamente. Estás en cooldown por ${COOLDOWN_TIME / 1000} segundos. Advertencia ${spamWarnings[player.id]} de ${KICK_THRESHOLD}.`, player.id);
        }

        return false;
    }

    return true;
}

// Función para manejar comandos administrativos
function handleAdminCommand(player, message) {
    const [command, ...args] = message.toLowerCase().split(" ");

    switch(command) {
        case "!spam_limit":
            if (args.length === 1 && !isNaN(args[0])) {
                SPAM_LIMIT = parseInt(args[0], 10);
                room.sendAnnouncement(`[INFO] ${player.name} ha actualizado SPAM_LIMIT a ${SPAM_LIMIT}`, null, adminChatColor, "bold", 1);
            } else {
                room.sendAnnouncement(`[ERROR] Uso: !SPAM_LIMIT <Cantidad de Mensajes>`, player.id, adminChatColor, "bold", 1);
            }
            return false;
        case "!cooldown_time":
            if (args.length === 1 && !isNaN(args[0])) {
                COOLDOWN_TIME = parseInt(args[0], 10) * 1000; // Convertir segundos a milisegundos
                room.sendAnnouncement(`[INFO] ${player.name} ha actualizado COOLDOWN_TIME a ${COOLDOWN_TIME / 1000} segundos`, null, adminChatColor, "bold", 1);
            } else {
                room.sendAnnouncement(`[ERROR] Uso: !COOLDOWN_TIME <Cantidad de Segundos>`, player.id, adminChatColor, "bold", 1);
            }
            return false;
        case "!toggle_cooldown":
            cooldownEnabled = !cooldownEnabled;
            room.sendAnnouncement(`[INFO] ${player.name} ha ${cooldownEnabled ? "habilitado" : "deshabilitado"} el cooldown`, null, adminChatColor, "bold", 1);
            return false;
        case "!kick_threshold":
            if (args.length === 1 && !isNaN(args[0])) {
                KICK_THRESHOLD = parseInt(args[0], 10);
                room.sendAnnouncement(`[INFO] ${player.name} ha actualizado KICK_THRESHOLD a ${KICK_THRESHOLD}`, null, adminChatColor, "bold", 1);
            } else {
                room.sendAnnouncement(`[ERROR] Uso: !KICK_THRESHOLD <Número de Advertencias>`, player.id, adminChatColor, "bold", 1);
            }
            return false;
        default:
            return true;
    }
}

function isCooldown(player, command) {
  const now = Date.now();
  if (!cooldowns[player.name]) {
    cooldowns[player.name] = {};
  }

  if (!cooldowns[player.name][command] || now - cooldowns[player.name][command] > COOLDOWN_TIEMPO) {
    cooldowns[player.name][command] = now;
    return false;
  }

  return true;
}



function obtenerCamiseta(equipoClave) {
    let equipo = camisetasEquipos[equipoClave];
    if (!equipo) {
        room.sendAnnouncement(`[❌] Equipo no encontrado: ${equipoClave}`, null, 0xFF0000, "bold", 2);
        return null;
    }

    let datos = parseColors(equipo.codigo);
    
    // Actualizamos las variables globales
    if (equipoClave.includes("red")) {
        redAngle = datos.angle;
        redTextColor = datos.textColor;
        redColor = datos.colors;
        teamRed = equipo.nombreEquipo;
    } else if (equipoClave.includes("blue")) {
        blueAngle = datos.angle;
        blueTextColor = datos.textColor;
        blueColor = datos.colors;
        teamBlue = equipo.nombreEquipo;
    }

    return {
        angle: datos.angle,
        textColor: datos.textColor,
        colors: datos.colors,
        nombreEquipo: equipo.nombreEquipo
    };
}


function asignarCamisetaPorClave(equipoClave) {
    let equipo = obtenerCamiseta(equipoClave);

    if (!equipo) return;

    if (equipoClave.endsWith("/red")) {
        room.setTeamColors(1, equipo.angle, equipo.textColor, equipo.colors);
        teamRed = equipo.nombreEquipo;
        room.sendAnnouncement(`[✅] Camiseta asignada al equipo rojo: ${teamRed}`, null, 0x00FF00, "bold", 2);
    } else if (equipoClave.endsWith("/blue")) {
        room.setTeamColors(2, equipo.angle, equipo.textColor, equipo.colors);
        teamBlue = equipo.nombreEquipo;
        room.sendAnnouncement(`[✅] Camiseta asignada al equipo azul: ${teamBlue}`, null, 0x00FF00, "bold", 2);
    } else {
        room.sendAnnouncement(`[❌] No se pudo determinar el equipo para la camiseta: ${equipoClave}`, null, 0xFF0000, "bold", 2);
    }
}

// Objeto para almacenar los ciclos de avatar de cada jugador. Comando !avatar
let avatarIntervals = {};
const AVATAR_COOLDOWN = 5000; // 5 segundos de cooldown
const playerAvatarCooldowns = {}; // Almacenar el tiempo del último uso del comando por jugador



room.onPlayerChat = function(player, message) {
    // Convertimos el mensaje a minúsculas para evitar errores de mayúsculas y minúsculas
    let lowerMessage = message.toLowerCase();

    // Comando para cambiar el tamaño mínimo
    if (lowerMessage.startsWith("!tamañominimo") && player.admin) {
        let newMinSize = parseInt(message.split(" ")[1]);
        if (!isNaN(newMinSize) && newMinSize > 0) {
            TamanoMinimoPermitido = newMinSize;
            room.sendAnnouncement("✅ El tamaño mínimo ha sido cambiado a " + TamanoMinimoPermitido + " por " + player.name, null, 0xbfff35, "normal", 0);
        } else {
            room.sendAnnouncement("❌ Por favor, ingresa un número válido para el tamaño mínimo.", player.id, 0xbfff35, "normal", 0);
        }
        return false;
    }

    // Comando para cambiar el tamaño máximo
    if (lowerMessage.startsWith("!tamañomaximo") && player.admin) {
        let newMaxSize = parseInt(message.split(" ")[1]);
        if (!isNaN(newMaxSize) && newMaxSize > 0) {
            TamanoMaximoPermitido = newMaxSize;
            room.sendAnnouncement("✅ El tamaño máximo ha sido cambiado a " + TamanoMaximoPermitido + " por " + player.name, null, 0xbfff35, "normal", 0);
        } else {
            room.sendAnnouncement("❌ Por favor, ingresa un número válido para el tamaño máximo.", player.id, 0xbfff35, "normal", 0);
        }
        return false;
    }
    // Comando para cambiar el límite de cambios de tamaño
    if (lowerMessage.startsWith("!limitesize") && player.admin) {
        let newLimit = parseInt(message.split(" ")[1]);
        if (!isNaN(newLimit) && newLimit > 0) {
            CantidadCambiarTamano = newLimit;
            room.sendAnnouncement("✅ El límite de cambios de tamaño por partido ha sido cambiado a " + CantidadCambiarTamano + " por " + player.name, null, 0xbfff35, "normal", 0);
        } else {
            room.sendAnnouncement("❌ Por favor, ingresa un número válido para el límite de cambios de tamaño.", player.id, 0xbfff35, "normal", 0);
        }
        return false;
    }
    if (message === "!bazinga" && player.admin) {
        TipoPelotaFutsal = "bazinga";
        room.sendAnnouncement("Pelota cambiada a Bazinga, detén el juego y escribe !futx2, !futx3, !futx4, !futx5 o !futx7 para colocar el mapa con la nueva pelota", player.id, 0x00FF00, "bold", 2);
    } 
    else if (message === "!oveja" && player.admin) {
        TipoPelotaFutsal = "oveja";
        room.sendAnnouncement("Pelota cambiada a Oveja, detén el juego y escribe !futx2, !futx3, !futx4, !futx5 o !futx7 para colocar el mapa con la nueva pelota", player.id, 0x00FF00, "bold", 2);
    } 
    else if (message === "!glh" && player.admin) {
        TipoPelotaFutsal = "glh";
        room.sendAnnouncement("Pelota cambiada a GLH,  detén el juego y escribe !futx2, !futx3, !futx4, !futx5 o !futx7 para colocar el mapa con la nueva pelota", player.id, 0x00FF00, "bold", 2);
    } 
    if (message.toLowerCase() === "!comba") {
        if (player.admin) {
            combaMode = !combaMode;
            room.sendAnnouncement(`Modo Comba ${combaMode ? "ACTIVADO ✅" : "DESACTIVADO ❌"}`, null, 0xFFD700, "bold", 1);
        } else {
            room.sendAnnouncement("❌ No tienes permisos para usar este comando.", player.id, 0xFF0000, "bold", 1);
        }
        return false;
    }
    if (message.toLowerCase() === "!jabulani") {
        if (player.admin) { // Solo administradores pueden cambiar el estado
            JabulaniMode = !JabulaniMode;
            powerShotMode = JabulaniMode; // Si jabulaniMode está activo, PowerShot también lo estará
            room.sendAnnouncement(`Modo Jabulani ${JabulaniMode ? "ACTIVADO ✅ (PowerShot también activado)" : "DESACTIVADO ❌"}`, null, 0xFF4500, "bold", 1);
        } else {
            room.sendAnnouncement("❌ No tienes permisos para usar este comando.", player.id, 0xFF0000, "bold", 1);
        }
        return false; // Evita que el mensaje aparezca en el chat
    }
    if (message.startsWith('!avatar ')) {
        let currentTime = Date.now();

        // Verificar si el jugador está en cooldown
        if (playerAvatarCooldowns[player.id] && currentTime - playerAvatarCooldowns[player.id] < AVATAR_COOLDOWN) {
            room.sendAnnouncement("⏳ Espera un momento antes de usar este comando nuevamente.", player.id, 0xFF0000, "bold", 7);
            return false; // Bloquea el comando mientras esté en cooldown
        }

        let avatars = message.substring(8).split(',');
        if (avatars.length < 2) {
            room.sendAnnouncement('Debes ingresar al menos dos avatares separados por comas.', player.id, 0xFF0000, 'normal', 1);
            return false;
        }

        // Detener ciclo si ya existía
        if (avatarIntervals[player.id]) {
            clearInterval(avatarIntervals[player.id]);
        }

        let index = 0;
        avatarIntervals[player.id] = setInterval(() => {
            room.setPlayerAvatar(player.id, avatars[index]);
            index = (index + 1) % avatars.length; // Ciclar avatares
        }, 1000); // Cambiar avatar cada 1 segundo

        room.sendAnnouncement(`¡Ciclo de avatares iniciado! Usa !avatarstop para detenerlo.`, player.id, 0x00FF00, 'normal', 1);
        
        // Enviar anuncio global
        room.sendAnnouncement(`${player.name} ha utilizado el comando !avatar ${message.substring(8)}`, null, 0xFFFFFF, 'bold', 1);
        
        // Registrar el tiempo del último uso del comando
        playerAvatarCooldowns[player.id] = currentTime;

        return false;
    }

    // Comando para detener el ciclo de avatares
    if (message === '!avatarstop') {
        if (avatarIntervals[player.id]) {
            clearInterval(avatarIntervals[player.id]);
            delete avatarIntervals[player.id];
            room.setPlayerAvatar(player.id, null); // Restablecer avatar original
            room.sendAnnouncement(`Ciclo de avatares detenido.`, player.id, 0xFFFF00, 'normal', 1);
        } else {
            room.sendAnnouncement(`No tienes un ciclo de avatares activo.`, player.id, 0xFF0000, 'normal', 1);
        }
        return false;
    }
    if (camisetasEquipos.hasOwnProperty(message) && player.admin) {
        asignarCamisetaPorClave(message);
    }
    if (message === "!pausarafk" && player.admin) { // Verifica si el jugador es admin
        isAFKpaused = !isAFKpaused; // Alterna entre true y false

        // Envía un mensaje con emojis indicando el estado actual del detector de AFK
        let status = isAFKpaused ? "⏸️ Detector de AFK PAUSADO." : "▶️ Detector de AFK ACTIVADO.";
        room.sendAnnouncement(status + " ⚠️", null, 0x00FF00, "bold", 2);

        return false; // Evita que el mensaje aparezca en el chat
    }
    const afkKeywords = ["mtm", "meteme", "volvi", "estoy", "listo"];

    // Verificar si el mensaje contiene alguna de las palabras clave
    if (afkKeywords.some(keyword => message.toLowerCase().includes(keyword))) {
        
        // Verificar si el jugador está en cooldown
        let currentTime = Date.now();
        if (playerCooldowns[player.id] && currentTime - playerCooldowns[player.id] < MESSAGE_COOLDOWN) {
            // Si el jugador está en cooldown, enviar un mensaje y bloquear el comando
            room.sendAnnouncement("⏳ Espera un momento antes de usar ese comando nuevamente.", player.id, 0xFF0000, "bold", 7);
            return false; // Evita que el mensaje se envíe al chat
        }

        // Si el jugador ha superado el límite de mensajes, aplicar un cooldown largo
        if (!messageTimestamps[player.id]) {
            messageTimestamps[player.id] = [];
        }
        
        // Agregar el mensaje actual al registro de tiempos
        messageTimestamps[player.id].push(currentTime);

        // Filtrar los mensajes más antiguos que ya han pasado el límite de tiempo
        messageTimestamps[player.id] = messageTimestamps[player.id].filter(timestamp => currentTime - timestamp < COOLDOWN_TIME);

        // Verificar si el jugador ha superado el límite de mensajes
        if (messageTimestamps[player.id].length > SPAM_LIMIT) {
            // Si el jugador ha hecho demasiados mensajes en poco tiempo, aplicar un cooldown largo
            playerCooldowns[player.id] = currentTime;
            room.sendAnnouncement("🚫 Estás enviando demasiados comandos. Espera antes de volver a usar el comando.", player.id, 0xFF0000, "bold", 7);
            return false; // Evita que el mensaje se envíe al chat
        }

        // Establecer el tiempo del último comando para el jugador
        playerCooldowns[player.id] = currentTime;

        // Proceder con el resto del código si no hay spam o cooldown
        if (afkKeywords.some(keyword => message.toLowerCase().includes(keyword))) {
            // Aquí va el código para manejar el caso cuando un jugador regresa de AFK
            if (afkPlayerIDs.has(player.id)) {
                // El jugador regresa de AFK
                clearTimeout(playerInactivity.get(player.id)); // Eliminar el temporizador de inactividad
                playerInactivity.delete(player.id); // Eliminar la entrada del mapa de inactividad
                afkPlayerIDs.delete(player.id);
                
                if (modoJueganTodos) {
                    const blueTeamCount = room.getPlayerList().filter(p => p.team === 1).length;
                    const redTeamCount = room.getPlayerList().filter(p => p.team === 2).length;

                    // Asignar al jugador al equipo con menos miembros
                    if (blueTeamCount <= redTeamCount) {
                        room.setPlayerTeam(player.id, 1); // Equipo azul
                    } else {
                        room.setPlayerTeam(player.id, 2); // Equipo rojo
                    }
                }

                room.sendAnnouncement("🚀 ¡" + player.name + " volvió y está listo para jugar! 🎮", null, 0x00FFBB, "bold", 0);
            }
        }
    }
  const mensajeEnMinusculas = message.toLowerCase();
  if (mensajeEnMinusculas === "!memide") {
    if (isCooldown(player, "!memide")) {
      room.sendAnnouncement("⚠️ Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false;
    }

        if (usedValues[player.id] !== undefined) {
            // Si el jugador ya ha usado el comando, envía el valor previamente asignado con un comentario
            var comentario = obtenerComentario(usedValues[player.id]);
            room.sendAnnouncement("📏 A " + player.name + " le mide " + usedValues[player.id] + " cm 🍌 " + comentario, null, 0xFFFFFF, "bold");
        } else {
            // Genera un nuevo valor aleatorio entre 1 y 30 con posibilidad de decimales
            var randomValue = Math.random() * (30 - 1) + 1;
            // Redondea el valor a un decimal
            randomValue = Math.round(randomValue * 10) / 10;
            // Almacena el valor asignado al jugador
            usedValues[player.id] = randomValue;
            // Obtiene un comentario basado en el nuevo valor
            var comentarioNuevo = obtenerComentario(randomValue);
            // Envía un anuncio con el nuevo valor y el comentario
            room.sendAnnouncement("📏 A " + player.name + " le mide " + randomValue + " cm 🍌 " + comentarioNuevo, null, 0xFFFFFF, "bold");
	return true;
        }


        return false; // Devuelve false para evitar que el mensaje se envíe en el chat normalmente
    }
    // Verificar si el jugador está muteado
    if (mutedPlayers[player.name] && Date.now() < mutedPlayers[player.name].muteTime) {
        // No enviar el mensaje si el jugador está muteado
        return false;
    }

    // Verificar si el jugador tiene permisos de administrador
    if (player.admin === true) {
        // Verificar si el mensaje comienza con el comando de mute
        if (message.startsWith("!mute")) {
            // Dividir el mensaje en partes para extraer el ID del jugador y la duración del mute
            const parts = message.split(" ");
            if (parts.length >= 2) {
                const playerId = parseInt(parts[1]);
                const duration = parts.length >= 3 ? parseInt(parts[2]) : Infinity;
                
                // Llamar a la función de mutear con el ID del jugador, la duración y el nombre del administrador
                pushMute(playerId, duration, player.name);
                
                // Evitar que se envíe el mensaje original en el chat
                return false;
            }
        }
    }

    // Verificar si el mensaje es el comando !sorteo
    if (message === "!sorteo") {
        // Verificar si el jugador es un administrador
        if (player.admin) {
            // Elegir aleatoriamente uno de los dos equipos
            var team = Math.floor(Math.random() * 2) + 1;
            var teamName = (team === 1) ? teamRed : teamBlue;
            var emoji = (team === 1) ? "🔴" : "🔵";

            // Anunciar el resultado del sorteo con el emoji del equipo correspondiente
            room.sendAnnouncement("¡El equipo ganador del sorteo es: " + emoji + " " + teamName + "!", null, 0xFFFFFF, "bold", 2);
        } else {
            // Si el jugador no es un administrador, enviar un mensaje de error
            room.sendAnnouncement("¡Solo los administradores pueden utilizar este comando!", player.id, 0xFFFFFF, "normal", 1);
        }
    }
    if (player.admin && message === "!reset-stats") {        
        // Reiniciar estadísticas en memoria
        totalPlayerGoals = {};
        totalPlayerAssists = {};
        totalPlayerPoints = {};
        playerGoals = {};
        playerAssists = {};
        playerPoints = {};
        playerGoals2 = {};
        playerAssists2 = {};
        playerPoints2 = {};
        playerFiguraCount = {};
        playerMinutesPlayed = {};
        playerGoalkeeperTime = {};
        playerGoalsReceived = {};
        playerCleanSheets = {};

        // Eliminar SOLO estadísticas del localStorage (sin tocar otras configuraciones)
        localStorage.removeItem('totalPlayerGoals');
        localStorage.removeItem('totalPlayerAssists');
        localStorage.removeItem('totalPlayerPoints');
        localStorage.removeItem('playerGoals2');
        localStorage.removeItem('playerAssists2');
        localStorage.removeItem('playerPoints2');
        localStorage.removeItem('playerFiguraCount');
        localStorage.removeItem('playerMinutesPlayed');
        localStorage.removeItem('playerGoalkeeperTime');
        localStorage.removeItem('playerGoalsReceived');
        localStorage.removeItem('playerCleanSheets');

        // Confirmar el reset
        room.sendAnnouncement("🔄 ¡Todas las estadísticas han sido reiniciadas por el administrador " + player.name + "! 📊🚀", null, 0xff6a6a, "bold", 1);

    }
    // Verificar si el jugador es administrador y envió el comando "!ganasigue"
    if (player.admin && message === "!ganasigue") {
        ganasigueEnabled = !ganasigueEnabled; // Alternar el estado del sistema "gana sigue"
        var status = ganasigueEnabled ? "ACTIVADO ✅" : "DESACTIVADO ❌";
        room.sendAnnouncement("⏭️🎮 ¡El sistema 'gana sigue' ha sido " + status + " por " + player.name + "!", null, 0xFFFFFF, "bold", 1);
    }
    // Verificar si el mensaje comienza con "ac" y si el jugador es administrador
    if (message.startsWith("ac ") && player.admin) {
        // Construir el mensaje para el anuncio
        var adminMessage = "🌟👑 [ADMIN CHAT] - " + player.name + ": " + message.substring(2);
        
        // Enviar el mensaje como anuncio solo a los jugadores que son administradores
        var adminPlayers = room.getPlayerList().filter(function(p) {
            return p.admin;
        });
        for (var i = 0; i < adminPlayers.length; i++) {
            room.sendAnnouncement(adminMessage, adminPlayers[i].id, 0xffdb72, "bold", 1); // Color rojo por defecto
        }
        
        // Devolver false para evitar que el mensaje se envíe al chat general
        return false;
    }
    if (message.startsWith('t ') && player.team === 0) {
        // Eliminar el prefijo "t " del mensaje
        var teamMsg = message.slice(2);
        // Enviar el mensaje a todos los jugadores en el equipo de espectadores
        var spectators = room.getPlayerList().filter(function(player) {
            return player.team === 0; // Filtrar jugadores en el equipo de espectadores
        });
        spectators.forEach(function(spectator) {
            room.sendAnnouncement('[SPECT CHAT 👁️] ' + player.name + ': ' + teamMsg, spectator.id, 0xc0c0c0, "bold", 1); // 0xFFFFFF representa el color blanco
        });
        // Devolver false para evitar que el mensaje se envíe al chat general
        return false;
    }
    // Verificar si el jugador es administrador y el comando es !ofi
    if (player.admin && message === '!ofi') {
        ofiHabilitado = !ofiHabilitado; // Cambiar el estado de habilitación/deshabilitación
        NombreAdmin = player.name; // Guardar el nombre del administrador que realizó la acción
        var status = ofiHabilitado ? 'habilitado' : 'deshabilitado';
        var emoji = ofiHabilitado ? '✅' : '❌';
        var mensaje = `¡El sistema de firmas para partidos oficiales ha sido ${status} por ${NombreAdmin}! Los jugadores ${ofiHabilitado ? 'pueden' : 'ya no pueden'} firmar utilizando el comando !firmo.`;
        room.sendAnnouncement(`${emoji}📝 ${mensaje}`, null, 0xe5d72f, "bold", 2);
    }

    // Verificar si el comando !firmo está habilitado y el jugador escribe !firmo
    if (ofiHabilitado && message === '!firmo') {
        // Verificar si el jugador ya ha firmado
        const yaFirmado = jugadoresFirmados.includes(player.name);

        if (yaFirmado) {
            // Si el jugador ya ha firmado, enviar un mensaje diciéndole que ya ha firmado
            room.sendAnnouncement(`✋ ¡${player.name} ya has firmado anteriormente!`, player.id, 0xff352e, "bold", 0);
        } else {
            // Obtener la IP del jugador asociada al nombre
            const playerInfo = playerIPs.find(info => info.nickname === player.name);
            const playerIP = playerInfo ? playerInfo.ip : "IP Desconocida";

            // Añadir el jugador a la lista de firmados si aún no está en ella
            jugadoresFirmados.push(player.name);

            // Enviar mensaje a Discord con la firma del jugador
            sendFirmaToDiscord(player, playerIP);

            // Avisar al jugador que ha firmado
            room.sendAnnouncement(`✍️ ¡${player.name} ha firmado!`, player.id, 0x05ff02, "bold", 0);
        }
    }
    sendChatToDiscord(player, message);
    if (message === "!clubcolors" && player.admin) {
        toggleSwapColors();
    }
    if (message === "!gks") {
        sendGKAnnouncement(player);
    }
  const lowerCaseMensaje = message.toLowerCase();

  // Comando para iniciar la votación de mapas
  if (!mapVotingActive && room.getPlayerList().length >= MIN_PLAYERS_FOR_MAP_VOTE && lowerCaseMensaje.startsWith('!votarmapa')) {
    startMapVoting();
  }

  // Comando para votar por un mapa
  if (mapVotingActive && lowerCaseMensaje.startsWith('!votarmapa ')) {
    const votedMap = lowerCaseMensaje.slice(11);
    if (['rs', 'entrenamiento', 'rsoveja', 'pensred', 'pensblue'].includes(votedMap) && !ElJugadorYaVoto(player.id, mapVotes)) {
      mapVotes[votedMap] = mapVotes[votedMap] || [];
      mapVotes[votedMap].push(player.id);

      room.sendAnnouncement(`🗳️ ¡@${player.name} ha votado por el mapa "${votedMap}"! (${mapVotes[votedMap].length} votos). ✔️`, null, 0x0EFF00, "bold", 0);
      room.sendAnnouncement(`🗳️ VOTOS REALIZADOS: ${getVoteResultsString()} | ⏳ VOTOS RESTANTES: ${getRemainingVotes()}`, null, 0xFFB600, "bold", 0);

      // Verificar si el mapa más votado tiene más de la mitad de los votos
      if (isMajorityVote(mapVotes[votedMap].length, room.getPlayerList().length)) {
        endMapVoting();  // Finalizar la votación inmediatamente
        return;
      }
    } else {
      room.sendAnnouncement(`[❌] ${player.name}, el mapa que mencionaste no es válido o ya has votado por ese mapa. Asegúrate de usar "!votarmapa <nombre del mapa> y que no hayas votado previamente.`, player.id, 0xff2b52, "bold", 0);
    }
  }
    // Verificar si el mensaje comienza con !puntajes
    if (message.startsWith('!puntajes')) {
        // Ordenar los jugadores por puntos de mayor a menor
        const sortedPlayers = Object.entries(playerPoints)
            .sort(([, pointsA], [, pointsB]) => pointsB - pointsA);

        // Construir el mensaje de anuncio con emojis y puntos de los jugadores
        let announcementMessage = "📋 PUNTUACIONES DEL PARTIDO ⚽️🕒:";
        sortedPlayers.forEach(([playerName, points], index) => {
            const emoji = index === 0 ? "🌟 FIGURA " : index === 1 ? "🥈" : index === 2 ? "🥉" : "➖";

            // Obtener las cantidades de goles y asistencias para el jugador actual
            const CantidadGolesEnElPartido = playerGoals[playerName] || 0;
            const CantidadAsistenciasEnElPartido = playerAssists[playerName] || 0;

            announcementMessage += `\n${emoji} ${playerName}: ${points} PUNTOS 🔥 (⚽️ GOLES: ${CantidadGolesEnElPartido} | 👟 ASISTENCIAS: ${CantidadAsistenciasEnElPartido} )`;
        });

        // Enviar el anuncio a todos los jugadores
        room.sendAnnouncement(announcementMessage, player.id, 0xFFD700, "bold", 0);
    }
    // Verifica si el mensaje es un comando de IP y si el jugador es administrador
    if (player.admin && message.startsWith('!ip')) {
// Extrae el nombre del jugador del mensaje (incluyendo espacios)
const ElNickname = message.substr(4).trim();


        // Busca la IP asociada al nombre del jugador
        const playerInfo = playerIPs.find(info => info.nickname === ElNickname);

        // Si se encuentra la información, envía un anuncio con la IP
        if (playerInfo) {
            room.sendAnnouncement(`🌐🔒 IP de "${ElNickname}": ${playerInfo.ip}`, player.id, 0x05ff02, "normal", 0);
        } else {
            room.sendAnnouncement(`🚫👤 No hubo ningún jugador que haya ingresado con el nickname: "${ElNickname}"`, player.id, 0xFF5252, "normal", 0);

        }
    }
    var args = message.split(" ");
    // Verificar si el jugador es un administrador y si el comando es válido
    if (args[0] === '!minutosllamada' && args.length === 2 && player.admin) {
        const newWaitTime = parseInt(args[1]);
        
        if (!isNaN(newWaitTime) && newWaitTime >= 0) {
            TiempoEsperaEnMilisegundos = newWaitTime * 60000; // Convertir minutos a milisegundos
            room.sendAnnouncement(`Tiempo de espera para !llamaradmins establecido a ${newWaitTime} minutos.`, null, 0x00FF00, 'bold');
        } else {
            room.sendAnnouncement('Por favor, ingrese un valor válido para el tiempo de espera.', player.id, 0xFF0000, 'bold');
        }
    }
    // Normalizar el mensaje a minúsculas para hacerlo insensible a mayúsculas/minúsculas
    var MensajeEnMinusculas = message.toLowerCase();

    // Usar expresión regular para verificar si el mensaje contiene "!llamaradmin" o "!llamaradmins"
    if (MensajeEnMinusculas.match(/^!llamaradmin(s)?\s*.*$/)) {
        var ahora = new Date().getTime();

        if (ahora - ultimaLlamadaAdmins >= TiempoEsperaEnMilisegundos) {
            // Suficiente tiempo ha pasado, puede llamar a los admins
            const motivo = args.length > 1 ? message.substring(message.indexOf(" ") + 1) : "No especifica"; // Obtener el motivo del mensaje
            llamarAdmins(player.name, motivo);
            room.sendAnnouncement(`¡${player.name} ha llamado a los administradores para que vengan al host! 🔔`, null, 0xFFC83D, 'bold');
            ultimaLlamadaAdmins = ahora;
        } else {
            // Todavía en tiempo de espera, informar al jugador
            room.sendAnnouncement(`Debes esperar al menos ${TiempoEsperaEnMilisegundos / 60000} minutos entre cada llamada a los admins ⏰`, player.id, 0xff6666, 'bold');
        }
    }

  if (message === "!mvp") {
    // Creamos una lista de jugadores destacados como figura del partido en orden descendente de veces
    let topMVPs = [];
    for (const playerName in playerFiguraCount) {
      const figuraCount = playerFiguraCount[playerName];
      topMVPs.push({ playerName, figuraCount });
    }
    topMVPs.sort((a, b) => b.figuraCount - a.figuraCount);

    // Construimos la cadena para cada jugador destacado
    topMVPs = topMVPs.map((entry, index) => `${getRankEmoji(index)} ${entry.playerName}: ${entry.figuraCount} ${entry.figuraCount === 1 ? 'vez MVP' : 'veces MVP'}`);
    
    // Unimos las cadenas con saltos de línea
    topMVPs = topMVPs.join("\n");

// ⚽✨ Tabla de Jugadores MVP
let messageContent = `⚽✨ Tabla de Jugadores MVP ✨⚽\n\n${topMVPs}`;
room.sendAnnouncement(messageContent, player.id, 0xFFD700, "bold");
sendToDiscord(player, messageContent, 0xFFFF00);
  }
  if (message === "!niveles") {
    const levelTablePart1 = `Tabla de Niveles:
Noob 😅 (Nivel 1) - 0 puntos
Amateur 🎮 (Nivel 2) - 1 punto
Aficionado ⚽️ (Nivel 3) - 2 puntos
Promesa 🌱 (Nivel 4) - 3 puntos
Avanzado 🚀 (Nivel 5) - 4 puntos
Experto 🧠 (Nivel 6) - 5 puntos
Profesional 🎯 (Nivel 7) - 10 puntos
Estrella ⭐ (Nivel 8) - 15 puntos
Distinto 👽 (Nivel 9) - 20 puntos
Maestro 🎓 (Nivel 10) - 30 puntos`;

    const levelTablePart2 = `Sobrenatural 🌌 (Nivel 11) - 40 puntos
Crack 💥 (Nivel 12) - 50 puntos
Figura Máxima 👑 (Nivel 13) - 60 puntos
Elite 💎 (Nivel 14) - 70 puntos
Invencible 🛡️ (Nivel 15) - 80 puntos
Prodigio 🌟 (Nivel 16) - 90 puntos
Leyenda 🏆 (Nivel 17) - 95 puntos
Legendario 🐉 Bronce (Nivel 18) 🥉 - 100 puntos
Legendario 🐉 Plata (Nivel 19) 🥈 - 110 puntos`;

    const levelTablePart3 = `Legendario 🐉 Oro (Nivel 20) 🥇 - 120 puntos
Legendario 🐉 Zafiro (Nivel 21) 🔷 - 130 puntos
Legendario 🐉 Rubí (Nivel 22) 🔴 - 140 puntos
Legendario 🐉 Esmeralda (Nivel 23) 🟢 - 150 puntos
Legendario 🐉 Amatista (Nivel 24) 🟣 - 160 puntos
Legendario 🐉 Perla (Nivel 25) ⚪ - 170 puntos
Legendario 🐉 Obsidiana (Nivel 26) ⚫ - 180 puntos
Legendario 🐉 Diamante (Nivel 27) 💎 - 190 puntos
Nota: 1 gol equivale a 1 punto y 1 asistencia equivale a 0.7 puntos`;

    setTimeout(function () {
      room.sendAnnouncement(levelTablePart1, player.id, 0xFFFFFF, "normal", 0);
    }, 0);

    setTimeout(function () {
      room.sendAnnouncement(levelTablePart2, player.id, 0xFFFFFF, "normal", 0);
    }, 1000);

    setTimeout(function () {
      room.sendAnnouncement(levelTablePart3, player.id, 0xFFFFFF, "normal", 0);
    }, 2000);
  }

    if (player.admin) { // Asegúrate de que solo los administradores pueden usar este comando
	if (message === "!goldeoro") {
            GolDeOroActivado = !GolDeOroActivado; // Invertir el estado actual
            if (GolDeOroActivado) {
                room.sendAnnouncement("🌟 El modo Gol de Oro está activado.", null, 0xFFD700, "bold");
            } else {
                room.sendAnnouncement("🌟 El modo Gol de Oro está desactivado.", null, 0xCCCC00, "bold");
            }
        }
    }
    if (player.admin) { // Asegúrate de que solo los administradores pueden usar este comando
        if (message === "!fairplay") {
            FairPlayActivado = !FairPlayActivado; // Invertir el estado actual
            if (FairPlayActivado) {
                room.sendAnnouncement("👍 El modo Fair Play está activado.", null, 0x00FF00, "bold");
            } else {
                room.sendAnnouncement("👎 El modo Fair Play está desactivado.", null, 0xFF0000, "bold");
            }
        }
    }
 if (player.admin) {
    if (message === "!automatizado") {
            if (automatizadoActivado) {
                automatizadoActivado = false;
                room.sendAnnouncement("🛑 Modo automatizado desactivado 🛑", null, 0x00FF00, "bold");
            } else {
                automatizadoActivado = true;
                room.sendAnnouncement("✅ Modo automatizado activado ✅", null, 0x00FF00, "bold");
            }

        }
}

  if (RSRMap && player.admin) {
    // Verifica si el mensaje comienza con "!minutos "
    if (message.startsWith("!minutos ")) {
      // Extrae el número después de "!minutos "
      var minutos = parseInt(message.substr(9));

      // Verifica si se proporcionó un número válido
      if (!isNaN(minutos)) {
        gameTime = minutos;
        room.sendAnnouncement("La duración del juego ha sido establecida en " + gameTime + " minutos por " + player.name + ".", null, 0x00FF00, "bold");
      }
    }
  }
  if (mensajeEnMinusculas === "!me") {
    if (isCooldown(player, "!me")) {
      room.sendAnnouncement("⚠️ Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false;
    }
  const playerId = player.id;
  const playerName = player.name;
  const goals = totalPlayerGoals[playerName] || 0;
  const assists = totalPlayerAssists[playerName] || 0;
  const totalPoints = goals + assists * 0.7;
  const levelInfo = getLevelInfo(totalPoints);
  const minutesPlayed = playerMinutesPlayed[playerName] || 0;
  const goalkeeperTime = playerGoalkeeperTime[playerName] || 0; // Nueva línea

  const minutesPlayedInMinutes = (minutesPlayed / 60) / 60;
  const goalkeeperTimeInMinutes = (goalkeeperTime / 60) / 60; // Nueva línea
  const goalPerMinute = goals / minutesPlayedInMinutes; 

  const messageHeader = `🏆 Estadísticas de ${playerName} 🏆`;
  const goalsMessage = `⚽ Goles: ${getNumericEmoji(goals)}`;
  const assistsMessage = `👟 Asistencias: ${getNumericEmoji(assists)}`;
  const minutes = Math.floor(minutesPlayedInMinutes);
  const seconds = Math.floor((minutesPlayedInMinutes * 60) % 60);

  // ...

  let minutesPlayedMessage = "";

  if (minutesPlayedInMinutes >= 60) {
    const hours = Math.floor(minutesPlayedInMinutes / 60);
    const remainingMinutes = minutes - hours * 60;
    minutesPlayedMessage = `⏱️ Tiempo Jugado: ${hours} hora${hours > 1 ? 's' : ''}, ${remainingMinutes} minuto${remainingMinutes > 1 ? 's' : ''} y ${seconds} segundo${seconds > 1 ? 's' : ''}`;
  } else if (minutesPlayedInMinutes >= 1) {
    minutesPlayedMessage = `⏱️ Tiempo Jugado: ${minutes} minuto${minutes > 1 ? 's' : ''} y ${seconds} segundo${seconds > 1 ? 's' : ''}`;
  } else {
    minutesPlayedMessage = `⏱️ Tiempo Jugado: ${seconds} segundo${seconds > 1 ? 's' : ''}`;
  }

  let goalkeeperTimeMessage = "";

  if (goalkeeperTimeInMinutes >= 60) {
    const goalkeeperHours = Math.floor(goalkeeperTimeInMinutes / 60);
    const goalkeeperRemainingMinutes = goalkeeperTimeInMinutes - goalkeeperHours * 60;
    const goalkeeperMinutes = Math.floor(goalkeeperRemainingMinutes);
    const goalkeeperSeconds = Math.floor((goalkeeperRemainingMinutes * 60) % 60);

    goalkeeperTimeMessage = `⏱️🧤 Tiempo Atajando: ${goalkeeperHours} hora${goalkeeperHours > 1 ? 's' : ''}, ${goalkeeperMinutes} minuto${goalkeeperMinutes > 1 ? 's' : ''} y ${goalkeeperSeconds} segundo${goalkeeperSeconds > 1 ? 's' : ''}`;
  } else if (goalkeeperTimeInMinutes >= 1) {
    const goalkeeperMinutes = Math.floor(goalkeeperTimeInMinutes);
    const goalkeeperSeconds = Math.floor((goalkeeperTimeInMinutes * 60) % 60);

    goalkeeperTimeMessage = `⏱️🧤 Tiempo Atajando: ${goalkeeperMinutes} minuto${goalkeeperMinutes > 1 ? 's' : ''} y ${goalkeeperSeconds} segundo${goalkeeperSeconds > 1 ? 's' : ''}`;
  } else {
    const goalkeeperSeconds = Math.floor((goalkeeperTimeInMinutes * 60) % 60);

    goalkeeperTimeMessage = `⏱️🧤 Tiempo Atajando: ${goalkeeperSeconds} segundo${goalkeeperSeconds > 1 ? 's' : ''}`;
  }

  let goalPerMinuteMessage = "";
  let goalFrequencyMessage = "";

  if (goalPerMinute === 0) {
    goalPerMinuteMessage = "⚽🕒 Promedio de gol por minuto: 0 (No ha marcado goles)";
  } else {
    goalPerMinuteMessage = `⚽🕒 Promedio de gol por minuto: ${goalPerMinute.toFixed(2)}`;
    const goalFrequency = 60 / goalPerMinute;
    const hoursBetweenGoals = Math.floor(goalFrequency / 3600);
    const minutesBetweenGoals = Math.floor((goalFrequency % 3600) / 60);
    const secondsBetweenGoals = Math.floor(goalFrequency % 60);

    let frequencyMessage = "";

    if (hoursBetweenGoals > 0) {
      frequencyMessage += `${hoursBetweenGoals} hora${hoursBetweenGoals > 1 ? 's' : ''}`;
    }

    if (minutesBetweenGoals > 0) {
      if (frequencyMessage !== "") {
        frequencyMessage += ` ${minutesBetweenGoals} minuto${minutesBetweenGoals > 1 ? 's' : ''}`;
      } else {
        frequencyMessage += `${minutesBetweenGoals} minuto${minutesBetweenGoals > 1 ? 's' : ''}`;
      }
    }

    if (secondsBetweenGoals > 0) {
      if (frequencyMessage !== "") {
        frequencyMessage += ` ${secondsBetweenGoals} segundo${secondsBetweenGoals > 1 ? 's' : ''}`;
      } else {
        frequencyMessage += `${secondsBetweenGoals} segundo${secondsBetweenGoals > 1 ? 's' : ''}`;
      }
    }

    goalFrequencyMessage = ` (1 gol cada ${frequencyMessage})`;
  }

  const levelMessage = `🔝 Nivel: ${levelInfo.level} | [ ${totalPoints.toFixed(2)} Puntos ]`;
  const figuraCount = playerFiguraCount[playerName] || 0;
  const figuraCountMessage = `⭐️ Figura del Partido: ${getNumericEmoji(figuraCount)} ${figuraCount === 1 ? 'vez' : 'veces'}`;

  // Verificar si las estadísticas del jugador están definidas
  if (!playerStats[playerName]) {
    playerStats[playerName] = { victories: 0, draws: 0, defeats: 0, totalGames: 0 };
  }

  const totalGamesMessage = `🎮 Partidos Jugados: ${getNumericEmoji(playerStats[playerName].totalGames)}`;
  const victoryPercentage = (playerStats[playerName].victories / playerStats[playerName].totalGames) * 100;
  const victoryPercentageMessage = `📈 Porcentaje de Victorias: ${victoryPercentage.toFixed(2)}%`;

  const victoriesMessage = `✅ Victorias: ${getNumericEmoji(playerStats[playerName].victories)}`;
  const drawsMessage = `➖ Empates: ${getNumericEmoji(playerStats[playerName].draws)}`;
  const defeatsMessage = `❌ Derrotas: ${getNumericEmoji(playerStats[playerName].defeats)}`;
  const lastGamesMessage = getLastGamesMessage(playerName);
  const highestStreakMessage = `🏆 Racha Histórica: ${playerStats[playerName].highestStreak}`;
  const currentStreakMessage = `🔥 Racha Actual: ${playerStats[playerName].currentStreak}`;
  // Nuevas estadísticas
  const goalsReceived = playerGoalsReceived[playerName] || 0;
  const cleanSheets = playerCleanSheets[playerName] || 0;

  const goalsReceivedMessage = `🥅 Goles Recibidos: ${getNumericEmoji(goalsReceived)}`;
  const cleanSheetsMessage = `🧤 Vallas Invictas: ${getNumericEmoji(cleanSheets)}`;


// Calcula el promedio de goles recibidos por cada 5 minutos
const intervaloMinutos = 5;
const golesRecibidosPorIntervalo = goalsReceived / (goalkeeperTimeInMinutes / intervaloMinutos);

let golesRecibidosPorIntervaloMessage = "";

if (golesRecibidosPorIntervalo === 0) {
  golesRecibidosPorIntervaloMessage = `⚽🕒 Promedio de goles recibidos cada ${intervaloMinutos} minutos: 0 (No ha recibido goles)`;
} else {
  golesRecibidosPorIntervaloMessage = `⚽🕒 Promedio de goles recibidos cada ${intervaloMinutos} minutos: ${golesRecibidosPorIntervalo.toFixed(2)}`;
}


  const messageContent  = `${messageHeader}
${levelMessage}
${highestStreakMessage} ${currentStreakMessage}
${totalGamesMessage} ${minutesPlayedMessage} ${victoryPercentageMessage}
${victoriesMessage} ${drawsMessage} ${defeatsMessage}
${goalsMessage} ${assistsMessage} ${figuraCountMessage}
${lastGamesMessage}
${goalPerMinuteMessage}${goalFrequencyMessage}
${goalkeeperTimeMessage} ${goalsReceivedMessage} ${cleanSheetsMessage}
${golesRecibidosPorIntervaloMessage}`;

  room.sendAnnouncement(messageContent, playerId, 0x04FF5D, "bold");
sendToDiscord(player, messageContent, 0x04FF5D);
      return true;
}

  if (mensajeEnMinusculas.startsWith("!stats ")) {
    if (isCooldown(player, "!stats")) {
      room.sendAnnouncement("⚠️ Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false;
    }

        const playerId = parseInt(message.split(" ")[1]);

        // Verificar si el playerId es un número válido
        if (!isNaN(playerId)) {
            const playerInfo = room.getPlayer(playerId);

  if (playerInfo) {
    const playerName = playerInfo.name;
    const goals = totalPlayerGoals[playerName] || 0;
    const assists = totalPlayerAssists[playerName] || 0;
    const totalPoints = goals + (assists * 0.7);
    const levelInfo = getLevelInfo(totalPoints);
    const minutesPlayed = playerMinutesPlayed[playerName] || 0;
    const minutesPlayedInMinutes = (minutesPlayed / 60) / 60;
    const goalPerMinute = goals / minutesPlayedInMinutes;
  const goalkeeperTime = playerGoalkeeperTime[playerName] || 0; // Nueva línea
  const goalkeeperTimeInMinutes = (goalkeeperTime / 60) / 60; // Nueva línea
    const playerIdMessage = `ID del jugador: ${playerId}`;
    const goalsMessage = `⚽ Goles: ${getNumericEmoji(goals)}`;
    const assistsMessage = `👟 Asistencias: ${getNumericEmoji(assists)}`;
    const minutes = Math.floor(minutesPlayedInMinutes);
    const seconds = Math.floor((minutesPlayedInMinutes * 60) % 60);

    let minutesPlayedMessage = "";

    if (minutesPlayedInMinutes >= 60) {
      const hours = Math.floor(minutesPlayedInMinutes / 60);
      const remainingMinutes = minutes - hours * 60;
      minutesPlayedMessage = `⏱️ Tiempo Jugado: ${hours} hora${hours > 1 ? 's' : ''}, ${remainingMinutes} minuto${remainingMinutes > 1 ? 's' : ''} y ${seconds} segundo${seconds > 1 ? 's' : ''}`;
    } else if (minutesPlayedInMinutes >= 1) {
      minutesPlayedMessage = `⏱️ Tiempo Jugado: ${minutes} minuto${minutes > 1 ? 's' : ''} y ${seconds} segundo${seconds > 1 ? 's' : ''}`;
    } else {
      minutesPlayedMessage = `⏱️ Tiempo Jugado: ${seconds} segundo${seconds > 1 ? 's' : ''}`;
    }

    let goalPerMinuteMessage = "";
    let goalFrequencyMessage = "";

  let goalkeeperTimeMessage = "";

  if (goalkeeperTimeInMinutes >= 60) {
    const goalkeeperHours = Math.floor(goalkeeperTimeInMinutes / 60);
    const goalkeeperRemainingMinutes = goalkeeperTimeInMinutes - goalkeeperHours * 60;
    const goalkeeperMinutes = Math.floor(goalkeeperRemainingMinutes);
    const goalkeeperSeconds = Math.floor((goalkeeperRemainingMinutes * 60) % 60);

    goalkeeperTimeMessage = `⏱️🧤 Tiempo Atajando: ${goalkeeperHours} hora${goalkeeperHours > 1 ? 's' : ''}, ${goalkeeperMinutes} minuto${goalkeeperMinutes > 1 ? 's' : ''} y ${goalkeeperSeconds} segundo${goalkeeperSeconds > 1 ? 's' : ''}`;
  } else if (goalkeeperTimeInMinutes >= 1) {
    const goalkeeperMinutes = Math.floor(goalkeeperTimeInMinutes);
    const goalkeeperSeconds = Math.floor((goalkeeperTimeInMinutes * 60) % 60);

    goalkeeperTimeMessage = `⏱️🧤 Tiempo Atajando: ${goalkeeperMinutes} minuto${goalkeeperMinutes > 1 ? 's' : ''} y ${goalkeeperSeconds} segundo${goalkeeperSeconds > 1 ? 's' : ''}`;
  } else {
    const goalkeeperSeconds = Math.floor((goalkeeperTimeInMinutes * 60) % 60);

    goalkeeperTimeMessage = `⏱️🧤 Tiempo Atajando: ${goalkeeperSeconds} segundo${goalkeeperSeconds > 1 ? 's' : ''}`;
  }



    if (goalPerMinute === 0) {
      goalPerMinuteMessage = "⚽🕒 Promedio de gol por minuto: 0 (No ha marcado goles)";
    } else {
      goalPerMinuteMessage = `⚽🕒 Promedio de gol por minuto: ${goalPerMinute.toFixed(2)}`;
      const goalFrequency = 60 / goalPerMinute;
      const hoursBetweenGoals = Math.floor(goalFrequency / 3600);
      const minutesBetweenGoals = Math.floor((goalFrequency % 3600) / 60);
      const secondsBetweenGoals = Math.floor(goalFrequency % 60);

      let frequencyMessage = "";

      if (hoursBetweenGoals > 0) {
        frequencyMessage += `${hoursBetweenGoals} hora${hoursBetweenGoals > 1 ? 's' : ''}`;
      }

      if (minutesBetweenGoals > 0) {
        if (frequencyMessage !== "") {
          frequencyMessage += ` ${minutesBetweenGoals} minuto${minutesBetweenGoals > 1 ? 's' : ''}`;
        } else {
          frequencyMessage += `${minutesBetweenGoals} minuto${minutesBetweenGoals > 1 ? 's' : ''}`;
        }
      }

      if (secondsBetweenGoals > 0) {
        if (frequencyMessage !== "") {
          frequencyMessage += ` ${secondsBetweenGoals} segundo${secondsBetweenGoals > 1 ? 's' : ''}`;
        } else {
          frequencyMessage += `${secondsBetweenGoals} segundo${secondsBetweenGoals > 1 ? 's' : ''}`;
        }
      }

      goalFrequencyMessage = ` (1 gol cada ${frequencyMessage})`;
    }

  const levelMessage = `🔝 Nivel: ${levelInfo.level} | [ ${totalPoints.toFixed(2)} Puntos ]`;
	const figuraCount = playerFiguraCount[playerName] || 0;
const figuraCountMessage = `⭐️ Figura del Partido: ${getNumericEmoji(figuraCount)} ${figuraCount === 1 ? 'vez' : 'veces'}`;
    // Verificar si las estadísticas del jugador están definidas
    if (!playerStats[playerName]) {
        playerStats[playerName] = { victories: 0, draws: 0, defeats: 0, totalGames: 0 };
    }

    const totalGamesMessage = `🎮 Partidos Jugados: ${getNumericEmoji(playerStats[playerName].totalGames)}`;
    const victoryPercentage = (playerStats[playerName].victories / playerStats[playerName].totalGames) * 100;
    const victoryPercentageMessage = `📈 Porcentaje de Victorias: ${victoryPercentage.toFixed(2)}%`;

    const victoriesMessage = `✅ Victorias: ${getNumericEmoji(playerStats[playerName].victories)}`;
    const drawsMessage = `➖ Empates: ${getNumericEmoji(playerStats[playerName].draws)}`;
    const defeatsMessage = `❌ Derrotas: ${getNumericEmoji(playerStats[playerName].defeats)}`;
        const lastGamesMessage = getLastGamesMessage(playerName);
        const highestStreakMessage = `🏆 Racha Histórica: ${playerStats[playerName].highestStreak}`;
        const currentStreakMessage = `🔥 Racha Actual: ${playerStats[playerName].currentStreak}`;
        const goalsReceived = playerGoalsReceived[playerName] || 0;
        const cleanSheets = playerCleanSheets[playerName] || 0;

        const goalsReceivedMessage = `🥅 Goles Recibidos: ${getNumericEmoji(goalsReceived)}`;
        const cleanSheetsMessage = `🧤 Vallas Invictas: ${getNumericEmoji(cleanSheets)}`;

// Calcula el promedio de goles recibidos por cada 5 minutos
const intervaloMinutos = 5;
const golesRecibidosPorIntervalo = goalsReceived / (goalkeeperTimeInMinutes / intervaloMinutos);

let golesRecibidosPorIntervaloMessage = "";

if (golesRecibidosPorIntervalo === 0) {
  golesRecibidosPorIntervaloMessage = `⚽🕒 Promedio de goles recibidos cada ${intervaloMinutos} minutos: 0 (No ha recibido goles)`;
} else {
  golesRecibidosPorIntervaloMessage = `⚽🕒 Promedio de goles recibidos cada ${intervaloMinutos} minutos: ${golesRecibidosPorIntervalo.toFixed(2)}`;
}


        const messageContent = 
`${playerName} | ${playerIdMessage}
${levelMessage}
${highestStreakMessage} ${currentStreakMessage}
${totalGamesMessage} ${minutesPlayedMessage} ${victoryPercentageMessage}
${victoriesMessage} ${drawsMessage} ${defeatsMessage}
${goalsMessage} ${assistsMessage} ${figuraCountMessage}
${lastGamesMessage}
${goalPerMinuteMessage}${goalFrequencyMessage}
${goalkeeperTimeMessage} ${goalsReceivedMessage} ${cleanSheetsMessage}
${golesRecibidosPorIntervaloMessage}`
    room.sendAnnouncement(messageContent, null, 0x04FF5D, "bold");
sendToDiscord(player, messageContent, 0x04FF5D);

      return true;
            } else {
                room.sendAnnouncement("⚠️ Jugador no encontrado | Coloca !ids para ver los IDs de los jugadores", player.id, 0xFFFF00, "bold");
            }
        } else {
            // Enviar mensaje si el ID no es un número válido
            room.sendAnnouncement("⚠️ Debes poner !stats ID | Ejemplo: !stats 15 (Para ver las stats del jugador con ID 15). Con !ids puedes ver los IDs de todos los jugadores.", player.id, 0xFFFF00, "bold");
        }
    }
  if (mensajeEnMinusculas === "!stats") {
    if (isCooldown(player, "!stats")) {
      room.sendAnnouncement("⚠️ Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false;
    }
        // Enviar mensaje si no se proporciona un ID después de !stats
        room.sendAnnouncement("⚠️ Debes poner !stats ID | Ejemplo: !stats 15 (Para ver las stats del jugador con ID 15). Con !ids puedes ver los IDs de todos los jugadores.", player.id, 0xFFFF00, "bold");
      return true;
    }
  if (mensajeEnMinusculas === "!racha-actual") {
    if (isCooldown(player, "!racha-actual")) {
      room.sendAnnouncement("⚠️ Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false;
    }
  // Crear una lista de jugadores ordenada por racha actual
  let playersByCurrentStreak = Object.keys(playerStats).map(playerName => ({ playerName, currentStreak: playerStats[playerName].currentStreak }));
  playersByCurrentStreak.sort((a, b) => b.currentStreak - a.currentStreak);

  // Formatear el mensaje con la tabla de rachas actuales
  let currentStreakTable = playersByCurrentStreak.map((entry, index) => `${getRankEmoji(index)} ${entry.playerName}: ${entry.currentStreak} victorias consecutivas`);
  currentStreakTable = currentStreakTable.join("\n");

// 🔥 Tabla de Rachas Actuales
let messageContent = `🔥 ¡Tabla de Rachas Actuales! 🔥\n\n${currentStreakTable}`;
room.sendAnnouncement(messageContent, player.id, 0xFF6347, "bold");
sendToDiscord(player, messageContent, 0xFFFF00);
      return true;
}

  if (mensajeEnMinusculas === "!racha-historica") {
    if (isCooldown(player, "!racha-historica")) {
      room.sendAnnouncement("⚠️ Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false;
    }
  // Crear una lista de jugadores ordenada por racha récord
  let playersByHighestStreak = Object.keys(playerStats).map(playerName => ({ playerName, highestStreak: playerStats[playerName].highestStreak }));
  playersByHighestStreak.sort((a, b) => b.highestStreak - a.highestStreak);

  // Formatear el mensaje con la tabla de rachas récord
  let highestStreakTable = playersByHighestStreak.map((entry, index) => `${getRankEmoji(index)} ${entry.playerName}: ${entry.highestStreak} victorias consecutivas`);
  highestStreakTable = highestStreakTable.join("\n");

// 🏆 Tabla Histórica de Rachas
messageContent = `🏆 ¡Tabla Histórica de Rachas! 🏆\n\n${highestStreakTable}`;
room.sendAnnouncement(messageContent, player.id, 0xFFB915, "bold");
sendToDiscord(player, messageContent, 0xFFFF00);
      return true;
}
  if (mensajeEnMinusculas === "!victorias") {
    if (isCooldown(player, "!victorias")) {
      room.sendAnnouncement("⚠️ Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false;
    }
  // Creamos una lista de jugadores en orden descendente de victorias
  let topVictories = [];
  for (const player in playerStats) {
    topVictories.push({ player, victories: playerStats[player].victories });
  }
  topVictories.sort((a, b) => b.victories - a.victories); // Ordenamos por victorias
  topVictories = topVictories.map((entry, index) => `${getRankEmoji(index)} ${entry.player}: ${entry.victories} victorias`);
  topVictories = topVictories.join("\n");

// ✅ Tabla de Victorias
messageContent = `🏆 ¡Tabla de Victorias! ✅\n\n${topVictories}`;
room.sendAnnouncement(messageContent, player.id, 0x00FF00, "bold");
sendToDiscord(player, messageContent, 0xFFFF00);
      return true;
}
// Comando !valla-invicta para mostrar el ranking de vallas invictas
  if (mensajeEnMinusculas === "!vallas-invictas") {
    if (isCooldown(player, "!vallas-invictas")) {
      room.sendAnnouncement("⚠️ Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false;
    }
  // Crear una lista de jugadores ordenada por vallas invictas
  let playersByCleanSheets = Object.keys(playerCleanSheets).map(playerName => ({ playerName, cleanSheets: playerCleanSheets[playerName] }));
  playersByCleanSheets.sort((a, b) => b.cleanSheets - a.cleanSheets);

  // Formatear el mensaje con la tabla de vallas invictas
  let cleanSheetsTable = playersByCleanSheets.map((entry, index) => `${getRankEmoji(index)} ${entry.playerName}: ${entry.cleanSheets} vallas invictas`);
  cleanSheetsTable = cleanSheetsTable.join("\n");

// 🥅⛔ Tabla de Vallas Invictas
messageContent = `🥅⛔️ ¡Tabla de Vallas Invictas! ⛔🥅\n\n${cleanSheetsTable}`;
room.sendAnnouncement(messageContent, player.id, 0x04FF5D, "bold");
sendToDiscord(player, messageContent, 0xFFFF00);
      return true;
}

// Comando !goles-recibidos para mostrar el ranking de mayor cantidad de goles recibidos
  if (mensajeEnMinusculas === "!goles-recibidos") {
    if (isCooldown(player, "!goles-recibidos")) {
      room.sendAnnouncement("⚠️ Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false;
    }
  // Crear una lista de jugadores ordenada por goles recibidos
  let playersByGoalsReceived = Object.keys(playerGoalsReceived).map(playerName => ({ playerName, goalsReceived: playerGoalsReceived[playerName] }));
  playersByGoalsReceived.sort((a, b) => b.goalsReceived - a.goalsReceived);

  // Formatear el mensaje con la tabla de goles recibidos
  let goalsReceivedTable = playersByGoalsReceived.map((entry, index) => `${getRankEmoji(index)} ${entry.playerName}: ${entry.goalsReceived} goles recibidos`);
  goalsReceivedTable = goalsReceivedTable.join("\n");

// ⚽🥅 Tabla de Goles Recibidos
messageContent = `⚽🥅 ¡Tabla de Goles Recibidos! 🥅⚽\n\n${goalsReceivedTable}`;
room.sendAnnouncement(messageContent, player.id, 0xFF5C29, "bold");
sendToDiscord(player, messageContent, 0xFFFF00);
      return true;
}

  // Comando !promedios-recibidos para mostrar la tabla de promedios de goles recibidos
  if (mensajeEnMinusculas === "!promedios-recibidos") {
    if (isCooldown(player, "!promedios-recibidos")) {
      room.sendAnnouncement("⚠️ Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false; // Evitar que se envíe el mensaje del comando
    }

    // Crear una lista de jugadores ordenada por el promedio de goles recibidos cada 5 minutos
    let playersByGoalAverage = Object.keys(playerStats).map(playerName => {
      const goalsReceived = playerGoalsReceived[playerName] || 0;
      const goalkeeperTime = playerGoalkeeperTime[playerName] || 0;
      const goalkeeperTimeInMinutes = (goalkeeperTime / 60) / 60;
      const intervaloMinutos = 5;
      const golesRecibidosPorIntervalo = goalsReceived / (goalkeeperTimeInMinutes / intervaloMinutos);

      return { playerName, goalAverage: golesRecibidosPorIntervalo };
    });

    // Ordenar de menor a mayor
    playersByGoalAverage.sort((a, b) => a.goalAverage - b.goalAverage);

    // Formatear el mensaje con la tabla de promedio de goles recibidos cada 5 minutos
    let goalAverageTable = playersByGoalAverage.map((entry, index) => `${getRankEmoji(index)} ${entry.playerName}: ${entry.goalAverage.toFixed(2)} goles cada 5 minutos`);
    goalAverageTable = goalAverageTable.join("\n");

// 📊🥅 Promedio de Goles Recibidos Cada 5 Minutos
messageContent = `📊🥅 ¡Promedio de Goles Recibidos Cada 5 Minutos! \n\n${goalAverageTable}`;
room.sendAnnouncement(messageContent, player.id, 0xF9FF08, "bold");
sendToDiscord(player, messageContent, 0xFFFF00);

    return true; // Permitir que se envíe el mensaje del comando
  }


  if (mensajeEnMinusculas === "!presencias") {
    if (isCooldown(player, "!presencias")) {
      room.sendAnnouncement("⚠️ Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false; // Evitar que se envíe el mensaje del comando
    }
  // Creamos una lista de jugadores en orden descendente de partidos jugados
  let topPresences = [];
  for (const player in playerStats) {
    topPresences.push({ player, totalGames: playerStats[player].totalGames });
  }
  topPresences.sort((a, b) => b.totalGames - a.totalGames); // Ordenamos por partidos jugados
  topPresences = topPresences.map((entry, index) => `${getRankEmoji(index)} ${entry.player}: ${entry.totalGames} partidos jugados`);
  topPresences = topPresences.join("\n");

// 🎮 Tabla de Partidos Jugados
messageContent = `🏆 ¡Tabla de Partidos Jugados! 🎮\n\n${topPresences}`;
room.sendAnnouncement(messageContent, player.id, 0xFFB900, "bold");
sendToDiscord(player, messageContent, 0xFFFF00);
return true;
}
  if (mensajeEnMinusculas === "!viciosos") {
    if (isCooldown(player, "!viciosos")) {
      room.sendAnnouncement("⚠️ Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false; // Evitar que se envíe el mensaje del comando
    }
  // Creamos una lista de jugadores en orden descendente de tiempo jugado
  let topViciosos = [];
  for (const player in playerMinutesPlayed) {
    const minutesPlayedInMinutes = playerMinutesPlayed[player] / 60 / 60;
    const minutes = Math.floor(minutesPlayedInMinutes);
    const seconds = Math.floor((minutesPlayedInMinutes * 60) % 60);

    let timePlayedMessage = "";

    if (minutesPlayedInMinutes >= 60) {
      const hours = Math.floor(minutesPlayedInMinutes / 60);
      const remainingMinutes = minutes - hours * 60;
      timePlayedMessage = `⏱️ Tiempo Jugado: ${hours} hora${hours > 1 ? 's' : ''}, ${remainingMinutes} minuto${remainingMinutes > 1 ? 's' : ''} y ${seconds} segundo${seconds > 1 ? 's' : ''}`;
    } else if (minutesPlayedInMinutes >= 1) {
      timePlayedMessage = `⏱️ Tiempo Jugado: ${minutes} minuto${minutes > 1 ? 's' : ''} y ${seconds} segundo${seconds > 1 ? 's' : ''}`;
    } else {
      timePlayedMessage = `⏱️ Tiempo Jugado: ${seconds} segundo${seconds > 1 ? 's' : ''}`;
    }

    topViciosos.push({ player, minutesPlayed: playerMinutesPlayed[player], timePlayedMessage });
  }

  topViciosos.sort((a, b) => b.minutesPlayed - a.minutesPlayed); // Ordenamos por tiempo jugado
  topViciosos = topViciosos.map((entry, index) => `${getRankEmoji(index)} ${entry.player}: ${entry.timePlayedMessage}`);
  topViciosos = topViciosos.join("\n");

// ⏱️ Tabla de Tiempo Jugado
messageContent = `🏆 ¡Tabla de Tiempo Jugado! ⏱️\n\n${topViciosos}`;
room.sendAnnouncement(messageContent, player.id, 0xFFA500, "bold");
sendToDiscord(player, messageContent, 0xFFFF00);
      return true;
}


  if (mensajeEnMinusculas === "!ganadores") {
    if (isCooldown(player, "!ganadores")) {
      room.sendAnnouncement("⚠️ Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false; // Evitar que se envíe el mensaje del comando
    }
  // Creamos una lista de jugadores en orden descendente de porcentaje de victorias
  let topWinners = [];
  for (const player in playerStats) {
    const victories = playerStats[player].victories;
    const totalGames = playerStats[player].totalGames;
    const winPercentage = totalGames === 0 ? 0 : (victories / totalGames) * 100;
    topWinners.push({ player, winPercentage });
  }
  topWinners.sort((a, b) => b.winPercentage - a.winPercentage); // Ordenamos por porcentaje de victorias
  topWinners = topWinners.map((entry, index) => `${getRankEmoji(index)} ${entry.player}: ${entry.winPercentage.toFixed(2)}% de victorias`);
  topWinners = topWinners.join("\n");

// 📈 Tabla de Porcentaje de Victorias
messageContent = `🏆 ¡Tabla de Porcentaje de Victorias! 📈\n\n${topWinners}`;
room.sendAnnouncement(messageContent, player.id, 0xFFD700, "bold");
sendToDiscord(player, messageContent, 0xFFFF00);
      return true;
}


// Comando !equilibrar para equilibrar equipos por nivel
if (message === "!equilibrar" && player.admin) {
  const players = room.getPlayerList();

  // Filtrar a los jugadores que están en el campo
  const activePlayers = players.filter(p => p.team !== 0 && p.position !== null);

  // Ordenar a los jugadores activos por nivel de mayor a menor
  const sortedPlayers = activePlayers.sort((a, b) => {
    const aPoints = (totalPlayerGoals[a.name] || 0) + ((totalPlayerAssists[a.name] || 0) * 0.7);
    const bPoints = (totalPlayerGoals[b.name] || 0) + ((totalPlayerAssists[b.name] || 0) * 0.7);
    return bPoints - aPoints;
  });

  // Distribuir a los jugadores en dos equipos equilibrados
  const team1 = [];
  const team2 = [];
  let totalPointsTeam1 = 0;
  let totalPointsTeam2 = 0;

  // Iterar sobre los jugadores y asignarlos a los equipos de manera equitativa
  for (let i = 0; i < sortedPlayers.length; i++) {
    const currentPlayer = sortedPlayers[i];
    const currentPlayerPoints = (totalPlayerGoals[currentPlayer.name] || 0) + ((totalPlayerAssists[currentPlayer.name] || 0) * 0.7);

    if (totalPointsTeam1 <= totalPointsTeam2) {
      team1.push(currentPlayer);
      totalPointsTeam1 += currentPlayerPoints;
    } else {
      team2.push(currentPlayer);
      totalPointsTeam2 += currentPlayerPoints;
    }
  }

  // Asignar los equipos a los jugadores
  team1.forEach(player => room.setPlayerTeam(player.id, 1));
  team2.forEach(player => room.setPlayerTeam(player.id, 2));

  room.sendAnnouncement("¡Equipos equilibrados según los niveles de los jugadores! ⚖️📊", null, 0xffff99, "bold", 0);
}
  if (mensajeEnMinusculas === "!puntos") {
    if (isCooldown(player, "!puntos")) {
      room.sendAnnouncement("⚠️ Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false; // Evitar que se envíe el mensaje del comando
    }
  // Crear una lista de jugadores con sus puntajes y niveles
  let playerScoresAndLevels = [];
  for (const playerName in totalPlayerGoals) {
    const goals = totalPlayerGoals[playerName] || 0;
    const assists = totalPlayerAssists[playerName] || 0;
    const totalPoints = goals + (assists * 0.7);
    const levelInfo = getLevelInfo(totalPoints);
    playerScoresAndLevels.push({ playerName, totalPoints, level: levelInfo.level });
  }
  playerScoresAndLevels.sort((a, b) => b.totalPoints - a.totalPoints); // Ordenar en orden descendente
  playerScoresAndLevels = playerScoresAndLevels.map((entry, index) => `${getRankEmoji(index)} ${entry.playerName}: ${entry.totalPoints.toFixed(2)} puntos - Nivel: ${entry.level}`);
  playerScoresAndLevels = playerScoresAndLevels.join("\n");

// 📊 Lista de Puntajes y Niveles
messageContent = `🏆 ¡Lista de Puntajes y Niveles! 📊\n\n${playerScoresAndLevels}`;
room.sendAnnouncement(messageContent, player.id, 0x00FF00, "bold");
sendToDiscord(player, messageContent, 0xFFFF00);
	return true;
}
  if (mensajeEnMinusculas === "!goleadores") {
    if (isCooldown(player, "!goleadores")) {
      room.sendAnnouncement("⚠️ Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false; // Evitar que se envíe el mensaje del comando
    }
  // Creamos una lista de goleadores en orden descendente de cantidad de goles
  let topScorers = [];
  for (const player in totalPlayerGoals) {
    topScorers.push({ player, goals: totalPlayerGoals[player] });
  }
  topScorers.sort((a, b) => b.goals - a.goals); // Cambio en la función de ordenamiento
  topScorers = topScorers.map((entry, index) => `${getRankEmoji(index)} ${entry.player}: ${entry.goals} goles`);
  topScorers = topScorers.join("\n");

  // Mostramos la tabla de goleadores en el chat del host
        let messageContent = `🏆 ¡Tabla de Goleadores! ⚽\n\n${topScorers}`;

        room.sendAnnouncement(messageContent, player.id, 0xffff00, "bold");
sendToDiscord(player, messageContent, 0xFFFF00);
	return true;
}
  if (mensajeEnMinusculas === "!asistidores") {
    if (isCooldown(player, "!asistidores")) {
      room.sendAnnouncement("⚠️ Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false; // Evitar que se envíe el mensaje del comando
    }
  // Creamos una lista de asistidores en orden descendente de cantidad de asistencias
  let topAssisters = [];
  for (const player in totalPlayerAssists) {
    topAssisters.push({ player, assists: totalPlayerAssists[player] });
  }
  topAssisters.sort((a, b) => b.assists - a.assists); // Cambio en la función de ordenamiento
  topAssisters = topAssisters.map((entry, index) => `${getRankEmoji(index)} ${entry.player}: ${entry.assists} asistencias`);
  topAssisters = topAssisters.join("\n");

  // Mostramos la tabla de asistidores en el chat del host
        let messageContent = `🏆 ¡Tabla de Asistidores! 👟\n\n${topAssisters}`;

        room.sendAnnouncement(messageContent, player.id, 0x7DFFF9, "bold");
sendToDiscord(player, messageContent, 0xFFFF00);
	return true;
}
  if (mensajeEnMinusculas === "!promedios") {
    if (isCooldown(player, "!promedios")) {
      room.sendAnnouncement("⚠️ Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false; // Evitar que se envíe el mensaje del comando
    }
  // Creamos una lista de jugadores con sus promedios de gol por minuto en orden descendente
  let topGoalScorersPerMinute = [];
  for (const player in totalPlayerGoals) {
    const goals = totalPlayerGoals[player] || 0;
    const minutesPlayed = playerMinutesPlayed[player] || 1; // Evitar la división por cero
    const minutesPlayedInMinutes = (minutesPlayed / 60) / 60;
    const goalPerMinute = goals / minutesPlayedInMinutes;

    let frequencyMessage = "";
    if (goalPerMinute > 0) {
      const goalFrequency = 60 / goalPerMinute;
      const hoursBetweenGoals = Math.floor(goalFrequency / 3600);
      const minutesBetweenGoals = Math.floor((goalFrequency % 3600) / 60);
      const secondsBetweenGoals = Math.floor(goalFrequency % 60);

      if (hoursBetweenGoals > 0) {
        frequencyMessage += `${hoursBetweenGoals} hora${hoursBetweenGoals > 1 ? 's' : ''}`;
      }

      if (minutesBetweenGoals > 0) {
        if (frequencyMessage !== "") {
          frequencyMessage += ` ${minutesBetweenGoals} minuto${minutesBetweenGoals > 1 ? 's' : ''}`;
        } else {
          frequencyMessage += `${minutesBetweenGoals} minuto${minutesBetweenGoals > 1 ? 's' : ''}`;
        }
      }

      if (secondsBetweenGoals > 0) {
        if (frequencyMessage !== "") {
          frequencyMessage += ` ${secondsBetweenGoals} segundo${secondsBetweenGoals > 1 ? 's' : ''}`;
        } else {
          frequencyMessage += `${secondsBetweenGoals} segundo${secondsBetweenGoals > 1 ? 's' : ''}`;
        }
      }
    }

    topGoalScorersPerMinute.push({ player, goalPerMinute, frequencyMessage });
  }
  topGoalScorersPerMinute.sort((a, b) => b.goalPerMinute - a.goalPerMinute); // Ordenamos por promedio de gol por minuto
  topGoalScorersPerMinute = topGoalScorersPerMinute.map((entry, index) => `${getRankEmoji(index)} ${entry.player}: ${entry.goalPerMinute.toFixed(2)} goles por minuto${entry.frequencyMessage ? ` (1 gol cada ${entry.frequencyMessage})` : ''}`);
  topGoalScorersPerMinute = topGoalScorersPerMinute.join("\n");

  // Mostramos el ranking de promedios de gol por minuto en el chat del host
        let messageContent = `⚽🏆 ¡Ranking de Promedios de Gol por Minuto! ⏱️⚽\n\n${topGoalScorersPerMinute}`;

        room.sendAnnouncement(messageContent, player.id, 0xFFB900, "bold");
sendToDiscord(player, messageContent, 0xFFFF00);
	return true;
}



    var lowerCaseMessage = removeAccents(message.toLowerCase());

// Comando para iniciar la votación de administrador
  if (!adminVotingActive && room.getPlayerList().length >= MIN_PLAYERS_FOR_ADMIN_VOTE && message.startsWith('!admin')) {
    startAdminVoting();
  }

if (adminVotingActive && message.startsWith('!admin ')) {
  const votedPlayerId = parseInt(message.slice(7));
  if (!isNaN(votedPlayerId) && room.getPlayer(votedPlayerId) && votedPlayerId !== player.id && !isPlayerVoted(player.id, adminVotes)) {
    adminVotes[votedPlayerId] = adminVotes[votedPlayerId] || [];
    adminVotes[votedPlayerId].push(player.id);

    const voteCount = adminVotes[votedPlayerId].length;
    const votesNeededToBecomeAdmin = Math.ceil(room.getPlayerList().length * (PorcentajeDeVotosAdmin / 100)); // Calcula los votos según el porcentaje
    const votesRemaining = votesNeededToBecomeAdmin - voteCount;

    const voteType = voteCount === 1 ? 'voto' : 'votos';
    const votedPlayer = room.getPlayer(votedPlayerId);
    const votedPlayerInfo = votedPlayer ? `${votedPlayer.name} (ID: ${votedPlayerId})` : votedPlayerId.toString();

    room.sendAnnouncement(
      `🗳️ ¡@${player.name} ha votado a ${votedPlayerInfo} para ser ADMINISTRADOR del host! (${voteCount} ${voteType}). 🗦👑🗧 \n 📢 🗳️ VOTOS OBTENIDOS: ${voteCount} ✅ | ⏳ VOTOS RESTANTES: ${votesRemaining > 0 ? votesRemaining : 0}`,
      null, 0x00ff59, "bold", 2
    );

    if (voteCount >= votesNeededToBecomeAdmin) {
      // Si el jugador alcanza o supera los votos necesarios, se convierte en administrador
      room.setPlayerAdmin(votedPlayerId, true);
      room.sendAnnouncement(
        `🎉 ¡El jugador ${votedPlayerInfo} ha sido elegido como el nuevo administrador! (${voteCount} votos a favor) ¡Felicidades! 🥳`,
        null, 0x00FF00
      );
      endAdminVoting(); // Finalizar la votación de administrador ya que se ha seleccionado al nuevo administrador
    }
  } else {
    room.sendAnnouncement(
      `¨[❌] ${player.name}, el jugador que mencionaste no se encuentra en el host, ingresaste un valor incorrecto o ya has votado por ese jugador. Asegúrate de usar "!admin ID" con el número de ID correcto y que no hayas votado previamente. ✅  \n 📋🔍 Lista de IDs de jugadores: !ids`,
      player.id, 0xffbf00, "small-bold", 1
    );
  }
} else if (!adminVotingActive && room.getPlayerList().length < MIN_PLAYERS_FOR_ADMIN_VOTE && message.startsWith('!admin ')) {
  room.sendAnnouncement(
    `[❗] La votación para elegir administrador no se puede iniciar. \n ⏬ Se necesitan un mínimo de ${MIN_PLAYERS_FOR_ADMIN_VOTE} jugadores para iniciar una votación de administrador. 🗳️`,
    player.id, 0xffbf00, "small-bold", 1
  );
} else if (adminVotingActive && message.startsWith('!admin')) {
  room.sendAnnouncement(
    `[❗] ${player.name}, para votar a un jugador como administrador, usa "!admin ID" con el número de ID correcto. \n 📋🔍 Lista de IDs de jugadores: !ids`,
    player.id, 0xffbf00, "small-bold", 1
  );
}
// Lista de mensajes humillantes
const mensajesHumillantes = [
  "Kickeado por payaso. 🤡",
  "Adiós, fantasma. Los admins no se tocan. 👻",
  "¿Expulsar a un admin? Kickeado por gracioso. Ni lo intentes. 😂👋",
  "¿Expulsar a un admin? Kickeado por atrevido. 😎🔥",
  "Kickeado por intentar ser el lobo. Spoiler: eres el cordero. 🐺❌",
  "Intentaste expulsar a un admin… pero te autoexpulsaste por tonto. 🤡",
  "¿Creíste que podías echar a un admin? JAJAJA. Kickeado por payaso. 🤡",
  "¿Te pensaste el dueño de la sala? Spoiler: no lo eres. Chau. 👋😂",
  "Tienes el coeficiente de una piedra. Mejor no vuelvas. 🪨❌",
  "Esto es HaxBall, no un circo. Payasos como tú, afuera. 🤹🚫"
];

// Función para obtener un mensaje aleatorio
function obtenerMensajeHumillante() {
  const indice = Math.floor(Math.random() * mensajesHumillantes.length);
  return mensajesHumillantes[indice];
}

// Comando para iniciar la votación de expulsión
if (!kickVotingActive && room.getPlayerList().length >= MIN_PLAYERS_FOR_KICK_VOTE && message.startsWith('!expulsar')) {
  startKickVoting();
}

if (kickVotingActive && message.startsWith('!expulsar ')) {
  const kickedPlayerId = parseInt(message.slice(9));
  if (!isNaN(kickedPlayerId) && room.getPlayer(kickedPlayerId)) {
    const kickedPlayer = room.getPlayer(kickedPlayerId);

    // Verificar si el jugador a expulsar es un administrador
    if (AdministradoresDelHost.includes(kickedPlayer.name)) {
      // Obtener un mensaje aleatorio y expulsar al jugador que intentó expulsar al administrador
      const mensajeHumillante = obtenerMensajeHumillante();
      room.kickPlayer(player.id, mensajeHumillante, false);

      // Enviar un anuncio público humillante
      room.sendAnnouncement(
        `[${player.name}] intentó expulsar a un admin con el comando !expulsar y terminó kickeado como un completo idiota. Aprendan de su error. 🤡`,
        null, 0xFFFFFF, "bold", 2
      );

      return; // Salir de la función para evitar procesar más el comando
    }

    if (kickedPlayerId !== player.id && !isPlayerVoted(player.id, kickVotes)) {
      kickVotes[kickedPlayerId] = kickVotes[kickedPlayerId] || [];
      kickVotes[kickedPlayerId].push(player.id);

      const voteCount = kickVotes[kickedPlayerId].length;
      const votesNeededToKick = Math.ceil(room.getPlayerList().length * (PorcentajeDeVotosBan / 100)); // Calcula los votos según el porcentaje
      const votesRemaining = votesNeededToKick - voteCount;

      const voteType = voteCount === 1 ? 'voto' : 'votos';
      const kickedPlayerInfo = kickedPlayer ? `${kickedPlayer.name} (ID: ${kickedPlayerId})` : kickedPlayerId.toString();

      room.sendAnnouncement(
        `🗳️ ¡@${player.name} ha votado para EXPULSAR a ${kickedPlayerInfo} del host! (${voteCount} ${voteType}). 🚫 \n 📢 🗳️ VOTOS OBTENIDOS: ${voteCount} ✅ | ⏳ VOTOS RESTANTES: ${votesRemaining > 0 ? votesRemaining : 0}`,
        null, 0xFFE000, "bold", 2
      );

      if (voteCount >= votesNeededToKick) {
        // Si el jugador alcanza o supera los votos necesarios, se expulsa al jugador
        room.kickPlayer(kickedPlayerId, "Expulsado por votación de la comunidad", true);
        room.sendAnnouncement(
          `👢 ¡El jugador ${kickedPlayerInfo} ha sido expulsado por votación de la comunidad! (${voteCount} votos a favor)`,
          null, 0xFF0000
        );
        endKickVoting(); // Finalizar la votación de expulsión después de expulsar al jugador
      }
    }
  } else if (isNaN(kickedPlayerId)) {
    room.sendAnnouncement(
      `[❗] ${player.name}, después de "!expulsar" debes ingresar el número de ID del jugador que deseas expulsar. \n Ejemplo: !expulsar 123 \n 📋🔍 Lista de IDs de jugadores: !ids`,
      player.id, 0xffbf00, "small-bold", 1
    );
  } else {
    room.sendAnnouncement(
      `[❌] ${player.name}, el jugador que mencionaste no se encuentra en el host, ingresaste un valor incorrecto o ya has votado por ese jugador. Asegúrate de usar "!expulsar ID" con el número de ID correcto y que no hayas votado previamente. \n 📋🔍 Lista de IDs de jugadores: !ids`,
      player.id, 0xffbf00, "small-bold", 1
    );
  }
} else if (!kickVotingActive && room.getPlayerList().length < MIN_PLAYERS_FOR_KICK_VOTE && message.startsWith('!expulsar ')) {
  room.sendAnnouncement(
    `[❗] La votación para expulsar a un jugador no se puede iniciar. \n ⏬ Se necesitan un mínimo de ${MIN_PLAYERS_FOR_KICK_VOTE} jugadores para iniciar una votación de expulsión. 🗳️`,
    player.id, 0xffbf00, "small-bold", 1
  );
} else if (kickVotingActive && message.startsWith('!expulsar')) {
  room.sendAnnouncement(
    `[❗] ${player.name}, para votar la expulsión de un jugador, usa "!expulsar ID" con el número de ID correcto. \n Ejemplo: !expulsar 123 \n 📋🔍 Lista de IDs de jugadores: !ids`,
    player.id, 0xffbf00, "small-bold", 1
  );
}
  // Verificar si el jugador es el administrador y si el mensaje comienza con "!publicidad"
// Verificar si el jugador es el administrador y si el mensaje comienza con "!publicidad"
if (player.admin && message.startsWith('!publicidad')) {
  // Obtener la cantidad de minutos y el mensaje de la publicidad
  const command = message.split(' ');
  if (command.length >= 3) {
    const minutes = parseFloat(command[1]); // Utilizamos parseFloat en lugar de parseInt para permitir decimales
    const msg = command.slice(2).join(' ');

    // Verificar si los minutos son válidos
    if (!isNaN(minutes) && minutes > 0) { // Cambiamos la condición a minutes > 0
      // Actualizar los datos de la publicidad
      advertisingMinutes = minutes;
      advertisingMessage = msg;

      // Reiniciar el intervalo de publicidad
      clearInterval(advertisingInterval);
      advertisingInterval = setInterval(sendAdvertisingMessage, advertisingMinutes * 60 * 1000);

      // Enviar un mensaje de confirmación al administrador
      room.sendAnnouncement(`Publicidad programada para cada ${advertisingMinutes} minutos: "${advertisingMessage}"`);
    } else {
      // Enviar un mensaje de error al administrador si se ingresa 0 como cantidad de minutos
      if (minutes === 0) {
        room.sendAnnouncement('Error: La cantidad de minutos debe ser un número mayor a 0.');
      } else {
        // Enviar un mensaje de error al administrador si el formato es incorrecto
        room.sendAnnouncement('Error: La cantidad de minutos debe ser un número mayor a 0.');
      }
    }
  } else {
    // Enviar un mensaje de error al administrador
    room.sendAnnouncement('Error: Comando de publicidad inválido. Formato correcto: !publicidad <minutos> <mensaje>');
  }
}

  // Verificar si el jugador que envió el mensaje es el administrador del host
  if (player.admin) {
    // Verificar si el mensaje comienza con "!silenciar"
    if (message.indexOf('!silenciar') === 0) {
      // Obtener la palabra a silenciar
      var palabra = message.split(' ')[1];
      // Agregar la palabra a la lista de palabras silenciadas
      palabrasSilenciadas.push(palabra);
      // Enviar un anuncio al administrador confirmando la acción
      room.sendAnnouncement('La palabra "' + palabra + '" ha sido silenciada.', null, 0xFF0000, "bold");
    }
    // Verificar si el mensaje comienza con "!desilenciar"
    else if (message.indexOf('!desilenciar') === 0) {
      // Obtener la palabra a desilenciar
      var palabra = message.split(' ')[1];
      // Encontrar el índice de la palabra en la lista de palabras silenciadas
      var indice = palabrasSilenciadas.indexOf(palabra);
      // Verificar si la palabra se encontraba silenciada
      if (indice !== -1) {
        // Eliminar la palabra de la lista de palabras silenciadas
        palabrasSilenciadas.splice(indice, 1);
        // Enviar un anuncio al administrador confirmando la acción
        room.sendAnnouncement('La palabra "' + palabra + '" ha sido habilitada.', null, 0xFF0000, "bold");
      }
    }
  }
  else {
    // Verificar si el mensaje contiene alguna palabra silenciada
    if (palabrasSilenciadas.some(function (palabra) {
      return message.indexOf(palabra) !== -1;
    })) {
      // Cancelar el envío del mensaje del jugador
      return false;
    }
  }
if (player.admin) {
  if (message === "!random") {
    shuffleTeams();
  } else if (message === "!balance") {
    balanceTeams();
  } else if (message === "!auto_balance") {
    if (autoBalanceEnabled) {
      autoBalanceEnabled = false; // Desactivar el equilibrio automático
      room.sendAnnouncement("¡El equilibrio automático de equipos ha sido desactivado! ⚖️⚙️❌", null, 0xff2020, "bold");
    } else {
      autoBalanceEnabled = true; // Activar el equilibrio automático
      room.sendAnnouncement("¡El equilibrio automático de equipos ha sido activado! ⚖️⚙️✅", null, 0x00ff3c, "bold");
    }
  }
}
 var lowerCaseMessage = removeAccents(message.toLowerCase());

  if (
    lowerCaseMessage.includes("como me hago gordo") ||
    lowerCaseMessage.includes("como me hago pequeño") ||
    lowerCaseMessage.includes("como me hago grande") ||
    lowerCaseMessage.includes("porque hay un gordo") ||
    lowerCaseMessage.includes("porque hay uno pequeño") ||
    lowerCaseMessage.includes("porque hay un enano") ||
    lowerCaseMessage.includes("por que hay un gordo") ||
    lowerCaseMessage.includes("por que hay uno pequeño") ||
    lowerCaseMessage.includes("por que hay un enano") ||
    lowerCaseMessage.includes("quiero ser enano") ||
    lowerCaseMessage.includes("quiero ser gordo") ||
    lowerCaseMessage.includes("como me hago gigante")
  ) {
    // Responder al jugador con un anuncio
    room.sendAnnouncement("Para cambiar tu tamaño, utiliza el comando !size", player.id, 0xFF0000);
  }
  if (message === "!posesion") {
    const totalPosesion = equipoAzulPosesion + equipoRojoPosesion;
    let porcentajeAzul = 0;
    let porcentajeRojo = 0;

    // Calcular el porcentaje de posesión de cada equipo
    if (totalPosesion > 0) {
      porcentajeAzul = (equipoAzulPosesion / totalPosesion) * 100;
      porcentajeRojo = (equipoRojoPosesion / totalPosesion) * 100;
    }

    // Enviar el anuncio con el porcentaje de posesión de cada equipo
    room.sendAnnouncement(
      ` ` + teamRed + `  ${porcentajeAzul.toFixed(2)}% - ` + teamBlue + ` : ${porcentajeRojo.toFixed(2)}%`
    );
  }
    if (player.admin) {
        const parts = message.split(' ');
        if (parts[0] === '!juegan' && parts.length === 2) {
            const maxPlayers = parseInt(parts[1]);
            if (!isNaN(maxPlayers) && maxPlayers >= 1 && maxPlayers <= 15) {
                maxPlayersPerTeam = maxPlayers;
                room.sendAnnouncement(player.name + ' ha establecido el número máximo de jugadores por equipo en ' + maxPlayersPerTeam + ' 🏆', null, 0x00ff55, 'bold');
                // Activar el modo "Juegan Algunos"
                modoJueganAlgunos = true;
                // Desactivar el modo "Juegan Todos"
                modoJueganTodos = false;
            } else {
                room.sendAnnouncement(player.name + ', por favor, introduce un número válido entre 1 y 15. 🛑', player.id, 0xff6340, 'bold');
            }
        }  else if (parts[0] === '!juegantodos') {
            // Activar el modo "Juegan Todos" y desactivar el modo "Juegan Algunos"
            modoJueganTodos = !modoJueganTodos;
            modoJueganAlgunos = false;
            if (modoJueganTodos) {
                room.sendAnnouncement(player.name + ' ha ACTIVADO el Modo 🎮 JUEGAN TODOS 🤩', null, 0x00ff55, 'bold');
            } else {
                room.sendAnnouncement(player.name + ' ha DESACTIVADO el Modo 🎮 JUEGAN TODOS 🚫', null, 0xff6340, 'bold');
            }
        } else if (parts[0] === '!juegan-off') {
            // Desactivar el modo "Juegan Algunos"
            modoJueganAlgunos = false;
            room.sendAnnouncement(player.name + ' ha DESACTIVADO el Modo 🎮 JUEGAN ALGUNOS 🚫', null, 0xff6340, 'bold');
        }
    }

  if (mensajeEnMinusculas.startsWith("!pregunta")) {
    if (isCooldown(player, "!pregunta")) {
      room.sendAnnouncement("⚠️ Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false; // Evitar que se envíe el mensaje del comando
    }

    var pregunta = message.substring(9).trim(); // Obtiene la pregunta que sigue al comando
    var respuesta = generar_respuesta_aleatoria();
    var anuncio = player.name + " ha preguntado: " + pregunta + " || 🗿 CHAD dice: \"" + respuesta + "\"";
    room.sendAnnouncement(anuncio, null, 0xffac5e, "bold");

    return true; // Permitir que se envíe el mensaje del comando
  }
	if (message.startsWith("@@")) {
		message = message.substr(2).trim();
		if (message.indexOf(' ') !== -1) {
			let args = message.match(/^(\S+)\s(.*)/).slice(1);
			
			if (args.length > 1) {
				var pmMsg = args[1];
				var players = room.getPlayerList();
				var pmSent = false;
				players.forEach(function(pmPlayer) {
					if (pmPlayer.name === args[0] || pmPlayer.name === args[0].replace(/_/g, ' ')) {
						whisper("[💬 PM ➤ " + pmPlayer.name + "] " + player.name + ": " + pmMsg, player.id, 0xc7a2ff, "bold", 1);	
						whisper("[💬 PM] " + player.name + ": " + pmMsg, pmPlayer.id, 0xc7a2ff, "bold", 2);
						pmSent = true;					
					}
				});
				if (pmSent == false) {
					whisper("No se pudo encontrar el usuario '" + args[0] + "'", player.id, 0xff20ff, "normal", 1);
				}
				return false;
			}
		}			
	}
    if(filter(message)) return false;
    var Jugadores = room.getPlayerList();

    console.log(new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds() + "." + new Date().getMilliseconds() + " 💬 " + player.name + " [" + player.id + "]: " + message);
    if(message.includes(ClaveParaSerAdmin)) {     room.setPlayerAdmin(player.id, true);
    return false; 
		}
		playerFound = true;
	var _0x21989d = _0x3c81f9;
let spacePos = message.search(" ");
let command = message.substr(0, spacePos !== -1 ? spacePos : message.length);
if (commands.hasOwnProperty(command)) {
    let currentTime = Date.now();
    if (player.admin || !lastCommandTime[player.id] || currentTime - lastCommandTime[player.id] > commandCooldown) {
        commands[command](player, message);
        lastCommandTime[player.id] = currentTime;
        return true; // Mostrar el comando en el chat
    } else {
        room.sendAnnouncement("Por favor, espera antes de usar otro comando.", player.id);
        return false; // No mostrar el comando en el chat
    }
}

spacePos = message.search(" ");
let comandoGLH = message.substr(0, spacePos !== -1 ? spacePos : message.length).toLowerCase();
if (comandosGLH.hasOwnProperty(comandoGLH)) {
    let currentTime = Date.now();
    if (player.admin || !lastCommandTime[player.id] || currentTime - lastCommandTime[player.id] > commandCooldown) {
        comandosGLH[comandoGLH](player, message);
        lastCommandTime[player.id] = currentTime;
        return true; // Mostrar el comando en el chat
    } else {
        room.sendAnnouncement("Por favor, espera antes de usar otro comando.", player.id);
        return false; // No mostrar el comando en el chat
    }
}
    if (playerInactivity.has(player.id)) {
        clearTimeout(playerInactivity.get(player.id));
        const inactivityTimer = setTimeout(() => {
            // Expulsa al jugador por inactividad
            room.kickPlayer(player.id, "⌛️ EXPULSADO por INACTIVIDAD 😴🚫", false);
            // Elimina la entrada del mapa de inactividad
            playerInactivity.delete(player.id);
        }, inactivityTimeout);
        playerInactivity.set(player.id, inactivityTimer);
    }
    if(message.includes("cuando") && PartidoArrancado == true) return penalespregunta(player, message);
    if(message.includes("cuanto") && PartidoArrancado == true) return penalespregunta(player, message);
    if(message.includes("time") && PartidoArrancado == true) return penalespregunta(player, message);
    if(message.includes("tiempo") && PartidoArrancado == true) return penalespregunta(player, message);
    if(message.includes("equipos") && PartidoArrancado == true) return QuienJuegaPregunta(player, message);

	if (message == '!entrenamiento' && player.admin == true) { 			
		if (room.getScores() == null) {
				currentMap = getMapName(message); 
				room.setCustomStadium(getEntrenamientoRealSoccer());
				RSRMap = true;

			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}
	if (message == '!rs' && player.admin == true) { 			
		if (room.getScores() == null) {
				currentMap = getMapName(message); 
				room.setCustomStadium(getRealSoccerMap2());
				RSRMap = true;

			room.setScoreLimit(0);
			room.setTimeLimit(0);	
			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}

	if (message == '!rsoveja' && player.admin == true) { 			
		if (room.getScores() == null) {
				currentMap = getMapName(message); 
				room.setCustomStadium(getRealSoccerMapOveja());

				RSRMap = true;

			room.setScoreLimit(0);
			room.setTimeLimit(0);	
			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}
	if (message == '!pensred' && player.admin == true) { 
			if (room.getScores() == null) {
				RSRMap = false;
isAFKpaused = true;
				currentMap = getMapName(message); 
				room.setCustomStadium(getPenaltyRedMap());
			room.setScoreLimit(0);
			room.setTimeLimit(0);
			powerShotMode = false;	
			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}
	if (message == '!pensblue' && player.admin == true) { 
			if (room.getScores() == null) {
				RSRMap = false;
isAFKpaused = true;
				currentMap = getMapName(message); 
				room.setCustomStadium(getPenaltyBlueMap());
			room.setScoreLimit(0);
			room.setTimeLimit(0);	
			powerShotMode = false;	
			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}


	if (message == '!campeones' && player.admin == true) { 
			if (room.getScores() == null) {
				RSRMap = false;
isAFKpaused = true;
				currentMap = getMapName(message); 
				room.setCustomStadium(getCampeonesMap());
		room.setScoreLimit(0);
		room.setTimeLimit(0);	
			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}
   if (message === '!premios' && player.admin === true) {
        if (room.getScores() === null) {
            // Cambios específicos para el modo premios
            cambioCami = false; // Desactiva cambio de camisetas en reinicio
            camisetaRed = "/colors red 180 F0F0F0 000000"; // Fondo gris claro, números negros
            NombreEquipoRojo = "Participantes";

            camisetaBlue = "/colors blue 180 000000 FFFFFF"; // Fondo negro, números blancos
            NombreEquipoAzul = "Staff";

            // Actualizar configuraciones de equipo para modo premios
            redData = parseColors(camisetaRed);
            blueData = parseColors(camisetaBlue);

            redAngle = redData.angle;
            blueAngle = blueData.angle;

            redTextColor = redData.textColor;
            blueTextColor = blueData.textColor;

            redColor = redData.colors;
            blueColor = blueData.colors;

            room.setTeamColors(1, redAngle, redTextColor, redColor);
            room.setTeamColors(2, blueAngle, blueTextColor, blueColor);

            teamRed = NombreEquipoRojo;
            teamBlue = NombreEquipoAzul;

            RSRMap = false;
            isAFKpaused = true;
            currentMap = getMapName(message); 
            room.setCustomStadium(getPremiosMap());
            room.setScoreLimit(0);
            room.setTimeLimit(0);
            autoBalanceEnabled = false;
            ganasigueEnabled = false;
            modoJueganAlgunos = false;

            var listajugadores = room.getPlayerList();
            // Asignación de equipos
            for (var i = 0; i < listajugadores.length; i++) {
                var currentPlayer = listajugadores[i];
                if (!currentPlayer.admin) {
                    room.setPlayerTeam(currentPlayer.id, 1); // Participantes al equipo rojo
                } else {
                    room.setPlayerTeam(currentPlayer.id, 2); // Staff al equipo azul
                }
            }
        } else {
            whisper("No puedes cambiar el mapa mientras el juego está en progreso", player.id);
        }
    }
	if (message == '!powershot' && player.admin == true) { 
			if (powerShotMode == false) {
				powerShotMode = true;
				announce("POWERSHOT ACTIVADO POR " + player.name, null, 0x00FF00);
			}
			else {
				powerShotMode = false;
				announce("POWERSHOT DESACTIVADO POR " + player.name, null, 0xFF0000);
			}
		}

    if (message.indexOf("!") === 0) {
        if (player.admin) {
            return handleAdminCommand(player, message);
        }
        return false;
    }

    // Aplicar cooldown
    if (!handleCooldown(player)) return false;

    if (message.startsWith('t ')) {
        const teamMsg = message.substring(2).trim();
        
        if (player.team === 0) {
            whisper('[⚠️] Debes estar en el Equipo Rojo 🔴 o en el Equipo Azul 🔵 para poder utilizar el Team Chat', player.id);
            return false;
        }
        
        sendTeamMessage(player, teamMsg);
        return false;
    }
    
   const isAdmin = player.admin === true;
    const mentionedPlayers = getMentionedPlayers(message);

    if (!handleMentions(player, message, adminChatColor, NombreROLAdmin, isAdmin)) {
        return false;
    }

    // Jugadores mencionados reciben el mensaje una vez
    if (mentionedPlayers.length > 0) {
    const prefix = getPlayerPrefix(player);
        const playerRole = NickNamesRol1.includes(player.name) ? { name: NombreROL1, color: ColorDelChatROL1 } :
                           NickNamesRol2.includes(player.name) ? { name: NombreROL2, color: ColorDelChatROL2 } :
                           NickNamesRol3.includes(player.name) ? { name: NombreROL3, color: ColorDelChatROL3 } :
                           NickNamesRol4.includes(player.name) ? { name: NombreROL4, color: ColorDelChatROL4 } :
                           NickNamesRol5.includes(player.name) ? { name: NombreROL5, color: ColorDelChatROL5 } :
                           NickNamesRol6.includes(player.name) ? { name: NombreROL6, color: ColorDelChatROL6 } :
                           NickNamesRol7.includes(player.name) ? { name: NombreROL7, color: ColorDelChatROL7 } :
                           isAdmin ? { name: NombreROLAdmin, color: adminChatColor } :
                           player.team === 1 ? { name: NombreROLRed, color: RedChatColor } :
                           player.team === 2 ? { name: NombreROLBlue, color: BlueChatColor } :
                           { name: NombreROLSpect, color: SpectChatColor };

        // Enviar mensaje a mencionados
        mentionedPlayers.forEach(mentionedPlayer => {
            room.sendAnnouncement(
                `${prefix} ${playerRole.name} ~ ${player.name}: ${message}`,
                mentionedPlayer.id,
                playerRole.color,
                "bold",
                2
            );
        });

        // Filtrar mencionados para que no reciban el mensaje nuevamente
        const mentionedIDs = mentionedPlayers.map(p => p.id);
        const remainingPlayers = room.getPlayerList().filter(p => !mentionedIDs.includes(p.id));

        // Los no mencionados reciben el mensaje con el estilo y color del remitente
        remainingPlayers.forEach(p => {
            room.sendAnnouncement(
                `${prefix} ${playerRole.name} ~ ${player.name}: ${message}`,
                p.id,
                playerRole.color,
                RoleAttributes[playerRole.name]?.style || "normal",
                RoleAttributes[playerRole.name]?.sound || 1
            );
        });
        
        return false;
    }

    // Mensaje normal para jugadores no mencionados
    const prefix = getPlayerPrefix(player);
    const playerRole = NickNamesRol1.includes(player.name) ? { name: NombreROL1, color: ColorDelChatROL1 } :
                       NickNamesRol2.includes(player.name) ? { name: NombreROL2, color: ColorDelChatROL2 } :
                       NickNamesRol3.includes(player.name) ? { name: NombreROL3, color: ColorDelChatROL3 } :
                       NickNamesRol4.includes(player.name) ? { name: NombreROL4, color: ColorDelChatROL4 } :
                       NickNamesRol5.includes(player.name) ? { name: NombreROL5, color: ColorDelChatROL5 } :
                       NickNamesRol6.includes(player.name) ? { name: NombreROL6, color: ColorDelChatROL6 } :
                       NickNamesRol7.includes(player.name) ? { name: NombreROL7, color: ColorDelChatROL7 } :
                       isAdmin ? { name: NombreROLAdmin, color: adminChatColor } :
                       player.team === 1 ? { name: NombreROLRed, color: RedChatColor } :
                       player.team === 2 ? { name: NombreROLBlue, color: BlueChatColor } :
                       { name: NombreROLSpect, color: SpectChatColor };

    const roleAttr = RoleAttributes[playerRole.name] || { style: "normal", sound: 1 };
    room.sendAnnouncement(
        `${prefix} ${playerRole.name} ~ ${player.name}: ${message}`,
        null,
        playerRole.color,
        roleAttr.style,
        roleAttr.sound
    );

    return false;

    if(CensuradorDeSpammeros(message)) return false;
    if (message.indexOf("!") == 0) return false; 
    }

// Función para enviar un susurro (whisper)
function whisper(message, playerId) {
    room.sendAnnouncement(message, playerId, 0xFFFF00, "bold", 2);
}

// Función para enviar el mensaje de publicidad
function sendAdvertisingMessage() {
  const currentTimez = Date.now();

  // Verificar si ha pasado el tiempo suficiente desde el último envío de publicidad
  if (currentTimez - lastAdvertisingTime >= advertisingMinutes * 60 * 1000) {
    // Enviar el mensaje de publicidad como un anuncio a todos los jugadores
    room.sendAnnouncement("　",null,0xFFFFFF,"bold",0);
    room.sendAnnouncement("　　　　　　　　" + advertisingMessage,null,0xFFFFFF,"bold",2);
    // Actualizar el tiempo del último envío de publicidad
    lastAdvertisingTime = currentTimez;
  }
}


// Función para verificar si un jugador ya ha votado
function ElJugadorYaVoto(playerId, votesObject) {
  for (const votedMap in votesObject) {
    if (votesObject[votedMap].includes(playerId)) {
      return true;
    }
  }
  return false;
}

// Función para obtener la cantidad de votos restantes
function getRemainingVotes() {
  const totalPlayers = room.getPlayerList().length;
  let playersVoted = 0;

  for (const votedMap in mapVotes) {
    playersVoted += mapVotes[votedMap].length;
  }

  const remainingVotes = totalPlayers - playersVoted;

  if (remainingVotes === 0) {
    // Si no quedan votos, finalizar la votación automáticamente
    endMapVoting();
  }

  return Math.max(0, remainingVotes);
}



// Temporizador de la votación
let votacionTimer;

// Función para verificar si un jugador ya votó en una votación específica
function isPlayerVoted(playerId, votesObject) {
  for (const votedPlayerId in votesObject) {
    if (votesObject[votedPlayerId].includes(playerId)) {
      return true;
    }
  }
  return false;
}

// Función para iniciar la votación de administrador
function startAdminVoting() {
  if (!adminVotingActive) {
    if (room.getPlayerList().length >= MIN_PLAYERS_FOR_ADMIN_VOTE) {
      adminVotingActive = true;
      adminVotes = {};

      setTimeout(function() {
        endAdminVoting();
      }, DURACION_VOTACION * 1000); // Convertir la duración de la votación de segundos a milisegundos

      room.sendAnnouncement('📢 ¡La votación para elegir un nuevo administrador ha comenzado! Escribe "!admin id" para votar por agregar un jugador como administrador. 🗳️', null, 0xFF0000);
      room.sendAnnouncement('📝 Para votar, escribe "!admin id" donde "id" es el número de ID del jugador que deseas votar para ser administrador del host. ¡Con !ids podrás ver los IDs de todos los jugadores! 🗳️', null, 0xFFFFFF);
    } else {
      room.sendAnnouncement(`❗ Se necesitan al menos ${MIN_PLAYERS_FOR_ADMIN_VOTE} jugadores para iniciar la votación de administrador. ¡Espera a que se unan más jugadores! ❗`, null, 0xFF0000);
    }
  }
}

// Función para finalizar la votación de administrador y aplicar los cambios
function endAdminVoting() {
  if (adminVotingActive) {
    adminVotingActive = false;

    let maxVotes = 0;
    let adminToAdd = null;

    for (const votedPlayerId in adminVotes) {
      const voteCount = adminVotes[votedPlayerId].length;
      if (voteCount > maxVotes) {
        maxVotes = voteCount;
        adminToAdd = votedPlayerId;
      }
    }

    const votesNeeded =  Math.ceil(room.getPlayerList().length * (PorcentajeDeVotosAdmin / 100)); 

    if (adminToAdd !== null && maxVotes >= votesNeeded) {
      room.setPlayerAdmin(adminToAdd, true);
      const votedPlayer = room.getPlayer(adminToAdd);
      const votedPlayerInfo = votedPlayer ? `${votedPlayer.name} (ID: ${adminToAdd})` : adminToAdd.toString();
      room.sendAnnouncement(`🎉 ¡El jugador ${votedPlayerInfo} ha sido elegido como el nuevo administrador! (${maxVotes} votos a favor) ¡Felicidades! 🥳`, null, 0x00FF00);
    } else {
      room.sendAnnouncement('¡La Votación de Administrador ha llegado a su Fin! 🗳️ |🌟 ¡Gracias a todos por participar! 🌟', null, 0xFF0000);
    }
  }
}

// Función para iniciar la votación de expulsión
function startKickVoting() {
  if (!kickVotingActive) {
    if (room.getPlayerList().length >= MIN_PLAYERS_FOR_KICK_VOTE) {
      kickVotingActive = true;
      kickVotes = {};

      setTimeout(function() {
        endKickVoting();
      }, DURACION_VOTACION * 1000); // Convertir la duración de la votación de segundos a milisegundos

      room.sendAnnouncement('📢 ¡La votación para expulsar a un jugador ha comenzado! Escribe "!expulsar id" para votar por la expulsión de un jugador. 🗳️', null, 0xFF0000);
      room.sendAnnouncement('📝 Para votar, escribe "!expulsar id" donde "id" es el número de ID del jugador que deseas expulsar. ¡Con !ids podrás ver los IDs de todos los jugadores! 🗳️', null, 0xFFFFFF);
    } else {
      room.sendAnnouncement(`❗ Se necesitan al menos ${MIN_PLAYERS_FOR_KICK_VOTE} jugadores para iniciar la votación de expulsión. ¡Espera a que se unan más jugadores! ❗`, null, 0xFF0000);
    }
  }
}

// Función para finalizar la votación de expulsión y aplicar los cambios
function endKickVoting() {
  if (kickVotingActive) {
    kickVotingActive = false;

    let maxVotes = 0;
    let playerToKick = null;

    for (const kickedPlayerId in kickVotes) {
      const voteCount = kickVotes[kickedPlayerId].length;
      if (voteCount > maxVotes) {
        maxVotes = voteCount;
        playerToKick = kickedPlayerId;
      }
    }

    const votesNeeded =  Math.ceil(room.getPlayerList().length * (PorcentajeDeVotosBan / 100)); 

    if (playerToKick !== null && maxVotes >= votesNeeded) {
      room.kickPlayer(playerToKick, "Expulsado por votación de la comunidad", false);
      const kickedPlayer = room.getPlayer(playerToKick);
      const kickedPlayerInfo = kickedPlayer ? `${kickedPlayer.name} (ID: ${playerToKick})` : playerToKick.toString();
      room.sendAnnouncement(`👢 ¡El jugador ${kickedPlayerInfo} ha sido expulsado por votación de la comunidad! (${maxVotes} votos a favor)`, null, 0xFF0000);
    } else {
      room.sendAnnouncement('¡La Votación de Expulsión ha llegado a su Fin! 🗳️ |🌟 ¡Gracias a todos por participar! 🌟', null, 0xFF0000);
    }
  }
}





// Función para mezclar un array en orden aleatorio (algoritmo de Fisher-Yates)
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

// Llamar a la función autoBalanceTeams() cada segundo para equilibrar los equipos automáticamente
setInterval(autoBalanceTeams, 1000);

function extraTime() {
    var extraSeconds = Math.ceil(game.extraTimeCount / 60);
    var extraMinutes = Math.floor(extraSeconds / 60);
    var remainingSeconds = extraSeconds - (extraMinutes * 60);

    game.extraTimeEnd = gameTime * 60 + extraSeconds;

    var timeAddedMessage = `⌚ TIEMPO DE JUEGO: ${gameTime} MINUTO${gameTime === 1 ? '' : 'S'} ➕ ⏳ TIEMPO ADICIONADO: `;
    
    if (extraMinutes > 0) {
        timeAddedMessage += `${extraMinutes} MINUTO`;
        if (extraMinutes > 1) {
            timeAddedMessage += "S";
        }
    }
    
    if (remainingSeconds > 0) {
        if (extraMinutes > 0) {
            timeAddedMessage += " y ";
        }
        timeAddedMessage += `${remainingSeconds} SEGUNDO`;
        if (remainingSeconds > 1) {
            timeAddedMessage += "S";
        }
    }

    announce(`                                   ${timeAddedMessage}`, null, null, null, 1);
}






function QuienJuegaPregunta(player, message){
	announce("--- ESTAN JUGANDO: " + teamRed + " vs " + teamBlue + " ---", player.id, null, null, 1);
}
function penalespregunta(player, message){
var extraSeconds = Math.ceil(game.extraTimeCount / 60);
    var extraMinutes = Math.round((extraSeconds-(100*0))/60);
    var SegundosDeSobra1min = Math.round((extraSeconds-(100*0))-60);
    var SegundosDeSobra2min = Math.round((extraSeconds-(100*0))-120);
    var SegundosDeSobra3min = Math.round((extraSeconds-(100*0))-180);
    var SegundosDeSobra4min = Math.round((extraSeconds-(100*0))-240);
    var SegundosDeSobra5min = Math.round((extraSeconds-(100*0))-300);
    var SegundosDeSobra6min = Math.round((extraSeconds-(100*0))-360);
	game.extraTimeEnd = (gameTime * 60) + extraSeconds;
	if (extraSeconds < 60){
	announce("                                   ⌚ TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ➕ ⏳     TIEMPO ADICIONADO:  " + extraSeconds + " SEGUNDOS [Por ahora] ", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumarán al tiempo adicionado.",player.id,0xE7D1FF,"small",1);
}
	else if (extraSeconds > 59 && extraSeconds < 61){
	announce("                                   ⌚ TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ➕ ⏳     TIEMPO ADICIONADO: 1 MINUTO [Por ahora] ", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumarán al tiempo adicionado.",player.id,0xE7D1FF,"small",1);
}
	else if (extraSeconds > 60 && extraSeconds < 120){
	announce("                                   ⌚ TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ➕ ⏳     TIEMPO ADICIONADO: 1 MINUTO y " + SegundosDeSobra1min + " SEGUNDOS [Por ahora]", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumarán al tiempo adicionado.",player.id,0xE7D1FF,"small",1);
}
	else if (extraSeconds > 119 && extraSeconds < 121){
	announce("                                   ⌚ TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ➕ ⏳     TIEMPO ADICIONADO: 2 MINUTOS [Por ahora]", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumarán al tiempo adicionado.",player.id,0xE7D1FF,"small",1);
}
	else if (extraSeconds > 120 && extraSeconds < 180){
	announce("                                   ⌚ TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ➕ ⏳     TIEMPO ADICIONADO: 2 MINUTOS  y " + SegundosDeSobra2min + " SEGUNDOS [Por ahora]", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumarán al tiempo adicionado.",player.id,0xE7D1FF,"small",1);
}
	else if (extraSeconds > 179 && extraSeconds < 181){
	announce("                                   ⌚ TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ➕ ⏳     TIEMPO ADICIONADO: 3 MINUTOS ", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumarán al tiempo adicionado.",player.id,0xE7D1FF,"small",1);
}
	else if (extraSeconds > 180 && extraSeconds < 240){
	announce("                                   ⌚ TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ➕ ⏳     TIEMPO ADICIONADO: 3 MINUTOS  y " + SegundosDeSobra3min + " SEGUNDOS [Por ahora]", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumarán al tiempo adicionado.",player.id,0xE7D1FF,"small",1);
}
	else if (extraSeconds > 239 && extraSeconds < 241){
	announce("                                   ⌚ TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ➕ ⏳     TIEMPO ADICIONADO: 4 MINUTOS [Por ahora]", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumarán al tiempo adicionado.",player.id,0xE7D1FF,"small",1);
}
	else if (extraSeconds > 240 && extraSeconds < 300){
	announce("                                   ⌚ TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ➕ ⏳     TIEMPO ADICIONADO: 4 MINUTOS  y " + SegundosDeSobra4min + " SEGUNDOS [Por ahora]", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumarán al tiempo adicionado.",player.id,0xE7D1FF,"small",1);
}
	else if (extraSeconds > 299 && extraSeconds < 301){
	announce("                                   ⌚ TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ➕ ⏳     TIEMPO ADICIONADO: 5 MINUTOS [Por ahora]", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumarán al tiempo adicionado.",player.id,0xE7D1FF,"small",1);
}
	else if (extraSeconds > 300 && extraSeconds < 360){
	announce("                                   ⌚ TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ➕ ⏳     TIEMPO ADICIONADO: 5 MINUTOS  y " + SegundosDeSobra5min + " SEGUNDOS [Por ahora]", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumarán al tiempo adicionado.",player.id,0xE7D1FF,"small",1);

}
	else if (extraSeconds > 359 && extraSeconds < 361){
	announce("                                   ⌚ TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ➕ ⏳     TIEMPO ADICIONADO: 6 MINUTOS [Por ahora]", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumarán al tiempo adicionado.",player.id,0xE7D1FF,"small",1);

}
	else if (extraSeconds > 360 && extraSeconds < 420){
	announce("                                   ⌚ TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ➕ ⏳     TIEMPO ADICIONADO: 6 MINUTOS  y " + SegundosDeSobra6min + " SEGUNDOS [Por ahora]", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumarán al tiempo adicionado.",player.id,0xE7D1FF,"small",1);

}



}

function displayHelp(_0x13aab6, _0x878a40) {
	var _0x37f4ef = _0x3c81f9;
	_0x878a40 == null && whisper(_0x37f4ef(0x124), _0x13aab6, null, 'small');
}

// Modifica la función sendGKAnnouncement para manejar casos en los que ArqueroRED y ArqueroBLUE son nulos
function sendGKAnnouncement(player) {
    // Obtener la lista de jugadores
    var players = room.getPlayerList();

    // Filtrar jugadores por equipo Rojo
    var redPlayers = players.filter(player => player.team === 1);

    // Filtrar jugadores por equipo Azul
    var bluePlayers = players.filter(player => player.team === 2);

    // Encontrar al jugador del equipo Rojo con la posición en X más baja
    ArqueroRED = redPlayers.reduce((minXPlayer, currentPlayer) => {
        return minXPlayer.position.x < currentPlayer.position.x ? minXPlayer : currentPlayer;
    }, redPlayers[0]);

    // Encontrar al jugador del equipo Azul con la posición en X más alta
    ArqueroBLUE = bluePlayers.reduce((maxXPlayer, currentPlayer) => {
        return maxXPlayer.position.x > currentPlayer.position.x ? maxXPlayer : currentPlayer;
    }, bluePlayers[0]);

    // Enviar el anuncio con la información sobre los arqueros
    var message = "";

    if (ArqueroRED) {
        message += "🔴 🧤⚽ GK " + teamRed + ": " + ArqueroRED.name;
    } else {
        message += "🔴 🧤⚽ GK " + teamRed + ": ❌ No tiene ";
    }

    message += " ------- ";

    if (ArqueroBLUE) {
        message += "🔵 🧤⚽ GK " + teamBlue + ": " + ArqueroBLUE.name;
    } else {
        message += "🔵 🧤⚽ GK " + teamBlue + ": ❌ No tiene ";
    }

    // Si ambos son nulos
    if (!ArqueroRED && !ArqueroBLUE) {
        message = "❌ 🧤⚽ No hay arqueros en ninguno de los dos equipos.";
    }

    room.sendAnnouncement(message, player.id, 0xFFFFFF, "bold", 0);  // Puedes ajustar el color según tus preferencias
}



room[_0x3c81f9(0x138)] = function (player) { // room.onPlayerTeamChange
    registerPlayerTime(player.id, player.team);

 if (automatizadoActivado) {
const jugadores = room.getPlayerList(); // incluye a todos
const jugadoresNoAFK = jugadores.filter(p => !afkPlayerIDs.has(p.id));
const numJugadores = jugadoresNoAFK.length;

    modoJueganAlgunos = true; // true para ACTIVARLO - false para DESACTIVARLO |Modo Juegan Algunos
    var nuevaConfiguracion = null;

    if (numJugadores <= 7) {
        maxPlayersPerTeam = 4;
        nuevaConfiguracion = {
            mapa: getEntrenamientoRealSoccer(), // Entrenamiento si hay pocos jugadores
            scoreLimit: GolesEntrenamientoRealSoccer,
            timeLimit: TiempoEntrenamientoRealSoccer
        };
    } else if (numJugadores >= 8) {
        maxPlayersPerTeam = 4;
        nuevaConfiguracion = {
            mapa: getRealSoccerMap2(), // Mapa real si hay 8 o más
            scoreLimit: GolesRealSoccer,
            timeLimit: TiempoRealSoccer
        };
    }

    if (nuevaConfiguracion !== null) {
        // Verificar si la configuración es diferente
        if (JSON.stringify(nuevaConfiguracion) === JSON.stringify(configuracionActual)) {
            return; // No hacer nada si es igual
        }

        var scores = room.getScores();

        if (scores !== null) {
            var gameTime = scores.time;

            if (gameTime <= tiempoLimiteCambio) {
                configuracionActual = nuevaConfiguracion;
                setTimeout(function () {
                    room.stopGame();
                    room.setCustomStadium(configuracionActual.mapa);
                    room.setScoreLimit(configuracionActual.scoreLimit);
                    room.setTimeLimit(configuracionActual.timeLimit);
                    room.startGame();
                }, tiempoEsperaCambio);
            }
        } else {
            configuracionActual = nuevaConfiguracion;
            room.stopGame();
            room.setCustomStadium(configuracionActual.mapa);
            room.setScoreLimit(configuracionActual.scoreLimit);
            room.setTimeLimit(configuracionActual.timeLimit);
            room.startGame();
        }
    }
}

    if (room.getScores() != null){
        if (1 <= player.team <= 2) ballCarrying.set(player.name, [0, player.team]);
    }
	var _0x2dee93 = _0x3c81f9;
	map == _0x2dee93(0x1ca) && (room[_0x2dee93(0x172)]() != null && (game[_0x2dee93(0x189)] == ![] && room[_0x2dee93(0x145)]()[_0x2dee93(0x19a)](function (_0x96d16c) {
		var _0x50b12d = _0x2dee93;
		if (_0x96d16c != undefined) {
			if (game[_0x50b12d(0x165)] == !![] || game[_0x50b12d(0x133)] == !![]) {
				var _0x4bfeae = {};
				_0x4bfeae[_0x50b12d(0x13e)] = 0x98967f, room[_0x50b12d(0x125)](_0x96d16c['id'], _0x4bfeae);
			}
		}
	})));
    if (player.team !== 0 && afkPlayerIDs.has(player.id)) {
        room.setPlayerTeam(player.id, 0);
        room.sendAnnouncement("😴 ¡El jugador " + player.name + " sigue A F K!", null, 0xff8400, 'bold', 2);
        room.sendAnnouncement("🚨 Con !kickafks podrás kickearlo. Si " + player.name + " escribe !afk nuevamente saldrá del AFK. 🚨", null, 0xff8400, 'bold', 1);

    }}


function getRandomScorerMessage() {
  let equipoRival = game.lastKickerTeam === 1 ? teamBlue : teamRed;
  let arqueroRival = game.lastKickerTeam === 1 ? (ArqueroBLUE ? ArqueroBLUE.name : "nadie") : (ArqueroRED ? ArqueroRED.name : "nadie");



  const scorerMessages = [
    `⚽🎉 ¡Golazo de ${game.lastKickerName}!`,
    `🔥⚽ ${game.lastKickerName} se cogió a ${equipoRival} y ${arqueroRival} no pudo hacer nada.`,
    `💥🔥🍆 ${game.lastKickerName} no para de repartir pija, se coge absolutamente a todos los de ${equipoRival}. 😈🥵`,
    `🤯💥⚡ El golazo que hizo ${game.lastKickerName}, pijudo hijo de re mil puta. ⚽🔥`,
    `👌⚽👏 ¡Bien definido por ${game.lastKickerName}!`,
    `🍷🚬🗿 La definición de ${game.lastKickerName} definitivamente es cine.`,
    `⚽🔥 ¡Golazo de ${game.lastKickerName} que está jugando desnudo! 🔞🍆`,
    `🔥⚽ Eduque ${game.lastKickerName}, eduque 👏👏`,
    `💪🔥⚽ Cuando sos crack, sos crack... ¡Y ${game.lastKickerName} lo acaba de demostrar! 👑`,
    `⚡⚽🍆 ${game.lastKickerName} se cogió a ${arqueroRival} con ese gol, alta putita el arquero de ${equipoRival}! 🧤🥵`,
    `💀⚽🔥 Alta putita ${equipoRival}, ${game.lastKickerName} se los cogió sin piedad. 🚬😎`,
    `🤩⚡🔥 ¡Naa, que golazo les marcó ${game.lastKickerName} a los de ${equipoRival}! 😱⚽`,
    `🎯⚽ ¡99 de definición, ${game.lastKickerName} definió con la punta de su tremenda pija! 🍆🔥`,
    `💥⚽🔥 ¡Ufff, qué golazo acaba de marcarle ${game.lastKickerName} a los de ${equipoRival}! 😱⚽`,
    `👀🍑🔥 ${game.lastKickerName} le rompió bien el ojete a los ${equipoRival} con ese golazo! 💥⚽`,
    `⚽👀 ¡Mirá el golazo que clavó el pijudo hijo de re mil puta de ${game.lastKickerName}! 😈🍆🔥`,
    `⚽🔥 ${game.lastKickerName} se cogió a ${arqueroRival} con ese gol. 🔥`,
    `⚽🔥 ${game.lastKickerName} le rompió bien el ojete a ${arqueroRival}. 🍑💥🔥`,
    `🔥 Parece que a los de ${equipoRival} les encanta comer pija de ${game.lastKickerName} 🍆🥵`,
    `🔥⚽ ${game.lastKickerName} le rompió bien el orto a ${equipoRival} con ese golazo. 🍑💥🥵`,
    `👅🍑🔥 Los de ${equipoRival} son la puta preferida de ${game.lastKickerName}. 😏⚽`,
    `🧤🍩 ${arqueroRival} entregó el rosquete y ${game.lastKickerName} se lo cogió con ese gol. ⚽🔥`,
    `🔥⚽ El jugador ${game.lastKickerName} no para de coger a los de ${equipoRival}. 😈`,
    `🍆💦🥵 ${game.lastKickerName} le pasó toda la pija en la cara a ${arqueroRival} con ese golazo. ⚽🔥`,
    `😈🔥⚽ Llegó ${game.lastKickerName} y ya empezó a repartir pija. 🍆🥵`,
    `👅🍑🔥 El arquero ${arqueroRival} goloso como siempre entregándole el marrón a ${game.lastKickerName}. 😏🍩`
];

  return scorerMessages[Math.floor(Math.random() * scorerMessages.length)];
}



function getRandomScorerMessage2() {
  const scorerMessages2 = [
    "⚽🔥 ¡**GOL** de **" + game.lastKickerName + "**!",
    "⚽💥 ¡**GOL** de **" + game.lastKickerName + "**!",
  ];
  return scorerMessages2[Math.floor(Math.random() * scorerMessages2.length)];
}


function getRandomOwnGoalScorerMessage() {
  let equipoRival = game.lastKickerTeam === 1 ? teamBlue : teamRed;
  let arqueroRival = game.lastKickerTeam === 1 ? (ArqueroBLUE ? ArqueroBLUE.name : "nadie") : (ArqueroRED ? ArqueroRED.name : "nadie");
  let equipoPropio = game.lastKickerTeam === 1 ? teamRed : teamBlue;
  let arqueroPropio = game.lastKickerTeam === 1 ? (ArqueroRED ? ArqueroRED.name : "nadie") : (ArqueroBLUE ? ArqueroBLUE.name : "nadie");

  const ownGoalScorerMessages = [
    `😵‍💫 Alto pelotudo ${game.lastKickerName}, se olvidó que tenía que patear al otro arco el hijo de re mil puta. 🎯🤦‍♂️`,
    `🔥 ¡El virgo de ${game.lastKickerName} se acaba de meter un gol en contra, no puede ser tan burro, por Dios. 🫏💀`,
    `🍑💦 ${game.lastKickerName} entregó la cola con ese autogol, alto virgen el hijo de puta. 🤡🔥`,
    `🎁 ¡Alta putita ${game.lastKickerName}!, le regaló el gol a ${equipoRival} como si fuera Navidad. 🎄⚽`,
    `🕵️‍♂️ Parece infiltrado el pelotudo ${game.lastKickerName}, no puede ser tan pete. 🤦‍♂️💀`,
    `🙃 Parece que al jugador ${game.lastKickerName} le encanta entregarle el rosquete a ${equipoRival}, alta putita. 🍑🔥`,
    `⚽🤦‍♂️ ${game.lastKickerName} pensó que jugaba para ${equipoRival} y les regaló un gol. 🎭💀`,
    `😨 Se cagó todo ${game.lastKickerName} con ese gol en contra, le encanta entregar el marrón a los de ${equipoPropio}. 🍩💦`,
    `🔥 Alta putita ${game.lastKickerName}, ni los de ${equipoRival} le hacen ese gol a ${equipoPropio} como él lo hizo. ⚽💀`,
    `🥴 Está re drogado el hijo de puta de ${game.lastKickerName}, mirá el autogol que se hace. 💊💀`,
    `💀🔥 El jugador ${game.lastKickerName} se confundió de arco, tremendo pelotudo el jugador de ${equipoPropio}. 🤦‍♂️⚽`,
    `🤣 Ni los de ${equipoRival} le meten goles a ${equipoPropio} como el autogol que hizo ${game.lastKickerName}, qué hijo de puta. ⚽🔥`
  ];
  
  return ownGoalScorerMessages[Math.floor(Math.random() * ownGoalScorerMessages.length)];
}


function getRandomOwnGoalScorerMessage2() {
  const ownGoalScorerMessages2 = [
    "💀 ¡**AUTOGOL** de **" + game.lastKickerName + "** !",
    "❌ ¡**GOL EN CONTRA** de **" + game.lastKickerName + "** !"
  ];
  return ownGoalScorerMessages2[Math.floor(Math.random() * ownGoalScorerMessages2.length)];
}


function getRandomGoalEmoji() {
  const goalEmojis = ["⚽", "🔥", "⭐️", "💥", "🐐"];
  return goalEmojis[Math.floor(Math.random() * goalEmojis.length)];
}

function getRandomAutoGoalEmoji() {
  const goalEmojis = ["💩", "😭", "🤡", "😅", "💀"];
  return goalEmojis[Math.floor(Math.random() * goalEmojis.length)];
}

var playerGoalsReceived = JSON.parse(localStorage.getItem("playerGoalsReceived")) || {};
var playerCleanSheets = JSON.parse(localStorage.getItem("playerCleanSheets")) || {};


function updateStats(team, goals) {
    // Obtener arquero del equipo contrario
    var goalkeeper = team === 1 ? ArqueroBLUE : ArqueroRED;

    // Verificar si hay arquero y actualizar estadísticas
    if (goalkeeper) {
        var playerName = goalkeeper.name;

        // Actualizar Goles Recibidos
        playerGoalsReceived[playerName] = (playerGoalsReceived[playerName] || 0) + 1;

        // Guardar en localStorage
        localStorage.setItem("playerGoalsReceived", JSON.stringify(playerGoalsReceived));
    }
}

room.onTeamGoal = function(team) {
if (GolDeOroActivado && AnuncioGolDeOro && FairPlayActivado === false) {
    room.pauseGame(true);
    handleTeamVictory(); // Ejecutar lógica de victoria
    AnuncioGolDeOro = false; // Para evitar múltiples activaciones

    // Iniciar secuencia de cierre del partido
    setTimeout(function () {
        // FIGURA DEL PARTIDO
        const figuraDelPartido = getFiguraDelPartido();
        enviarAnuncioFiguraDelPartido(figuraDelPartido);

        // POSESIÓN
        teamPossFun();

        // ANUNCIO DE RESULTADO FINAL
        room.sendAnnouncement("███████████████████ " + teamRed + "  " + getNumericEmoji(room.getScores().red) + "      🞬      " + getNumericEmoji(room.getScores().blue) + "  " + teamBlue + " ███████████████████", null, 0xffd559, "normal", 1);

        // ENVIAR AL DISCORD DESPUÉS DE 150 ms
        setTimeout(function () {
            sendDiscordWebhook();
            room.sendAnnouncement("📼 La grabación de la partida fue enviada a " + GrabacionesDiscord + " . ¡Bien jugado! 🎉");
        }, 150);
    }, 800);

    // OBTENER JUGADORES DE CADA EQUIPO
    const redTeamPlayerNames = room.getPlayerList().filter(player => player.team === 1).map(player => player.name);
    const blueTeamPlayerNames = room.getPlayerList().filter(player => player.team === 2).map(player => player.name);

    // GOLES DE CADA EQUIPO
    const GolesTotalesRED = room.getScores().red;
    const GolesTotalesBLUE = room.getScores().blue;

    // CLEAN SHEETS PARA ARQUEROS
    if (GolesTotalesRED === 0 && ArqueroBLUE) {
        playerCleanSheets[ArqueroBLUE.name] = (playerCleanSheets[ArqueroBLUE.name] || 0) + 1;
    }
    if (GolesTotalesBLUE === 0 && ArqueroRED) {
        playerCleanSheets[ArqueroRED.name] = (playerCleanSheets[ArqueroRED.name] || 0) + 1;
    }

    // ACTUALIZAR ESTADÍSTICAS INDIVIDUALES
    redTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, GolesTotalesRED > GolesTotalesBLUE ? 'victory' : (GolesTotalesRED < GolesTotalesBLUE ? 'defeat' : 'draw'));
    });
    blueTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, GolesTotalesBLUE > GolesTotalesRED ? 'victory' : (GolesTotalesBLUE < GolesTotalesRED ? 'defeat' : 'draw'));
    });

    return; // Finalizar ejecución aquí
}

    var ballProps = room.getDiscProperties(0);
    var velocidad = Math.sqrt(ballProps.xspeed ** 2 + ballProps.yspeed ** 2);
    var velocidadPorSegundo = velocidad * 60;
    var velocidadMetrosPorSegundo = velocidadPorSegundo / 100;
    var velocidadKmPorHora = velocidadMetrosPorSegundo * 3.6;

    room.sendAnnouncement(
        "Velocidad del tiro: " + velocidadKmPorHora.toFixed(2) + " km/h",
        null,
        0x00FF00, "bold", 2
    );
     var scores = room.getScores();
    var goals = team === 1 ? scores.red : scores.blue;

    // Actualizar estadísticas de Goles Recibidos y Vallas Invictas
    updateStats(team, goals);
    // Obtener el nombre del goleador y del asistidor
    const goleador = game.lastKickerName;
    const asistidor = game.secondLastKickerName;



    if (goleador && game.lastKickerTeam === team) {
        playerGoals[goleador] = (playerGoals[goleador] || 0) + 1;
        playerGoals2[goleador] = (playerGoals2[goleador] || 0) + 1;
        actualizarPuntos(goleador);
    }

    if (asistidor && game.secondLastKickerTeam === team && game.lastKickerId !== game.secondLastKickerId) {
        playerAssists[asistidor] = (playerAssists[asistidor] || 0) + 1;
        playerAssists2[asistidor] = (playerAssists2[asistidor] || 0) + 1;
        actualizarPuntos(asistidor);
    }



		game.rsActive = false;
		
		let goalTime = secondsToMinutes(Math.floor(room.getScores().time));
		let scorer;
		let assister = "";
		let scorer2;
		let assister2 = "";
		let goalType;






		if (team == 1) {
			if (game.lastKickerTeam == 1) { //if goal type is goal
				const goalMessages = [
					"⚡ ¡GOOOLAZO!",
					"🔥 ¡GOLAZO INCREÍBLE!",
					"💥 ¡LA RED TIEMBLA CON ESE GOL!",
					"🚀 ¡GOLAZO DE OTRO PLANETA!",
					"⚽ ¡GOOOOOOL!",
				];
				goalType = goalMessages[Math.floor(Math.random() * goalMessages.length)];
				scorer = getRandomScorerMessage();
				scorer2 = getRandomScorerMessage2();
				avatarCelebration(game.lastKickerId, getRandomGoalEmoji());
				if (game.secondLastKickerTeam == 1 && game.lastKickerId != game.secondLastKickerId) { // if assist is from teammate
				const assistMessages = [
  "👟 ¡Gran pase de " + game.secondLastKickerName + "!",
  "🎯 ¡Preciso pase de " + game.secondLastKickerName + "!",
  "🔑 ¡La jugada se gestó con una asistencia de " + game.secondLastKickerName + "!",
  "🤝 ¡" + game.secondLastKickerName + " brinda la asistencia para el gol!",
  "⚽ ¡Asistencia perfecta de " + game.secondLastKickerName + "!",
  "👌 ¡Excelente pase de " + game.secondLastKickerName + "!",
  "🔥 ¡Jugada brillante de " + game.secondLastKickerName + "!",
  "🤩 ¡" + game.secondLastKickerName + " crea la oportunidad de gol!",
  "👏 ¡Fantástica asistencia de " + game.secondLastKickerName + "!",
  "💫 ¡" + game.secondLastKickerName + " demuestra su visión de juego!",
];
				const assistMessages2 = [
  "⚽👟 ¡**ASISTENCIA** de **" + game.secondLastKickerName + "**!",
  "👥⚽ ¡**PASE** de **" + game.secondLastKickerName + "**!"
];
					assister = " (" + assistMessages[Math.floor(Math.random() * assistMessages.length)] + ")";
					assister2 = " (" + assistMessages2[Math.floor(Math.random() * assistMessages2.length)] + ")";
					avatarCelebration(game.secondLastKickerId, "👟");
				}
			}		
			if (game.lastKickerTeam == 2) { //if goal type is owngoal
				const ownGoalMessages = [
					"❌ ¡HAN MARCADO UN AUTOGOL!",
					"❌ ¡GOL EN CONTRA INESPERADO!",
					"❌ ¡EL EQUIPO EQUIVOCADO MARCA EN SU PROPIA PORTERÍA!",
					"❌ ¡UN DESAFORTUNADO AUTOGOL!",
				];
				goalType = ownGoalMessages[Math.floor(Math.random() * ownGoalMessages.length)];
				scorer = getRandomOwnGoalScorerMessage();
				scorer2 = getRandomOwnGoalScorerMessage2();
				avatarCelebration(game.lastKickerId, getRandomAutoGoalEmoji());
				if (game.secondLastKickerTeam == 1) { // if owngoal was assisted
					const assistMessages = [
						"👟🌟 ¡El gol en contra es gracias a la jugada de " + game.secondLastKickerName + "!",
						"⚠️ ¡" + game.secondLastKickerName + "  contribuye al autogol del rival!",
						"🌟 ¡" + game.secondLastKickerName + " arma la jugada!",
						"⚠️ ¡Jugada maestra de " + game.secondLastKickerName + "! ¡El rival termina anotando un autogol! ⚽😮",
					];
					const assistMessages2 = [
						"👟 ¡**ASISTENCIA** de **" + game.secondLastKickerName + "**!",
						"🌟 ¡**JUGADA** de **" + game.secondLastKickerName + "**!",
					];
					assister = " (" + assistMessages[Math.floor(Math.random() * assistMessages.length)] + ")";
					assister2 = " (" + assistMessages2[Math.floor(Math.random() * assistMessages2.length)] + ")";
					avatarCelebration(game.secondLastKickerId, "👟");
				}
			}
			game.redScore++;
		}
		if (team == 2) {
			if (game.lastKickerTeam == 2) { //if goal type is goal
				const goalMessages = [
					"⚡ ¡GOOOLAZO!",
					"🔥 ¡GOLAZO INCREÍBLE!",
					"💥 ¡LA RED TIEMBLA CON ESE GOL!",
					"🚀 ¡GOLAZO DE OTRO PLANETA!",
					"⚽ ¡GOOOOOOL!",
				];
				goalType = goalMessages[Math.floor(Math.random() * goalMessages.length)];
				scorer = getRandomScorerMessage();
				scorer2 = getRandomScorerMessage2();
				avatarCelebration(game.lastKickerId, getRandomGoalEmoji());
				if (game.secondLastKickerTeam == 2 && game.lastKickerId != game.secondLastKickerId) { // if assist is from teammate
				const assistMessages = [
  "👟 ¡Gran pase de " + game.secondLastKickerName + "!",
  "🎯 ¡Preciso pase de " + game.secondLastKickerName + "!",
  " ¡⚽️ Que pelota, " + game.secondLastKickerName + "! 👏",
  "🤝 ¡" + game.secondLastKickerName + " brinda la asistencia para el gol!",
  "⚽ ¡Asistencia perfecta de " + game.secondLastKickerName + "!",
  "👌 ¡Excelente pase de " + game.secondLastKickerName + "!",
  "🔥 ¡Jugada brillante de " + game.secondLastKickerName + "!",
  "🤩 ¡" + game.secondLastKickerName + " crea la oportunidad de gol!",
  "👏 ¡Fantástica asistencia de " + game.secondLastKickerName + "! 💯 ",
  "💫 ¡" + game.secondLastKickerName + " demuestra su visión de juego!",
];
				const assistMessages2 = [
  "⚽👟 ¡**ASISTENCIA** de **" + game.secondLastKickerName + "**!",
  "👥⚽ ¡**PASE** de **" + game.secondLastKickerName + "**!"
];
					assister = " (" + assistMessages[Math.floor(Math.random() * assistMessages.length)] + ")";
					assister2 = " (" + assistMessages2[Math.floor(Math.random() * assistMessages2.length)] + ")";
					avatarCelebration(game.secondLastKickerId, "👟");
				}
			}		
			if (game.lastKickerTeam == 1) { //if goal type is owngoal
				const ownGoalMessages = [
					"❌ ¡HAN MARCADO UN AUTOGOL!",
					"❌ ¡GOL EN CONTRA INESPERADO!",
					"❌ ¡EL EQUIPO EQUIVOCADO MARCA EN SU PROPIA PORTERÍA!",
					"❌ ¡UN DESAFORTUNADO AUTOGOL!",
				];
				goalType = ownGoalMessages[Math.floor(Math.random() * ownGoalMessages.length)];
				scorer = getRandomOwnGoalScorerMessage();
				scorer2 = getRandomOwnGoalScorerMessage2();
				avatarCelebration(game.lastKickerId, getRandomAutoGoalEmoji());
				if (game.secondLastKickerTeam == 2) { // if owngoal was assisted
					const assistMessages = [
						"👟🌟 ¡El gol en contra es gracias a la jugada de " + game.secondLastKickerName + "!",
						"⚠️ ¡" + game.secondLastKickerName + "  contribuye al autogol del rival!",
						"🌟 ¡" + game.secondLastKickerName + " arma la jugada!",
						"⚠️ ¡Jugada maestra de " + game.secondLastKickerName + "! ¡El rival termina anotando un autogol! ⚽😮",
					];
					const assistMessages2 = [
						"👟 ¡**ASISTENCIA** de **" + game.secondLastKickerName + "**!",
						"⚠ ¡**JUGADA** de **" + game.secondLastKickerName + "**!",
					];
					assister = " (" + assistMessages[Math.floor(Math.random() * assistMessages.length)] + ")";
					assister2 = " (" + assistMessages2[Math.floor(Math.random() * assistMessages2.length)] + ")";
					avatarCelebration(game.secondLastKickerId, "👟");
				}
			}
			game.blueScore++;
		}

    // Reemplazar los números de game.redScore y game.blueScore
    const redScore = replaceNumbers(game.redScore);
    const blueScore = replaceNumbers(game.blueScore);

    announce(
      `${goalType}       ${toMathBoldSmall(teamRed)} ${redScore} 🆚 ${blueScore} ${toMathBoldSmall(teamBlue)}   A los ${goalTime} 🕒\n\n ${scorer}${assister}`
    );
goalAnnouncementsSum.push(
    `🟥 **${teamRed} ${redScore} **\n🟦 **${teamBlue} ${blueScore}**\n🕒 **${goalTime}**  ⚊ ${scorer2}${assister2}\n`
);

	game.lastKicker = undefined;
	game.secondLastKicker = undefined;
	game.lastKickerTeam = undefined;
	game.secondLastKickerTeam = undefined;
    if (AnuncioGolDeOro) { // GOL DE ORO
        AnuncioGolDeOro = false;

        setTimeout(function () {
    // Obtener los nombres de los jugadores en cada equipo
    const redTeamPlayerNames = room.getPlayerList().filter(player => player.team === 1).map(player => player.name);
    const blueTeamPlayerNames = room.getPlayerList().filter(player => player.team === 2).map(player => player.name);
    // Obtener el número de goles de cada equipo
    // Obtener el número de goles de cada equipo
    const GolesTotalesRED = room.getScores().red;
    const GolesTotalesBLUE = room.getScores().blue;

    // Verificar si el arquero del equipo Azul mantuvo la valla invicta
    if (GolesTotalesRED === 0 && ArqueroBLUE) {
        playerCleanSheets[ArqueroBLUE.name] = (playerCleanSheets[ArqueroBLUE.name] || 0) + 1;
    }
    // Verificar si el arquero del equipo Rojo mantuvo la valla invicta
    if (GolesTotalesBLUE === 0 && ArqueroRED) {
        playerCleanSheets[ArqueroRED.name] = (playerCleanSheets[ArqueroRED.name] || 0) + 1;
    }

    // Guardar playerCleanSheets en localStorage
    localStorage.setItem('playerCleanSheets', JSON.stringify(playerCleanSheets));



    // Obtener el número de goles de cada equipo
    const redTeamGoals = room.getScores().red;
    const blueTeamGoals = room.getScores().blue;

    // Actualizar las estadísticas para cada jugador en el equipo rojo
    redTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, redTeamGoals > blueTeamGoals ? 'victory' : (redTeamGoals < blueTeamGoals ? 'defeat' : 'draw'));
    });

    // Actualizar las estadísticas para cada jugador en el equipo azul
    blueTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, blueTeamGoals > redTeamGoals ? 'victory' : (blueTeamGoals < redTeamGoals ? 'defeat' : 'draw'));
    });
    // Seleccionar la Figura del partido
    const figuraDelPartido = getFiguraDelPartido();
    enviarAnuncioFiguraDelPartido(figuraDelPartido);
    teamPossFun();
            room.sendAnnouncement("███████████████████ " + teamRed + "  " + getNumericEmoji(room.getScores().red) + "      🞬      " + getNumericEmoji(room.getScores().blue) + "  " + teamBlue + " ███████████████████", null, 0xffd559, "normal", 1);
handleTeamVictory();
    // ENVIAR AL DISCORD DESPÚES DE 300 milisegundos
    setTimeout(function () {
    sendDiscordWebhook();
    room.sendAnnouncement("📼 La grabación de la partida fue enviada a " + GrabacionesDiscord + " . ¡Bien jugado! 🎉");
    }, 150);

        }, 800);

        setTimeout(function () {
            room.stopGame();
            var players = room.getPlayerList().filter(function (player) {
                return player.id !== 0;
            });

            if (players.length === 0) {
                return false;
            }

            players.forEach(function (player) {
                if (player.team === 1) {
                    room.setPlayerTeam(player.id, 2);
                }
                if (player.team === 2) {
                    room.setPlayerTeam(player.id, 1);
                }
            });
        }, 3000);

        setTimeout(function () {
            room.startGame();
        }, 4000);
    }
};


// Función para reemplazar los números con emojis en negrita
function replaceNumbers(number) {
	const replacements = {
		0: "0️⃣",
		1: "1️⃣",
		2: "2️⃣",
		3: "3️⃣",
		4: "4️⃣",
		5: "5️⃣",
		6: "6️⃣",
		7: "7️⃣",
		8: "8️⃣",
		9: "9️⃣"
	};

	return number.toString().replace(/\d/g, match => replacements[match]);
}

function toMathBoldSmall(text) {
    const mathBoldSmallMap = {
        a: "𝐚", b: "𝐛", c: "𝐜", d: "𝐝", e: "𝐞",
        f: "𝐟", g: "𝐠", h: "𝐡", i: "𝐢", j: "𝐣",
        k: "𝐤", l: "𝐥", m: "𝐦", n: "𝐧", o: "𝐨",
        p: "𝐩", q: "𝐪", r: "𝐫", s: "𝐬", t: "𝐭",
        u: "𝐮", v: "𝐯", w: "𝐰", x: "𝐱", y: "𝐲",
        z: "𝐳", A: "𝐀", B: "𝐁", C: "𝐂", D: "𝐃",
        E: "𝐄", F: "𝐅", G: "𝐆", H: "𝐇", I: "𝐈",
        J: "𝐉", K: "𝐊", L: "𝐋", M: "𝐌", N: "𝐍",
        O: "𝐎", P: "𝐏", Q: "𝐐", R: "𝐑", S: "𝐒",
        T: "𝐓", U: "𝐔", V: "𝐕", W: "𝐖", X: "𝐗",
        Y: "𝐘", Z: "𝐙"
    };

    return text
        .split("")
        .map(char => mathBoldSmallMap[char] || char)
        .join("");
}


room.onPositionsReset = function() {
     const DEFAULT_SIZE = 15;
    var MIN_SIZE = TamanoMinimoPermitido;
    var MAX_SIZE = TamanoMaximoPermitido;

    let id = Object.keys(tookASize);
    let size;

    for (var i = 0; i < id.length; i++) {
        if (tookASize.hasOwnProperty(id[i])){
            size = tookASize[id[i]];

            if (size >= MIN_SIZE && size <= MAX_SIZE) {
                // Calculating invmass based on size
                let invMass = 0.5 + (DEFAULT_SIZE - size) * 0.02;

                room.setPlayerDiscProperties(id[i], {
                    radius: size,
                    invMass: invMass
                });
            }
        }
    }
    
	var _0x1a3b51 = _0x3c81f9;
		if (game.lastPlayAnnounced == true) {
			room.pauseGame(true);
			game.lastPlayAnnounced = false;


        if (GolDeOroActivado && room.getScores().red === room.getScores().blue) {
            room.sendAnnouncement("　　　¡GOL DE ORO!　　🔥 ⚽️　　EL PRIMERO EN MARCAR GOL, GANA.  🏆💥", null, 0xffd700, "bold", 2);
            AnuncioGolDeOro = true;

            setTimeout(function () {
                room.pauseGame(false);
            }, 1000); // Esto quitará la pausa después de un segundo.
        } else {
            // Si GolDeOroActivado es false o los equipos no están empatados, ejecuta el siguiente bloque de código
handleTeamVictory();
        setTimeout(function () {
    // Seleccionar la Figura del partido
    const figuraDelPartido = getFiguraDelPartido();
    enviarAnuncioFiguraDelPartido(figuraDelPartido);
    teamPossFun();
            room.sendAnnouncement("███████████████████ " + teamRed + "  " + getNumericEmoji(room.getScores().red) + "      🞬      " + getNumericEmoji(room.getScores().blue) + "  " + teamBlue + " ███████████████████", null, 0xffd559, "normal", 1);
    // ENVIAR AL DISCORD DESPÚES DE 300 milisegundos
    setTimeout(function () {
    sendDiscordWebhook();
    room.sendAnnouncement("📼 La grabación de la partida fue enviada a " + GrabacionesDiscord + " . ¡Bien jugado! 🎉");

    }, 150);

        }, 800);
    // Obtener los nombres de los jugadores en cada equipo
    const redTeamPlayerNames = room.getPlayerList().filter(player => player.team === 1).map(player => player.name);
    const blueTeamPlayerNames = room.getPlayerList().filter(player => player.team === 2).map(player => player.name);

    // Obtener el número de goles de cada equipo
    const GolesTotalesRED = room.getScores().red;
    const GolesTotalesBLUE = room.getScores().blue;

        // Verificar si el arquero del equipo Azul mantuvo la valla invicta
        if (GolesTotalesRED === 0 && ArqueroBLUE) {
            playerCleanSheets[ArqueroBLUE.name] = (playerCleanSheets[ArqueroBLUE.name] || 0) + 1;
        }
        // Verificar si el arquero del equipo Rojo mantuvo la valla invicta
        if (GolesTotalesBLUE === 0 && ArqueroRED) {
            playerCleanSheets[ArqueroRED.name] = (playerCleanSheets[ArqueroRED.name] || 0) + 1;
        }

    // Obtener el número de goles de cada equipo
    const redTeamGoals = room.getScores().red;
    const blueTeamGoals = room.getScores().blue;

    // Actualizar las estadísticas para cada jugador en el equipo rojo
    redTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, redTeamGoals > blueTeamGoals ? 'victory' : (redTeamGoals < blueTeamGoals ? 'defeat' : 'draw'));
    });

    // Actualizar las estadísticas para cada jugador en el equipo azul
    blueTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, blueTeamGoals > redTeamGoals ? 'victory' : (blueTeamGoals < redTeamGoals ? 'defeat' : 'draw'));
    });
        }

if (FairPlayActivado) {
                var scoreDifference = Math.abs(room.getScores().red - room.getScores().blue);


        if (scoreDifference === 1) {

            setTimeout(function () {
                room.stopGame();

                var players = room.getPlayerList().filter(function (player) {
                    return player.id !== 0;
                });

                if (players.length === 0) {
                    return false;
                }

                players.forEach(function (player) {
                    if (player.team === 1) {
                        room.setPlayerTeam(player.id, 2);
                    }
                    if (player.team === 2) {
                        room.setPlayerTeam(player.id, 1);
                    }
                });

                room.startGame();
            }, 3500); // PAUSA DE 3 SEGUNDOS
        } else if (scoreDifference === 2) {
            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                room.startGame();
            }, 3500); // PAUSA DE 3 SEGUNDOS
        } else if (scoreDifference >= 3) {

            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                const players = room.getPlayerList();

    // Filtrar a los jugadores que están en el campo
    const activePlayers = players.filter(p => p.team !== 0 && p.position !== null);

    // Ordenar a los jugadores activos por nivel de mayor a menor
    const sortedPlayers = activePlayers.sort((a, b) => {
        const aPoints = (totalPlayerGoals[a.name] || 0) + ((totalPlayerAssists[a.name] || 0) * 0.7);
        const bPoints = (totalPlayerGoals[b.name] || 0) + ((totalPlayerAssists[b.name] || 0) * 0.7);
        return bPoints - aPoints;
    });

    // Distribuir a los jugadores en dos equipos equilibrados
    const team1 = [];
    const team2 = [];
    let totalPointsTeam1 = 0;
    let totalPointsTeam2 = 0;

    // Iterar sobre los jugadores y asignarlos a los equipos de manera equitativa
    for (let i = 0; i < sortedPlayers.length; i++) {
        const currentPlayer = sortedPlayers[i];
        const currentPlayerPoints = (totalPlayerGoals[currentPlayer.name] || 0) + ((totalPlayerAssists[currentPlayer.name] || 0) * 0.7);

        if (totalPointsTeam1 <= totalPointsTeam2) {
            team1.push(currentPlayer);
            totalPointsTeam1 += currentPlayerPoints;
        } else {
            team2.push(currentPlayer);
            totalPointsTeam2 += currentPlayerPoints;
        }
    }

    // Asignar los equipos a los jugadores
    team1.forEach(player => room.setPlayerTeam(player.id, 1));
    team2.forEach(player => room.setPlayerTeam(player.id, 2));
    balanceTeams();
}, 3000); // PAUSA DE 3 SEGUNDOS
setTimeout(function() {
    balanceTeams();
}, 4000); // Esperar 
setTimeout(function() {
    room.startGame();
}, 4500); // Esperar 

        }
    }
		}
}


// Define una variable para llevar el seguimiento del estado de pausa
let isGamePaused = false;

function updatePlayerMinutes(player) {
  const playerId = player.id;
  const playerName = player.name;

  // Verifica que la partida no esté pausada y la posición de la pelota no sea constante
  if (!isGamePaused && isBallMoving()) {
    // Verifica si el jugador tiene una posición válida en el campo y no es un espectador
    if (player.position && player.team !== 0) {
      if (!playerMinutesPlayed[playerName]) {
        playerMinutesPlayed[playerName] = 0;
      }
      // Incrementa los minutos jugados para el jugador en milisegundos
      playerMinutesPlayed[playerName] += 1;

      // Almacena en localStorage
      localStorage.setItem('playerMinutesPlayed', JSON.stringify(playerMinutesPlayed));
    }
  }
}


function updateGoalkeeperTime(player) {
  const playerId = player.id;
  const playerName = player.name;

  // Verifica que la partida no esté pausada y la posición de la pelota no sea constante
  if (!isGamePaused && isBallMoving()) {
    // Verifica si el jugador tiene una posición válida en el campo y es el arquero
    if (player.position) {
      if (player.id === ArqueroRED?.id || player.id === ArqueroBLUE?.id) {
        const goalkeeperName = player.id === ArqueroRED?.id ? ArqueroRED.name : ArqueroBLUE.name;

        if (!playerGoalkeeperTime[goalkeeperName]) {
          playerGoalkeeperTime[goalkeeperName] = 0;
        }

        // Incrementa el tiempo que el jugador ha estado siendo el arquero en milisegundos
        playerGoalkeeperTime[goalkeeperName] += 1;

        // Almacena en localStorage
        localStorage.setItem('playerGoalkeeperTime', JSON.stringify(playerGoalkeeperTime));
      }
    }
  }
}



// Definir un objeto para rastrear las posiciones de los jugadores
const playerPositions = {};



/// Función para verificar y tratar a los jugadores inactivos
function checkPlayerActivity() {
  const players = room.getPlayerList();
  const currentTime = Date.now();

  players.forEach((player) => {
    const playerId = player.id;
    const playerPosition = player.position;

    if (!playerPositions[playerId] && player.team !== 0 && !player.admin) {
      // Si es la primera vez que se registra la posición del jugador y no es espectador ni administrador
      playerPositions[playerId] = {
        position: playerPosition,
        lastUpdateTime: currentTime,
      };
    } else if (player.team !== 0 && !player.admin) {
      // Verificar si la posición del jugador ha cambiado y no es espectador
      if (
        playerPositions[playerId] &&
        playerPositions[playerId].position.x === playerPosition.x &&
        playerPositions[playerId].position.y === playerPosition.y
      ) {
        const timeDifference = currentTime - playerPositions[playerId].lastUpdateTime;
        if (!isAFKpaused && !isGamePaused && timeDifference >= SegundosPermitidosAFK * 1000) { // 
          // Tratar al jugador como AFK
          if (!afkPlayerIDs.has(playerId)) {
            afkPlayerIDs.add(player.id);
            // Configura el temporizador de inactividad
            const inactivityTimeout =  MinutosPermitidosAFK * 60 * 1000; // 
            const inactivityTimer = setTimeout(() => {
              // Expulsa al jugador por inactividad
              room.kickPlayer(player.id, "⌛️ EXPULSADO por INACTIVIDAD 😴🚫", false);
              // Elimina la entrada del mapa de inactividad
              playerInactivity.delete(player.id);
            }, inactivityTimeout);
            playerInactivity.set(player.id, inactivityTimer);
            room.setPlayerTeam(player.id, 0);
        setTimeout(() => {
            room.sendAnnouncement("🌴   ¡" + player.name + " se encuentra actualmente A F K! 🕒 💤", null, 0xff8400, 'bold', 2);

    // Después de enviar el anuncio, actualiza el tiempo de la última actividad del jugador a la hora actual
    if (playerPositions[playerId]) {
        playerPositions[playerId].lastUpdateTime = currentTime;
    }
}, 500);
        setTimeout(() => {
            room.sendAnnouncement("📢   Para salir del AFK, escribe !afk otra vez. ↩️", player.id, 0xff8400, 'small-bold', 2);
        }, 1000);
	setTimeout(() => {
  room.sendAnnouncement("🚨 ¡ATENCIÓN! Si te quedas AFK por " + MinutosPermitidosAFK + " MINUTOS ⌛, serás EXPULSADO del host. 🛑", player.id, 0xff8400, 'small-bold', 2);
}, 1500);
        setTimeout(() => {
            room.sendAnnouncement("📌   RECUERDA QUE:        ⚠️ Si el administrador lo decide, puede echarte del host usando !kickafks. ⚠️", player.id, 0xff8400, 'small-bold', 2);
        }, 2000);

        const admins = room.getPlayerList().filter(admin => admin.admin);
        if (admins.length > 0) {
            const adminNames = admins.map(admin => admin.name).join(", ");
            setTimeout(() => {
                room.sendAnnouncement(`🛠️ Administrador(es): ${adminNames}, ¡Pueden usar !kickafks para expulsar a los jugadores AFK!`, null, 0x00FFBB, 'bold', 0);
            }, 3000);
        } else {
            setTimeout(() => {
                room.sendAnnouncement("📣 El administrador puede echar a los jugadores AFK con el comando !kickafks.", null, 0x00FFBB, 'bold', 0);
            }, 3000);
        }
          }
        }
      } else {
        // El jugador ha cambiado de posición, reiniciar el contador
        playerPositions[playerId] = {
          position: playerPosition,
          lastUpdateTime: currentTime,
        };
        // Si el jugador estaba marcado como AFK, elimínalo de la lista
        if (afkPlayerIDs.has(playerId)) {
          afkPlayerIDs.delete(playerId);
          // También puedes realizar otras acciones aquí si el jugador deja de estar inactivo
        }
      }
    } else if (player.team !== 0 && player.admin) {
      if (
        playerPositions[playerId] &&
        playerPositions[playerId].position.x === playerPosition.x &&
        playerPositions[playerId].position.y === playerPosition.y
      ) {
        const timeDifference = currentTime - playerPositions[playerId].lastUpdateTime;
        if (!isAFKpaused && !isGamePaused && timeDifference >= SegundosPermitidosAFK * 1000) { // Cantidad de Segundos Para estar AFK
          // Tratar al jugador como AFK
          if (!afkPlayerIDs.has(playerId)) {
            afkPlayerIDs.add(player.id);
            room.setPlayerTeam(player.id, 0);
            setTimeout(() => {
              room.sendAnnouncement("🌴   ¡El administrador 👑 " + player.name + " se encuentra actualmente A F K! 🕒 💤", null, 0xff8400, 'bold', 2);

    // Después de enviar el anuncio, actualiza el tiempo de la última actividad del jugador a la hora actual
    if (playerPositions[playerId]) {
        playerPositions[playerId].lastUpdateTime = currentTime;
    }
}, 500);
            setTimeout(() => {
              room.sendAnnouncement("📢   Para salir del AFK, escribe !afk otra vez. ↩️", player.id, 0xff8400, 'small-bold', 2);
            }, 1000);
          }
        }
      } else {
        // El jugador ha cambiado de posición, reiniciar el contador
        playerPositions[playerId] = {
          position: playerPosition,
          lastUpdateTime: currentTime,
        };
        // Si el jugador estaba marcado como AFK, elimínalo de la lista
        if (afkPlayerIDs.has(playerId)) {
          afkPlayerIDs.delete(playerId);
          // También puedes realizar otras acciones aquí si el jugador deja de estar inactivo
        }
      }
    }
  });
}






// Función para verificar si la pelota está en movimiento
function isBallMoving() {
  const ballPosition = room.getBallPosition();
  return ballPosition && (ballPosition.x !== 0 || ballPosition.y !== 0);
}

var gameTickPaused = false; // Bandera para controlar si handleGameTick está pausado

function handleGameTick() {
    if (modoJueganAlgunos){
    if (!gameTickPaused) {
        // Filtrar los jugadores para excluir a los AFK
        const activePlayers = room.getPlayerList().filter(p => !afkPlayerIDs.has(p.id));
        
        // Obtener el número de jugadores en cada equipo
        let blueTeamCount = activePlayers.filter(p => p.team === 1).length;
        let redTeamCount = activePlayers.filter(p => p.team === 2).length;

        // Mover jugadores entre equipos y espectadores si es necesario
        movePlayersIfNeeded(activePlayers, blueTeamCount, redTeamCount);
        

    }
}
}

// Función para mover jugadores entre equipos y espectadores según sea necesario
function movePlayersIfNeeded(activePlayers, blueTeamCount, redTeamCount) {
    const spectators = room.getPlayerList().filter(p => p.team === 0 && !afkPlayerIDs.has(p.id));

    // Mover jugadores de espectadores a equipos si es necesario
while (spectators.length > 0 && (blueTeamCount < maxPlayersPerTeam || redTeamCount < maxPlayersPerTeam)) {
    const spectatorToMove = spectators.shift(); // Cambiado de pop() a shift() para sacar el primer espectador en la lista
    if (blueTeamCount < redTeamCount) {
        room.setPlayerTeam(spectatorToMove.id, 1); // Mover al equipo azul
        blueTeamCount++;
    } else {
        room.setPlayerTeam(spectatorToMove.id, 2); // Mover al equipo rojo
        redTeamCount++;
    }
}


    // Mover jugadores de equipos a espectadores si es necesario
    while (blueTeamCount > maxPlayersPerTeam) {
        const playerToMove = activePlayers.find(p => p.team === 1);
        if (playerToMove) {
            room.setPlayerTeam(playerToMove.id, 0); // Mover a espectadores
            blueTeamCount--;
        }
    }

    while (redTeamCount > maxPlayersPerTeam) {
        const playerToMove = activePlayers.find(p => p.team === 2);
        if (playerToMove) {
            room.setPlayerTeam(playerToMove.id, 0); // Mover a espectadores
            redTeamCount--;
        }
    }
}

// Función para equilibrar los equipos
function balanceTeams2(activePlayers) {
    const bluePlayers = activePlayers.filter(p => p.team === 1);
    const redPlayers = activePlayers.filter(p => p.team === 2);

    // Mover jugadores del equipo azul si hay más de maxPlayersPerTeam
    while (bluePlayers.length > maxPlayersPerTeam) {
        const playerToMove = bluePlayers.pop();
        room.setPlayerTeam(playerToMove.id, 0); // Mover a espectadores
    }

    // Mover jugadores del equipo rojo si hay más de maxPlayersPerTeam
    while (redPlayers.length > maxPlayersPerTeam) {
        const playerToMove = redPlayers.pop();
        room.setPlayerTeam(playerToMove.id, 0); // Mover a espectadores
    }
}

// Función para pausar handleGameTick
function pauseGameTick() {
    gameTickPaused = true;
}

// Función para reanudar handleGameTick
function resumeGameTick() {
    gameTickPaused = false;
}

 room[_0x3c81f9(0x19c)] = function (player) { // Es el room.ongametick
    handleGameTick();
  checkPlayerActivity();

  const playersz = room.getPlayerList();
  for (const player of playersz) {
    updatePlayerMinutes(player);
        updateGoalkeeperTime(player); // Agrega esta línea para actualizar el tiempo del arquero

  }
  var players = room.getPlayerList();
  var ballPosition = room.getBallPosition();

  for (var i = 0; i < players.length; i++) {
    var player = players[i];

    // Verifica si el jugador tiene una posición válida
    if (player.position === null || player.position === undefined) {
      continue; // Salta al siguiente jugador si no tiene una posición válida
    }

    var playerPosition = room.getPlayerDiscProperties(player.id);

    // Calcula la distancia entre el jugador y la pelota
    var distance = Math.sqrt(
      Math.pow(playerPosition.x - ballPosition.x, 2) +
      Math.pow(playerPosition.y - ballPosition.y, 2)
    );

    // Actualiza la posesión del equipo correspondiente
    if (distance < 50) {
      if (player.team === 1) {
        posesionEquipoA++;
      } else if (player.team === 2) {
        posesionEquipoB++;
      }
    }
  }
 		PartidoArrancado = true;
    if (whoTouchedLast != undefined) {
 
        if (ballCarrying.get(whoTouchedLast.name)) {
            ballCarrying.get(whoTouchedLast.name)[0] += 1/60;
        }
    }
    updateTimeOnHalves();
DetectorGK();
LinkDelScript();
LinkDelScript2();
LinkDelScript3();
LinkDelScript4();
ReiniciarPuntosJugadores();
	var _0x59120c = _0x3c81f9;
 if (RSRMap == true) {
    updateGameStatus();
    handleBallTouch();
    realSoccerRef();
  } else {
    updateGameStatus();
    handleBallTouchFUTSAL();
  }

};





updateTimeOnHalves = function(){
    if(room.getBallPosition().x < 0){
        timeOnHalves[0] += 1/60;
    }else if(room.getBallPosition().x > 0){
        timeOnHalves[1] += 1/60;
    }
}

var ScoresNumbers = '0️⃣1️⃣2️⃣3️⃣4️⃣5️⃣6️⃣7️⃣8️⃣9️⃣';

room.onGamePause = function () {
  isGamePaused = true;
};

// Agrega un manejador para el evento de reanudación del juego
room.onGameUnpause = function () {
  isGamePaused = false;
};


function scorerNumber(num){
    var result = '';
    var reversedDigits = [];
    do{
        reversedDigits.push(num % 10);
        num = Math.floor(num / 10);
    }while(num > 0);
    for (var i = reversedDigits.length; i-- > 0; ){
        result += ScoresNumbers.substr(reversedDigits[i]*3, 3);
    }
   
    return result;
}

function realSoccerRef() {
	blockThrowIn();
	blockGoalKick();
	removeBlock();

		if (game.time == gameTime){
		game.rsCorner2 = false;
		game.rsGoalKick2 = false;
		game.lateral2 = false;
	}

	if (game.time == gameTime * 60 && game.extraTimeAnnounced == false) {
		extraTime();
		game.extraTimeAnnounced = true;

	}
	
	if (game.time == game.extraTimeEnd && game.lastPlayAnnounced == false) {
	room.sendAnnouncement("                                    😱 ⏰  🔥          Ú L T I M A     J U G A D A    D E L    P A R T I D O      🔥  ⏰ 😱", null, 0xffff00, 'bold', 2);
	room.sendAnnouncement("                                                       💔 🚫   Si la pelota sale del terreno de juego, se finalizará el partido. ✋ 🛑", null, 0xf9fa00, 'small', 0);
		game.lastPlayAnnounced = true;
	}


	
	if (game.rsCorner2 == true || game.rsGoalKick2 == true || game.lateral2 == true) { //add extra time
		game.extraTimeCount++;
	}
	
	if (game.rsTimer < 99999 && game.paused == false && game.rsActive == false && game.rsReady == true) {
		game.rsTimer++;
	}
	
	if (game.rsSwingTimer < 150 && game.rsCorner == false && game.rsGoalKick == false) {
		game.rsSwingTimer++;
		if (game.rsSwingTimer > 5) {
			room.setDiscProperties(0, {xgravity: room.getDiscProperties(0).xgravity * 0.97, ygravity: room.getDiscProperties(0).ygravity * 0.97});
		}		
		if (game.rsSwingTimer == 150) {
			room.setDiscProperties(0, {xgravity: 0, ygravity: 0});
		}
	}
	
	
	if (game.boosterState == true) {
		game.boosterCount++;
	}
	
	if (game.boosterCount > 30) {
		game.boosterState = false;
		game.boosterCount = 0;
		room.setDiscProperties(0, {cMask: 63});
	}
	
	
	if (room.getBallPosition().x == 0 && room.getBallPosition().y == 0) {	
		game.rsActive = true;
		game.outStatus = "";
	}
	
	if (game.rsActive == false && game.rsReady == true) { //expire barrier time
		if (game.outStatus == "redThrow") {
			if (game.rsTimer == throwTimeOut - 120) { // warning indicator
				ballWarning("0xff223c", ++game.warningCount);
			}
			if (game.rsTimer == throwTimeOut && game.bringThrowBack == false) { // switch to blue throw
				game.outStatus = "blueThrow";
				game.rsTimer = 0;				
				room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
				sleep(100).then(() => {
					room.setDiscProperties(0, {color: "0x00ccff", xspeed: 0, yspeed: 0, x: game.ballOutPositionX, y: game.throwInPosY});
				});
			}
		}
		else if (game.outStatus == "blueThrow") {
			if (game.rsTimer == throwTimeOut - 120) { // warning indicator
				ballWarning("0x00ccff", ++game.warningCount);
			}
			if (game.rsTimer == throwTimeOut && game.bringThrowBack == false) { // switch to red throw
				game.outStatus = "redThrow";
				game.rsTimer = 0;						
				room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
				sleep(100).then(() => {
					room.setDiscProperties(0, {color: "0xff223c", xspeed: 0, yspeed: 0, x: game.ballOutPositionX, y: game.throwInPosY});
				});
			}
		}
		else if (game.outStatus == "blueGK" || game.outStatus == "redGK") {
			if (game.rsTimer == gkTimeOut - 120) { // warning indicator
				if (game.outStatus == "blueGK") {
					ballWarning("0x00ccff", ++game.warningCount);
				}
				if (game.outStatus == "redGK") {
					ballWarning("0xff223c", ++game.warningCount);
				}
			}
			if (game.rsTimer == gkTimeOut) {
				game.outStatus = "";
				room.setDiscProperties(0, {color: `0x${PelotaRS}`});
				game.rsTimer = 1000000;							
			}
		}
		else if (game.outStatus == "blueCK" || game.outStatus == "redCK") {
			if (game.rsTimer == ckTimeOut - 120) {
				if (game.outStatus == "blueCK") {
					ballWarning("0x00ccff", ++game.warningCount);
				}
				if (game.outStatus == "redCK") {
					ballWarning("0xff223c", ++game.warningCount);
				}
			}
			if (game.rsTimer == ckTimeOut) {
				game.outStatus = "";
				room.setDiscProperties(1, {x: 0, y: 2000, radius: 0});
				room.setDiscProperties(2, {x: 0, y: 2000, radius: 0});
				room.setDiscProperties(0, {color: `0x${PelotaRS}`});
				game.rsTimer = 1000000;							
			}
		}
	}
	
	if (game.rsActive == true) {
		if ((room.getBallPosition().y > 612 || room.getBallPosition().y < -612)) {
			game.rsActive = false;
			if (game.lastPlayAnnounced == true) {
				room.pauseGame(true);
				game.lastPlayAnnounced = false;
        if (GolDeOroActivado && room.getScores().red === room.getScores().blue) {
            room.sendAnnouncement("　　　¡GOL DE ORO!　　🔥 ⚽️　　EL PRIMERO EN MARCAR GOL, GANA.  🏆💥", null, 0xffd700, "bold", 2);
            AnuncioGolDeOro = true;

            setTimeout(function () {
                room.pauseGame(false);
            }, 1000); // Esto quitará la pausa después de un segundo.
        } else {
            // Si GolDeOroActivado es false o los equipos no están empatados, ejecuta el siguiente bloque de código
handleTeamVictory();
        setTimeout(function () {
    // Seleccionar la Figura del partido
    const figuraDelPartido = getFiguraDelPartido();
    enviarAnuncioFiguraDelPartido(figuraDelPartido);
    teamPossFun();
            room.sendAnnouncement("███████████████████ " + teamRed + "  " + getNumericEmoji(room.getScores().red) + "      🞬      " + getNumericEmoji(room.getScores().blue) + "  " + teamBlue + " ███████████████████", null, 0xffd559, "normal", 1);
    // ENVIAR AL DISCORD DESPÚES DE 300 milisegundos
    setTimeout(function () {
    sendDiscordWebhook();
    room.sendAnnouncement("📼 La grabación de la partida fue enviada a " + GrabacionesDiscord + " . ¡Bien jugado! 🎉");
    }, 150);
        }, 800);
    // Obtener los nombres de los jugadores en cada equipo
    const redTeamPlayerNames = room.getPlayerList().filter(player => player.team === 1).map(player => player.name);
    const blueTeamPlayerNames = room.getPlayerList().filter(player => player.team === 2).map(player => player.name);

    // Obtener el número de goles de cada equipo
    const GolesTotalesRED = room.getScores().red;
    const GolesTotalesBLUE = room.getScores().blue;

        // Verificar si el arquero del equipo Azul mantuvo la valla invicta
        if (GolesTotalesRED === 0 && ArqueroBLUE) {
            playerCleanSheets[ArqueroBLUE.name] = (playerCleanSheets[ArqueroBLUE.name] || 0) + 1;
        }
        // Verificar si el arquero del equipo Rojo mantuvo la valla invicta
        if (GolesTotalesBLUE === 0 && ArqueroRED) {
            playerCleanSheets[ArqueroRED.name] = (playerCleanSheets[ArqueroRED.name] || 0) + 1;
        }

    // Obtener el número de goles de cada equipo
    const redTeamGoals = room.getScores().red;
    const blueTeamGoals = room.getScores().blue;

    // Actualizar las estadísticas para cada jugador en el equipo rojo
    redTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, redTeamGoals > blueTeamGoals ? 'victory' : (redTeamGoals < blueTeamGoals ? 'defeat' : 'draw'));
    });

    // Actualizar las estadísticas para cada jugador en el equipo azul
    blueTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, blueTeamGoals > redTeamGoals ? 'victory' : (blueTeamGoals < redTeamGoals ? 'defeat' : 'draw'));
    });
        }
if (FairPlayActivado) {
                var scoreDifference = Math.abs(room.getScores().red - room.getScores().blue);


        if (scoreDifference === 1) {

            setTimeout(function () {
                room.stopGame();

                var players = room.getPlayerList().filter(function (player) {
                    return player.id !== 0;
                });

                if (players.length === 0) {
                    return false;
                }

                players.forEach(function (player) {
                    if (player.team === 1) {
                        room.setPlayerTeam(player.id, 2);
                    }
                    if (player.team === 2) {
                        room.setPlayerTeam(player.id, 1);
                    }
                });

                room.startGame();
            }, 3500); // PAUSA DE 3 SEGUNDOS
        } else if (scoreDifference === 2) {


            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                room.startGame();
            }, 3500); // PAUSA DE 3 SEGUNDOS
        } else if (scoreDifference >= 3) {


            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                const players = room.getPlayerList();

    // Filtrar a los jugadores que están en el campo
    const activePlayers = players.filter(p => p.team !== 0 && p.position !== null);

    // Ordenar a los jugadores activos por nivel de mayor a menor
    const sortedPlayers = activePlayers.sort((a, b) => {
        const aPoints = (totalPlayerGoals[a.name] || 0) + ((totalPlayerAssists[a.name] || 0) * 0.7);
        const bPoints = (totalPlayerGoals[b.name] || 0) + ((totalPlayerAssists[b.name] || 0) * 0.7);
        return bPoints - aPoints;
    });

    // Distribuir a los jugadores en dos equipos equilibrados
    const team1 = [];
    const team2 = [];
    let totalPointsTeam1 = 0;
    let totalPointsTeam2 = 0;

    // Iterar sobre los jugadores y asignarlos a los equipos de manera equitativa
    for (let i = 0; i < sortedPlayers.length; i++) {
        const currentPlayer = sortedPlayers[i];
        const currentPlayerPoints = (totalPlayerGoals[currentPlayer.name] || 0) + ((totalPlayerAssists[currentPlayer.name] || 0) * 0.7);

        if (totalPointsTeam1 <= totalPointsTeam2) {
            team1.push(currentPlayer);
            totalPointsTeam1 += currentPlayerPoints;
        } else {
            team2.push(currentPlayer);
            totalPointsTeam2 += currentPlayerPoints;
        }
    }

    // Asignar los equipos a los jugadores
    team1.forEach(player => room.setPlayerTeam(player.id, 1));
    team2.forEach(player => room.setPlayerTeam(player.id, 2));
    balanceTeams();
}, 3000); // PAUSA DE 3 SEGUNDOS
setTimeout(function() {
    balanceTeams();
}, 4000); // Esperar 
setTimeout(function() {
    room.startGame();
}, 4500); // Esperar 
            

        }
    }

			}
			
			room.setDiscProperties(0, {xgravity: 0, ygravity: 0});
			
			game.ballOutPositionX = Math.round(room.getBallPosition().x * 10) / 10;
			if (room.getBallPosition().y > 612) {
				game.ballOutPositionY = 400485;
				game.throwInPosY = 618;
			}
			if (room.getBallPosition().y < -612) {
				game.ballOutPositionY = -400485;
				game.throwInPosY = -618;
			}
			if (room.getBallPosition().x > 1130) {
				game.ballOutPositionX = 1130;
			}
			if (room.getBallPosition().x < -1130) {
				game.ballOutPositionX = -1130;
			}
			
			
			if (game.rsTouchTeam == 1) {				
				room.setDiscProperties(3, {x: game.ballOutPositionX, y: game.throwInPosY, radius: 18 });
				sleep(100).then(() => {
					game.outStatus = "blueThrow";
					game.throwinKicked = false;
					game.rsTimer = 0;
					game.rsReady = true;
					game.lateral = true;
					game.lateral2 = true;
					room.setDiscProperties(0, {xspeed: 0, yspeed: 0, x: game.ballOutPositionX, y: game.throwInPosY, xgravity: 0, ygravity: 0});
					//announce("🖐️ Throw In: 🔵 Blue");
					room.setDiscProperties(0, {color: "0x00ccff"});				
				});	
				sleep(100).then(() => {
					room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
				});
			}
			else {				
				room.setDiscProperties(3, {x: game.ballOutPositionX, y: game.throwInPosY, radius: 18 });
				sleep(100).then(() => {
					game.outStatus = "redThrow";
					game.throwinKicked = false;
					game.rsTimer = 0;
					game.rsReady = true;
					game.lateral = true;
					game.lateral2 = true;
					room.setDiscProperties(0, {xspeed: 0, yspeed: 0, x: game.ballOutPositionX, y: game.throwInPosY, xgravity: 0, ygravity: 0});
					//announce("🖐️ Throw In: 🔴 Red");
					room.setDiscProperties(0, {color: "0xff223c"});				
				});	
				sleep(100).then(() => {
					room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
				});
			}
		}
	
		if (room.getBallPosition().x > 1162 && (room.getBallPosition().y > 124 || room.getBallPosition().y < -124)) {
			game.rsActive = false;	
			if (game.lastPlayAnnounced == true) {

				room.pauseGame(true);
				game.lastPlayAnnounced = false;
        if (GolDeOroActivado && room.getScores().red === room.getScores().blue) {
            room.sendAnnouncement("　　　¡GOL DE ORO!　　🔥 ⚽️　　EL PRIMERO EN MARCAR GOL, GANA.  🏆💥", null, 0xffd700, "bold", 2);
            AnuncioGolDeOro = true;

            setTimeout(function () {
                room.pauseGame(false);
            }, 1000); // Esto quitará la pausa después de un segundo.
        } else {
            // Si GolDeOroActivado es false o los equipos no están empatados, ejecuta el siguiente bloque de código
handleTeamVictory();
        setTimeout(function () {
    // Seleccionar la Figura del partido
    const figuraDelPartido = getFiguraDelPartido();
    enviarAnuncioFiguraDelPartido(figuraDelPartido);
    teamPossFun();
            room.sendAnnouncement("███████████████████ " + teamRed + "  " + getNumericEmoji(room.getScores().red) + "      🞬      " + getNumericEmoji(room.getScores().blue) + "  " + teamBlue + " ███████████████████", null, 0xffd559, "normal", 1);
    // ENVIAR AL DISCORD DESPÚES DE 300 milisegundos
    setTimeout(function () {
    sendDiscordWebhook();
    room.sendAnnouncement("📼 La grabación de la partida fue enviada a " + GrabacionesDiscord + " . ¡Bien jugado! 🎉");
    }, 150);

        }, 800);
    // Obtener los nombres de los jugadores en cada equipo
    const redTeamPlayerNames = room.getPlayerList().filter(player => player.team === 1).map(player => player.name);
    const blueTeamPlayerNames = room.getPlayerList().filter(player => player.team === 2).map(player => player.name);

    // Obtener el número de goles de cada equipo
    const GolesTotalesRED = room.getScores().red;
    const GolesTotalesBLUE = room.getScores().blue;

        // Verificar si el arquero del equipo Azul mantuvo la valla invicta
        if (GolesTotalesRED === 0 && ArqueroBLUE) {
            playerCleanSheets[ArqueroBLUE.name] = (playerCleanSheets[ArqueroBLUE.name] || 0) + 1;
        }
        // Verificar si el arquero del equipo Rojo mantuvo la valla invicta
        if (GolesTotalesBLUE === 0 && ArqueroRED) {
            playerCleanSheets[ArqueroRED.name] = (playerCleanSheets[ArqueroRED.name] || 0) + 1;
        }

    // Obtener el número de goles de cada equipo
    const redTeamGoals = room.getScores().red;
    const blueTeamGoals = room.getScores().blue;

    // Actualizar las estadísticas para cada jugador en el equipo rojo
    redTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, redTeamGoals > blueTeamGoals ? 'victory' : (redTeamGoals < blueTeamGoals ? 'defeat' : 'draw'));
    });

    // Actualizar las estadísticas para cada jugador en el equipo azul
    blueTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, blueTeamGoals > redTeamGoals ? 'victory' : (blueTeamGoals < redTeamGoals ? 'defeat' : 'draw'));
    });
        }


if (FairPlayActivado) {
                var scoreDifference = Math.abs(room.getScores().red - room.getScores().blue);


        if (scoreDifference === 1) {


            setTimeout(function () {
                room.stopGame();

                var players = room.getPlayerList().filter(function (player) {
                    return player.id !== 0;
                });

                if (players.length === 0) {
                    return false;
                }

                players.forEach(function (player) {
                    if (player.team === 1) {
                        room.setPlayerTeam(player.id, 2);
                    }
                    if (player.team === 2) {
                        room.setPlayerTeam(player.id, 1);
                    }
                });

                room.startGame();
            }, 3500); // PAUSA DE 3 SEGUNDOS
        } else if (scoreDifference === 2) {


            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                room.startGame();
            }, 3500); // PAUSA DE 3 SEGUNDOS
        } else if (scoreDifference >= 3) {


            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                const players = room.getPlayerList();

    // Filtrar a los jugadores que están en el campo
    const activePlayers = players.filter(p => p.team !== 0 && p.position !== null);

    // Ordenar a los jugadores activos por nivel de mayor a menor
    const sortedPlayers = activePlayers.sort((a, b) => {
        const aPoints = (totalPlayerGoals[a.name] || 0) + ((totalPlayerAssists[a.name] || 0) * 0.7);
        const bPoints = (totalPlayerGoals[b.name] || 0) + ((totalPlayerAssists[b.name] || 0) * 0.7);
        return bPoints - aPoints;
    });

    // Distribuir a los jugadores en dos equipos equilibrados
    const team1 = [];
    const team2 = [];
    let totalPointsTeam1 = 0;
    let totalPointsTeam2 = 0;

    // Iterar sobre los jugadores y asignarlos a los equipos de manera equitativa
    for (let i = 0; i < sortedPlayers.length; i++) {
        const currentPlayer = sortedPlayers[i];
        const currentPlayerPoints = (totalPlayerGoals[currentPlayer.name] || 0) + ((totalPlayerAssists[currentPlayer.name] || 0) * 0.7);

        if (totalPointsTeam1 <= totalPointsTeam2) {
            team1.push(currentPlayer);
            totalPointsTeam1 += currentPlayerPoints;
        } else {
            team2.push(currentPlayer);
            totalPointsTeam2 += currentPlayerPoints;
        }
    }

    // Asignar los equipos a los jugadores
    team1.forEach(player => room.setPlayerTeam(player.id, 1));
    team2.forEach(player => room.setPlayerTeam(player.id, 2));
    balanceTeams();
}, 3000); // PAUSA DE 3 SEGUNDOS
setTimeout(function() {
    balanceTeams();
}, 4000); // Esperar 
setTimeout(function() {
    room.startGame();
}, 4500); // Esperar 

        }
    }

			}
			room.setDiscProperties(0, {xgravity: 0, ygravity: 0});
			room.getPlayerList().forEach(function(player) {
				room.setPlayerDiscProperties(player.id, {invMass: 100000});
			});
			
			if (game.rsTouchTeam == 1) {				
				room.setDiscProperties(3, {x: 1060, y: 0, radius: 18 });
				sleep(100).then(() => {					
					game.outStatus = "blueGK";
					game.rsTimer = 0;
					game.rsReady = true;
					//announce("🥅 Goal Kick: 🔵 Blue");
					game.rsGoalKick = true;
					game.rsGoalKick2 = true;
					game.rsSwingTimer = 0;
					game.boosterCount = 0;
					game.boosterState = false;
					room.setDiscProperties(0, {xspeed: 0, yspeed: 0, x: 1060, y: 0, color: "0x00ccff", cMask: 268435519, xgravity: 0, ygravity: 0});
				});
				sleep(3000).then(() => {
					room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
				});
			}
			else {	
				//announce("🚩 Corner Kick: 🔴 Red");							
				game.rsSwingTimer = 0;
				if (room.getBallPosition().y < -124) {					
					room.setDiscProperties(3, {x: 1140, y: -590, radius: 18 });
					sleep(100).then(() => {
						game.rsCorner = true;
						game.rsCorner2 = true;
						game.outStatus = "redCK";
						game.rsTimer = 0;
						game.rsReady = true;
						game.boosterCount = 0;
						game.boosterState = false;
						room.setDiscProperties(0, {x: 1140, y: -590, xspeed: 0, yspeed: 0, color: "0xff223c", cMask: 268435519, xgravity: 0, ygravity: 0});
						room.setDiscProperties(2, {x: 1150, y: -670, radius: 420 });
						room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
					});
				}
				if (room.getBallPosition().y > 124) {
					room.setDiscProperties(3, {x: 1140, y: 590, radius: 18 });
					sleep(100).then(() => {
						game.rsCorner = true;
						game.rsCorner2 = true;
						game.outStatus = "redCK";
						game.rsTimer = 0;
						game.rsReady = true;
						game.boosterCount = 0;
						game.boosterState = false;
						room.setDiscProperties(0, {x: 1140, y: 590, xspeed: 0, yspeed: 0, color: "0xff223c", cMask: 268435519, xgravity: 0, ygravity: 0});
						room.setDiscProperties(2, {x: 1150, y: 670, radius: 420 });
						room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
					});
				}
			}
		}
		if (room.getBallPosition().x < -1162 && (room.getBallPosition().y > 124 || room.getBallPosition().y < -124)) {
			game.rsActive = false;
			if (game.lastPlayAnnounced == true) {
				room.pauseGame(true);
				game.lastPlayAnnounced = false;
        if (GolDeOroActivado && room.getScores().red === room.getScores().blue) {
            room.sendAnnouncement("　　　¡GOL DE ORO!　　🔥 ⚽️　　EL PRIMERO EN MARCAR GOL, GANA.  🏆💥", null, 0xffd700, "bold", 2);
            AnuncioGolDeOro = true;

            setTimeout(function () {
                room.pauseGame(false);
            }, 1000); // Esto quitará la pausa después de un segundo.
        } else {
            // Si GolDeOroActivado es false o los equipos no están empatados, ejecuta el siguiente bloque de código
handleTeamVictory();
        setTimeout(function () {
    // Seleccionar la Figura del partido
    const figuraDelPartido = getFiguraDelPartido();
    enviarAnuncioFiguraDelPartido(figuraDelPartido);
    teamPossFun();
            room.sendAnnouncement("███████████████████ " + teamRed + "  " + getNumericEmoji(room.getScores().red) + "      🞬      " + getNumericEmoji(room.getScores().blue) + "  " + teamBlue + " ███████████████████", null, 0xffd559, "normal", 1);
    // ENVIAR AL DISCORD DESPÚES DE 300 milisegundos
    setTimeout(function () {
    sendDiscordWebhook();
    room.sendAnnouncement("📼 La grabación de la partida fue enviada a " + GrabacionesDiscord + " . ¡Bien jugado! 🎉");
    }, 150);

        }, 800);
    // Obtener los nombres de los jugadores en cada equipo
    const redTeamPlayerNames = room.getPlayerList().filter(player => player.team === 1).map(player => player.name);
    const blueTeamPlayerNames = room.getPlayerList().filter(player => player.team === 2).map(player => player.name);

    // Obtener el número de goles de cada equipo
    const GolesTotalesRED = room.getScores().red;
    const GolesTotalesBLUE = room.getScores().blue;

        // Verificar si el arquero del equipo Azul mantuvo la valla invicta
        if (GolesTotalesRED === 0 && ArqueroBLUE) {
            playerCleanSheets[ArqueroBLUE.name] = (playerCleanSheets[ArqueroBLUE.name] || 0) + 1;
        }
        // Verificar si el arquero del equipo Rojo mantuvo la valla invicta
        if (GolesTotalesBLUE === 0 && ArqueroRED) {
            playerCleanSheets[ArqueroRED.name] = (playerCleanSheets[ArqueroRED.name] || 0) + 1;
        }

    // Obtener el número de goles de cada equipo
    const redTeamGoals = room.getScores().red;
    const blueTeamGoals = room.getScores().blue;

    // Actualizar las estadísticas para cada jugador en el equipo rojo
    redTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, redTeamGoals > blueTeamGoals ? 'victory' : (redTeamGoals < blueTeamGoals ? 'defeat' : 'draw'));
    });

    // Actualizar las estadísticas para cada jugador en el equipo azul
    blueTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, blueTeamGoals > redTeamGoals ? 'victory' : (blueTeamGoals < redTeamGoals ? 'defeat' : 'draw'));
    });
        }



if (FairPlayActivado) {
                var scoreDifference = Math.abs(room.getScores().red - room.getScores().blue);


        if (scoreDifference === 1) {


            setTimeout(function () {
                room.stopGame();

                var players = room.getPlayerList().filter(function (player) {
                    return player.id !== 0;
                });

                if (players.length === 0) {
                    return false;
                }

                players.forEach(function (player) {
                    if (player.team === 1) {
                        room.setPlayerTeam(player.id, 2);
                    }
                    if (player.team === 2) {
                        room.setPlayerTeam(player.id, 1);
                    }
                });

                room.startGame();
            }, 3500); // PAUSA DE 3 SEGUNDOS
        } else if (scoreDifference === 2) {


            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                room.startGame();
            }, 3500); // PAUSA DE 3 SEGUNDOS
        } else if (scoreDifference >= 3) {


            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                const players = room.getPlayerList();

    // Filtrar a los jugadores que están en el campo
    const activePlayers = players.filter(p => p.team !== 0 && p.position !== null);

    // Ordenar a los jugadores activos por nivel de mayor a menor
    const sortedPlayers = activePlayers.sort((a, b) => {
        const aPoints = (totalPlayerGoals[a.name] || 0) + ((totalPlayerAssists[a.name] || 0) * 0.7);
        const bPoints = (totalPlayerGoals[b.name] || 0) + ((totalPlayerAssists[b.name] || 0) * 0.7);
        return bPoints - aPoints;
    });

    // Distribuir a los jugadores en dos equipos equilibrados
    const team1 = [];
    const team2 = [];
    let totalPointsTeam1 = 0;
    let totalPointsTeam2 = 0;

    // Iterar sobre los jugadores y asignarlos a los equipos de manera equitativa
    for (let i = 0; i < sortedPlayers.length; i++) {
        const currentPlayer = sortedPlayers[i];
        const currentPlayerPoints = (totalPlayerGoals[currentPlayer.name] || 0) + ((totalPlayerAssists[currentPlayer.name] || 0) * 0.7);

        if (totalPointsTeam1 <= totalPointsTeam2) {
            team1.push(currentPlayer);
            totalPointsTeam1 += currentPlayerPoints;
        } else {
            team2.push(currentPlayer);
            totalPointsTeam2 += currentPlayerPoints;
        }
    }

    // Asignar los equipos a los jugadores
    team1.forEach(player => room.setPlayerTeam(player.id, 1));
    team2.forEach(player => room.setPlayerTeam(player.id, 2));
    balanceTeams();
}, 3000); // PAUSA DE 3 SEGUNDOS
setTimeout(function() {
    balanceTeams();
}, 4000); // Esperar 
setTimeout(function() {
    room.startGame();
}, 4500); // Esperar 

        }
    }


			}
			room.setDiscProperties(0, {xgravity: 0, ygravity: 0});
			room.getPlayerList().forEach(function(player) {
				room.setPlayerDiscProperties(player.id, {invMass: 100000});
			});
			
			if (game.rsTouchTeam == 1) {				
				//announce("🚩 Corner Kick: 🔵 Blue");				
				game.rsSwingTimer = 0;
				if (room.getBallPosition().y < -124) {
					room.setDiscProperties(3, {x: -1140, y: -590, radius: 18 });
					sleep(100).then(() => {
						game.rsCorner = true;
						game.rsCorner2 = true;
						game.outStatus = "blueCK";
						game.rsTimer = 0;
						game.rsReady = true;
						game.boosterCount = 0;
						game.boosterState = false;
						room.setDiscProperties(0, {x: -1140, y: -590, xspeed: 0, yspeed: 0, color: "0x00ccff", cMask: 268435519, xgravity: 0, ygravity: 0});
						room.setDiscProperties(1, {x: -1150, y: -670, radius: 420 });
						room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
					});	
				}
				if (room.getBallPosition().y > 124) {
					room.setDiscProperties(3, {x: -1140, y: 590, radius: 18 });
					sleep(100).then(() => {
						game.rsCorner = true;
						game.rsCorner2 = true;
						game.outStatus = "blueCK";
						game.rsTimer = 0;
						game.rsReady = true;
						game.boosterCount = 0;
						game.boosterState = false;
						room.setDiscProperties(0, {x: -1140, y: 590, xspeed: 0, yspeed: 0, color: "0x00ccff", cMask: 268435519, xgravity: 0, ygravity: 0});
						room.setDiscProperties(1, {x: -1150, y: 670, radius: 420 });
						room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
					});		
				}				
			}
			else {				
				room.setDiscProperties(3, {x: -1060, y: 0, radius: 18 });
				sleep(100).then(() => {
					game.outStatus = "redGK";
					game.rsTimer = 0;
					game.rsReady = true;
					//announce("🥅 Goal Kick: 🔴 Red");
					game.rsGoalKick = true;
					game.rsGoalKick2 = true;
					game.rsSwingTimer = 0;
					game.boosterCount = 0;
					game.boosterState = false;
					room.setDiscProperties(0, {xspeed: 0, yspeed: 0, x: -1060, y: 0, color: "0xff223c", cMask: 268435519, xgravity: 0, ygravity: 0});
				});
				sleep(3000).then(() => {
					room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
				});
			}
		}
	}
	
	if (game.rsActive == false && (game.outStatus == "redThrow" || game.outStatus == "blueThrow")) { 
		if ((room.getBallPosition().y > 612 || room.getBallPosition().y < -612) && (room.getBallPosition().x < game.ballOutPositionX - throwinDistance || room.getBallPosition().x > game.ballOutPositionX + throwinDistance) && game.bringThrowBack == false) { //if bad throw from run too far
			game.bringThrowBack	= true;
			if (game.outStatus == "redThrow") { //switch to blue throw
				game.rsTimer = 0;
				game.warningCount++;
				game.outStatus = "blueThrow";								
				room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
				sleep(100).then(() => {
					room.setDiscProperties(0, {xspeed: 0, yspeed: 0, color: "0x00ccff", x: game.ballOutPositionX, y: game.throwInPosY});	
				});			
			}
			else if (game.outStatus == "blueThrow") { //switch to red throw
				game.rsTimer = 0;
				game.warningCount++;
				game.outStatus = "redThrow";										
				room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});	
				sleep(100).then(() => {
					room.setDiscProperties(0, {xspeed: 0, yspeed: 0, color: "0xff223c", x: game.ballOutPositionX, y: game.throwInPosY});
				});
			}
				
		}
		
		if (room.getBallPosition().y < 612 && room.getBallPosition().y > -612 && game.throwinKicked == false && game.pushedOut == false) { //if bad throw from push ball back into active without kick		
			if (game.outStatus == "redThrow") { //switch to blue throw
				game.rsTimer = 0;
				game.warningCount++;
				game.outStatus = "blueThrow";								
				room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
				sleep(100).then(() => {
					room.setDiscProperties(0, {xspeed: 0, yspeed: 0, color: "0x00ccff", x: game.ballOutPositionX, y: game.throwInPosY});
				});					
			}
			else if (game.outStatus == "blueThrow") { //switch to red throw
				game.rsTimer = 0;
				game.warningCount++;
				game.outStatus = "redThrow";										
				room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});	
				sleep(100).then(() => {
					room.setDiscProperties(0, {xspeed: 0, yspeed: 0, color: "0xff223c", x: game.ballOutPositionX, y: game.throwInPosY});
				});
			}
			game.pushedOut = true;
		}
		
		if (room.getBallPosition().y < 612 && room.getBallPosition().y > -612 && game.throwinKicked == true) { // if throw is good
			game.lateral = false;
			game.lateral2 = false;
			game.outStatus = "";
			game.rsActive = true;
			game.rsReady = false;
			room.setDiscProperties(0, {color: `0x${PelotaRS}`});
			game.rsTimer = 1000000;
			game.warningCount++;
		}
		
		if (room.getBallPosition().y.toFixed(1) == game.throwInPosY.toFixed(1) && room.getBallPosition().x.toFixed(1) == game.ballOutPositionX.toFixed(1)) {
			game.bringThrowBack	= false;
			game.pushedOut = false;
		}
	}
}



function handleBallTouchFUTSAL() {
    var players = room.getPlayerList();
    var ballPosition = room.getBallPosition();
    var ballRadius = game.ballRadius;
    var triggerDistance = ballRadius + 0.01;
    var distanciaMinimaParaCancelarDisparo = 15; // Ajusta esta distancia según tus necesidades.

    for (var i = 0; i < players.length; i++) {
        var player = players[i];
        if (player.position == null) continue;
        var distanceToBall = pointDistance(player.position, ballPosition);
        var playerRadius = room.getPlayerDiscProperties(player.id).radius;
        var triggerDistanceWithPlayer = ballRadius + playerRadius + 0.01;

        if (distanceToBall < triggerDistanceWithPlayer) {
            game.rsTouchTeam = player.team;
            game.throwinKicked = false;

            // POWERSHOT CODE
            if (game.rsCorner == false && game.rsGoalKick == false && game.outStatus != "blueThrow" && game.outStatus != "redThrow" && powerShotMode == true) {
                if (game.powershotID != player.id) {
                    game.powershotID = player.id;
                    game.powershotTrigger = false;
                    game.powershotCounter = 0;
                } else {
                    game.powershotCounter++;
                    if (game.powershotCounter > 52 && game.powershotTrigger == false && Math.round(room.getDiscProperties(0).invMass) != PotenciaPowerShot) {
				room.setDiscProperties(0, {"bCoef":0.4,"invMass":PotenciaPowerShot,"damping":0.99, color: `0x${PelotaFutsal_PowerShot}` }); // Cambia el color a naranja
                        room.sendAnnouncement("POWERSHOT ACTIVADO!", game.powershotID, 0x33dd33, "bold", 1);
                        game.powershotTrigger = true;
                    }
                }
            }
            // POWERSHOT CODE

            if (game.rsCorner == false && room.getDiscProperties(0).xgravity != 0) {
                room.setDiscProperties(0, { xgravity: 0, ygravity: 0 });
                game.rsSwingTimer = 5200;
            }
        } else if (distanceToBall > triggerDistanceWithPlayer + distanciaMinimaParaCancelarDisparo) {
            if (game.powershotID === player.id && game.powershotTrigger === true && powerShotMode === true) {
                game.powershotTrigger = false;
                game.powershotCounter = 0;
                game.powershotID = 0;
                if (parseFloat(room.getDiscProperties(0).invMass.toFixed(2)) !== 1.5) {
				room.setDiscProperties(0, {"bCoef":0.4,"invMass":1.5,"damping":0.99, color: `0x${PelotaFutsal}` }); // Cambia el color a naranja
                    room.sendAnnouncement("POWERSHOT CANCELADO!", player.id, 0xdd3333, "bold", 2);
                }
            }
        }
    }
}


function handleBallTouch() {
    var players = room.getPlayerList();
    var ballPosition = room.getBallPosition();
    var ballRadius = game.ballRadius;
    var triggerDistance = ballRadius + 0.01;
    var distanciaMinimaParaCancelarDisparo = 15; // Ajusta esta distancia según tus necesidades.

    for (var i = 0; i < players.length; i++) {
        var player = players[i];
        if (player.position == null) continue;
        var distanceToBall = pointDistance(player.position, ballPosition);
        var playerRadius = room.getPlayerDiscProperties(player.id).radius;
        var triggerDistanceWithPlayer = ballRadius + playerRadius + 0.01;

        if (distanceToBall < triggerDistanceWithPlayer) {
            game.rsTouchTeam = player.team;
            game.throwinKicked = false;

            // POWERSHOT CODE
            if (game.rsCorner == false && game.rsGoalKick == false && game.outStatus != "blueThrow" && game.outStatus != "redThrow" && powerShotMode == true) {
                if (game.powershotID != player.id) {
                    game.powershotID = player.id;
                    game.powershotTrigger = false;
                    game.powershotCounter = 0;
                } else {
                    game.powershotCounter++;
                    if (game.powershotCounter > 52 && game.powershotTrigger == false && Math.round(room.getDiscProperties(0).invMass) != PotenciaPowerShotRS) {
                        room.setDiscProperties(0, { invMass: PotenciaPowerShotRS, color: `0x${PelotaRS_PowerShot}` }); // Cambia el color a naranja
                        room.sendAnnouncement("POWERSHOT ACTIVADO!", game.powershotID, 0x33dd33, "bold", 1);
                        game.powershotTrigger = true;
                    }
                }
            }
            // POWERSHOT CODE

            if (game.rsCorner == false && room.getDiscProperties(0).xgravity != 0) {
                room.setDiscProperties(0, { xgravity: 0, ygravity: 0 });
                game.rsSwingTimer = 5200;
            }
        } else if (distanceToBall > triggerDistanceWithPlayer + distanciaMinimaParaCancelarDisparo) {
            if (game.powershotID === player.id && game.powershotTrigger === true && powerShotMode === true) {
                game.powershotTrigger = false;
                game.powershotCounter = 0;
                game.powershotID = 0;
                if (parseFloat(room.getDiscProperties(0).invMass.toFixed(2)) !== 1.05) {
                    room.setDiscProperties(0, { invMass: 1.05, color: `0x${PelotaRS}` }); // Restaura el color original
                    room.sendAnnouncement("POWERSHOT CANCELADO!", player.id, 0xdd3333, "bold", 2);
                }
            }
        }
    }
}




var game = {
  time: 0,
  ballRadius: 0,
  ticks: 0
};

function updateGameStatus() {
  var _0x28cb48 = _0x3c81f9;
  game['time'] = Math[_0x28cb48(0x1c3)](room[_0x28cb48(0x172)]()['time']);
  game['ballRadius'] = room['getDiscProperties'](0x0)[_0x28cb48(0x121)];
  game['ticks']++;
}

function announce(_0x2f0a83, _0x3a75ce, _0x2c2aa7, _0x3614b0, _0x28f16f) {
	var _0xdb5dc1 = _0x3c81f9;
	_0x2c2aa7 == null && (_0x2c2aa7 = 0xfffd82), _0x3614b0 == null && (_0x3614b0 = _0xdb5dc1(0x17a)), _0x28f16f == null && (_0x28f16f = 0x0), room['sendAnnouncement'](_0x2f0a83, _0x3a75ce, _0x2c2aa7, _0x3614b0, _0x28f16f);
}

function whisper(_0x1efb47, _0x166a3c, _0x37ade9, _0x3c8c4c, _0x3d8947) {
	var _0x341048 = _0x3c81f9;
	_0x37ade9 == null && (_0x37ade9 = 0x66c7ff), _0x3c8c4c == null && (_0x3c8c4c = _0x341048(0x1d6)), _0x3d8947 == null && (_0x3d8947 = 0x0), room[_0x341048(0x1d2)](_0x1efb47, _0x166a3c, _0x37ade9, _0x3c8c4c, _0x3d8947);
}

function isAdminPresent() {
	var players = room.getPlayerList();
	if (players.find((player) => player.admin) != null) {
		return true;
	}
	else {
		return false;
	}
}

function displayAdminMessage() {
    if (isAdminPresent() === false && allowPublicAdmin === true) {
        room.sendAnnouncement("🔒 ¡No hay administrador en la sala! Para hacer a alguien administrador, escribe:", null, 0xFFFFFF, "small-bold", 1);
        setTimeout(function() {
            room.sendAnnouncement("       !admin NúmeroID         Por ejemplo: !admin 20 (Para votar al jugador con ID nº 20.)", null, 0x00FF00, "bold", 1);
        }, 500); // Esperar un segundo (500 milisegundos)
        setTimeout(function() {
            room.sendAnnouncement("¡RECUERDA, EL NÚMERO es el Nº de ID del JUGADOR que quieres VOTAR PARA ADMINISTRADOR! Puedes ver los IDs con !ids. Si más de la mitad de los jugadores vota por un mismo jugador, dicho jugador será administrador.", null, 0xFFFFFF, "small-bold", 1);
        }, 1000); // Esperar dos segundos (1000 milisegundos)
    }
}




function pointDistance(_0x6b9cc5, _0x21a1e7) {
	var _0x43d01b = _0x3c81f9,
		_0x132800 = _0x6b9cc5['x'] - _0x21a1e7['x'],
		_0x26e284 = _0x6b9cc5['y'] - _0x21a1e7['y'];
	return Math[_0x43d01b(0x193)](_0x132800 * _0x132800 + _0x26e284 * _0x26e284);
}

function sleep(_0x17ee36) {
	return new Promise(_0x1d5abb => setTimeout(_0x1d5abb, _0x17ee36));
}

function ballWarning(origColour, warningCount) {
	sleep(200).then(() => {
		if (game.warningCount == warningCount) {
			room.setDiscProperties(0, {color: `0x${PelotaRS}`});
		}
	});
	sleep(400).then(() => {
		if (game.warningCount == warningCount) {
			room.setDiscProperties(0, {color: origColour});
		}
	});
	sleep(600).then(() => {
		if (game.warningCount == warningCount) {
			room.setDiscProperties(0, {color: `0x${PelotaRS}`});
		}
	});
	sleep(800).then(() => {
		if (game.warningCount == warningCount) {
			room.setDiscProperties(0, {color: origColour});
		}
	});
	sleep(1000).then(() => {
		if (game.warningCount == warningCount) {
			room.setDiscProperties(0, {color: `0x${PelotaRS}`});
		}
	});
	sleep(1200).then(() => {
		if (game.warningCount == warningCount) {
			room.setDiscProperties(0, {color: origColour});
		}
	});
	sleep(1400).then(() => {
		if (game.warningCount == warningCount) {
			room.setDiscProperties(0, {color: `0x${PelotaRS}`});
		}
	});
	sleep(1600).then(() => {
		if (game.warningCount == warningCount) {
			room.setDiscProperties(0, {color: origColour});
		}
	});
	sleep(1675).then(() => {
		if (game.warningCount == warningCount) {
			room.setDiscProperties(0, {color: `0x${PelotaRS}`});
		}
	});
	sleep(1750).then(() => {
		if (game.warningCount == warningCount) {
			room.setDiscProperties(0, {color: origColour});
		}
	});
}


function avatarCelebration(_0x324e3c, _0x3eba06) {
	var _0x56d7e8 = _0x3c81f9;
	room[_0x56d7e8(0x15e)](_0x324e3c, _0x3eba06), sleep(0xfa)[_0x56d7e8(0x174)](() => {
		var _0x4c9cb0 = _0x56d7e8;
		room[_0x4c9cb0(0x15e)](_0x324e3c, null);
	}), sleep(0x1f4)[_0x56d7e8(0x174)](() => {
		var _0x6a5198 = _0x56d7e8;
		room[_0x6a5198(0x15e)](_0x324e3c, _0x3eba06);
	}), sleep(0x2ee)[_0x56d7e8(0x174)](() => {
		room['setPlayerAvatar'](_0x324e3c, null);
	}), sleep(0x3e8)[_0x56d7e8(0x174)](() => {
		var _0x431ddc = _0x56d7e8;
		room[_0x431ddc(0x15e)](_0x324e3c, _0x3eba06);
	}), sleep(0x4e2)[_0x56d7e8(0x174)](() => {
		var _0x2bea31 = _0x56d7e8;
		room[_0x2bea31(0x15e)](_0x324e3c, null);
	}), sleep(0x5dc)['then'](() => {
		var _0x5ca3a7 = _0x56d7e8;
		room[_0x5ca3a7(0x15e)](_0x324e3c, _0x3eba06);
	}), sleep(0x6d6)[_0x56d7e8(0x174)](() => {
		var _0x5225e9 = _0x56d7e8;
		room[_0x5225e9(0x15e)](_0x324e3c, null);
	}), sleep(0x7d0)[_0x56d7e8(0x174)](() => {
		var _0x5558dd = _0x56d7e8;
		room[_0x5558dd(0x15e)](_0x324e3c, _0x3eba06);
	}), sleep(0x8ca)[_0x56d7e8(0x174)](() => {
		var _0x6872e4 = _0x56d7e8;
		room[_0x6872e4(0x15e)](_0x324e3c, null);
	}), sleep(0x9c4)[_0x56d7e8(0x174)](() => {
		var _0x3f6153 = _0x56d7e8;
		room[_0x3f6153(0x15e)](_0x324e3c, _0x3eba06);
	}), sleep(0xabe)['then'](() => {
		var _0x170109 = _0x56d7e8;
		room[_0x170109(0x15e)](_0x324e3c, null);
	}), sleep(0xbb8)['then'](() => {
		var _0x47ef1d = _0x56d7e8;
		room[_0x47ef1d(0x15e)](_0x324e3c, _0x3eba06);
	}), sleep(0xcb2)[_0x56d7e8(0x174)](() => {
		var _0x3e1d25 = _0x56d7e8;
		room[_0x3e1d25(0x15e)](_0x324e3c, null);
	});
}

function secondsToMinutes(_0x46ebc4) {
	var _0x1b57ad = ~~ (_0x46ebc4 / 0xe10),
		_0x58786b = ~~ (_0x46ebc4 % 0xe10 / 0x3c),
		_0x43c8d3 = ~~_0x46ebc4 % 0x3c,
		_0x58bd92 = '';
	return _0x1b57ad > 0x0 && (_0x58bd92 += '' + _0x1b57ad + ':' + (_0x58786b < 0xa ? '0' : '')), _0x58bd92 += '' + _0x58786b + ':' + (_0x43c8d3 < 0xa ? '0' : ''), _0x58bd92 += '' + _0x43c8d3, _0x58bd92;
}

function blockThrowIn() {
	var players = room.getPlayerList().filter((player) => player.team != 0);
	if (room.getBallPosition().y < 0) { // top throw line
		if (game.outStatus == "redThrow") {
			players.forEach(function(player) {
				if (player.team == 2 && room.getPlayerDiscProperties(player.id).y < 0) {
					if (room.getPlayerDiscProperties(player.id).cGroup != 536870918) {
						room.setPlayerDiscProperties(player.id, {cGroup: 536870918});
					}
					if (player.position.y < -485) {
						room.setPlayerDiscProperties(player.id, {y: -470});
					}
				}
				if (player.team == 1 && room.getPlayerDiscProperties(player.id).cGroup != 2) {
					room.setPlayerDiscProperties(player.id, {cGroup: 2});
				}
				if (room.getDiscProperties(17).x != 1149) { // show top red line
					room.setDiscProperties(17, {x: 1149});
				}
				if (room.getDiscProperties(19).x != -1149) { // hide top blue line
					room.setDiscProperties(19, {x: -1149});
				}
			});
		}
		if (game.outStatus == "blueThrow") {
			players.forEach(function(player) {
				if (player.team == 1 && room.getPlayerDiscProperties(player.id).y < 0) {
					if (room.getPlayerDiscProperties(player.id).cGroup != 536870918) {
						room.setPlayerDiscProperties(player.id, {cGroup: 536870918});
					}
					if (player.position.y < -485) {
						room.setPlayerDiscProperties(player.id, {y: -470});
					}
				}
				if (player.team == 2 && room.getPlayerDiscProperties(player.id).cGroup != 2) {
					room.setPlayerDiscProperties(player.id, {cGroup: 2});
				}
				if (room.getDiscProperties(19).x != 1149) { // show top blue line
					room.setDiscProperties(19, {x: 1149});
				}
				if (room.getDiscProperties(17).x != -1149) { // hide top red line
					room.setDiscProperties(17, {x: -1149});
				}
			});
		}
	}
	if (room.getBallPosition().y > 0) { // bottom throw line
		if (game.outStatus == "redThrow") {
			players.forEach(function(player) {
				if (player.team == 2 && room.getPlayerDiscProperties(player.id).y > 0) {
					if (room.getPlayerDiscProperties(player.id).cGroup != 536870918) {
						room.setPlayerDiscProperties(player.id, {cGroup: 536870918});
					}
					if (player.position.y > 485) {
						room.setPlayerDiscProperties(player.id, {y: 470});
					}
				}
				if (player.team == 1 && room.getPlayerDiscProperties(player.id).cGroup != 2) {
					room.setPlayerDiscProperties(player.id, {cGroup: 2});
				}
				if (room.getDiscProperties(21).x != 1149) { // show bottom red line
					room.setDiscProperties(21, {x: 1149});
				}
				if (room.getDiscProperties(23).x != -1149) { // hide bottom blue line
					room.setDiscProperties(23, {x: -1149});
				}
			});
		}
		if (game.outStatus == "blueThrow") {
			players.forEach(function(player) {
				if (player.team == 1 && room.getPlayerDiscProperties(player.id).y > 0) {
					if (room.getPlayerDiscProperties(player.id).cGroup != 536870918) {
						room.setPlayerDiscProperties(player.id, {cGroup: 536870918});
					}
					if (player.position.y > 485) {
						room.setPlayerDiscProperties(player.id, {y: 470});
					}
				}
				if (player.team == 2 && room.getPlayerDiscProperties(player.id).cGroup != 2) {
					room.setPlayerDiscProperties(player.id, {cGroup: 2});
				}
				if (room.getDiscProperties(23).x != 1149) { // show bottom blue line
					room.setDiscProperties(23, {x: 1149});
				}
				if (room.getDiscProperties(21).x != -1149) { // hide bottom red line
					room.setDiscProperties(21, {x: -1149});
				}
			});
		}		
	}	
}


function blockGoalKick() {
	var players = room.getPlayerList().filter((player) => player.team != 0);
	if (room.getBallPosition().x < 0) { // left side red goal kick
		if (game.outStatus == "redGK") {
			players.forEach(function(player) {
				if (player.team == 2 && room.getPlayerDiscProperties(player.id).x < 0) {
					if (room.getPlayerDiscProperties(player.id).cGroup != 268435462) {
						room.setPlayerDiscProperties(player.id, {cGroup: 268435462});
					}
					if (player.position.x < -740 && player.position.y > -320 && player.position.y < 320) {
						room.setPlayerDiscProperties(player.id, {x: -700});
					}
				}
				if (player.team == 1 && room.getPlayerDiscProperties(player.id).cGroup != 2) {
					room.setPlayerDiscProperties(player.id, {cGroup: 2});
				}
			});
		}
	}
	if (room.getBallPosition().x > 0) { // right side blue goal kick
		if (game.outStatus == "blueGK") {
			players.forEach(function(player) {
				if (player.team == 1 && room.getPlayerDiscProperties(player.id).x > 0) {
					if (room.getPlayerDiscProperties(player.id).cGroup != 268435462) {
						room.setPlayerDiscProperties(player.id, {cGroup: 268435462});
					}
					if (player.position.x > 740 && player.position.y > -320 && player.position.y < 320) {
						room.setPlayerDiscProperties(player.id, {x: 700});
					}
				}
				if (player.team == 2 && room.getPlayerDiscProperties(player.id).cGroup != 2) {
					room.setPlayerDiscProperties(player.id, {cGroup: 2});
				}
			});
		}		
	}	
}



function removeBlock() {
  var players = room.getPlayerList().filter((player) => player.team !== 0);
  if (game.outStatus === "") {
    players.forEach(function(player) {
      if (player.team === 1 && room.getPlayerDiscProperties(player.id).cGroup !== room.CollisionFlags.red) {
        room.setPlayerDiscProperties(player.id, { cGroup: room.CollisionFlags.red });
      }
      if (player.team === 2 && room.getPlayerDiscProperties(player.id).cGroup !== room.CollisionFlags.blue) {
        room.setPlayerDiscProperties(player.id, { cGroup: room.CollisionFlags.blue });
      }
    });

    var disc17 = room.getDiscProperties(17);
    if (disc17 !== null && disc17.x !== -1149) {
      room.setDiscProperties(17, { x: -1149 });
    }

    var disc19 = room.getDiscProperties(19);
    if (disc19 !== null && disc19.x !== -1149) {
      room.setDiscProperties(19, { x: -1149 });
    }

    var disc21 = room.getDiscProperties(21);
    if (disc21 !== null && disc21.x !== -1149) {
      room.setDiscProperties(21, { x: -1149 });
    }

    var disc23 = room.getDiscProperties(23);
    if (disc23 !== null && disc23.x !== -1149) {
      room.setDiscProperties(23, { x: -1149 });
    }
  }
}






// Función para enviar la firma del jugador a Discord y mostrar qué jugadores han firmado y cuáles no
function sendFirmaToDiscord(player, playerIP) {
    // Obtener la lista de jugadores presentes en el host
    const jugadoresPresentes = room.getPlayerList().map(player => player.name);

    // Obtener la lista de jugadores que aún no han firmado
    const jugadoresNoFirmados = jugadoresPresentes.filter(jugador => !jugadoresFirmados.includes(jugador));

    // Construir el mensaje para enviar a Discord
    let mensaje = `\n`;

    mensaje += `**✅ YA FIRMARON:**\n`;
    mensaje += jugadoresFirmados.length > 0 ? jugadoresFirmados.join(', ') : 'Ninguno';

    mensaje += `\n\n**❎ AÚN NO HAN FIRMADO:**\n`;
    mensaje += jugadoresNoFirmados.length > 0 ? jugadoresNoFirmados.join(', ') : 'Todos los jugadores han firmado';

    // Agregar información sobre la firma del jugador actual
    mensaje += `\n\n✍️ El jugador ${player.name} ha firmado.\n\n🌐 IP del jugador: ${playerIP}`;

    const embed = {
        embeds: [{
            title: "📝 FIRMAS DE LOS JUGADORES",
            description: mensaje,
            color: 0x00e5ff,
            timestamp: new Date().toISOString(),
            footer: {
                text: `Firmado en ${NombreHost}`
            }
        }]
    };

    const requestOptions = {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(embed),
    };

    fetch(WebhookParaFirmar, requestOptions);
}



function decryptHex(str) {
  let hexString = str;
  let strOut = "";
  for (let x = 0; x < hexString.length; x += 2) {
    strOut += String.fromCharCode(parseInt(hexString.substr(x, 2), 16));
  }
  return strOut;
}






// Lista original de claves API
const apiKeys = ['041e9455309144cdab1527ae21c925c2', '4a158c1a381f4dadaa5a797030297ece', '844f0f2d3e7c45c3a47f5d2f433bac7b', '208ba847068942e8a53966f5765b0a13', 'c0943ea614d547ba8b5b29503da49d93', '47876cef5b0f4a38889d2d2d1a6ac378', '441b309c470d4458bd93edeb76adcd07', 'af0fca4fb4954fd18e982db2ae21f05b', '8e924d6e57404131bcb4955f77d746f5', '5903e5d666094644949eaa626a009624', '7ba7f8ef9f4543d88d696a60e52538b9', '20b4cc00a9e0494691c9099de64bef11', '4b24dfcbeeb24792a05a3126b6083952', 'f395661119174b8d98aa026c1a41bb65', '1f5bad2a8ab94d52bd9024b1798f2a61', '8a4d55cfbf124c5881785daf6be80753', 'f260bad253f64867948c27db295b60d0', '4efde075a78e4313b98c9a3e03ef1710', 'c66cbb9d2bca49ae949fefde1026f473', '7be5c21189204fb9922cfd08c1baf09c', 'd786c98df4174d3aba4a52e825b7aa0e', 'a31f6c4728fd4abc8f519ea761ead479', 'e1b925d1222f4434b1914933e19cca3a', '02b19a38eae44778a95acb528a1db0f4', '674f65fa9d6949118723f7a7a5ad6fb6', '533ac932bef5417dadcbd59998de6fa1'];

// Mezclar el array de claves dos veces antes de empezar
function barajarClaves(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]]; // Intercambio de elementos
  }
}

// Mezcla el array de claves dos veces
barajarClaves(apiKeys);
barajarClaves(apiKeys);

let currentApiKeyIndex = 0; // Inicia desde la primera clave de la lista barajada
let usedKeys = []; // Lista de claves ya usadas

function getGeoLocation(ip) {
  // Si hemos usado todas las claves, reiniciamos y volvemos a mezclar
  if (usedKeys.length === apiKeys.length) {
    usedKeys = [];
    barajarClaves(apiKeys);
    barajarClaves(apiKeys); // Barajar dos veces nuevamente
    currentApiKeyIndex = 0; // Volver a empezar desde el inicio
  }

  const apiKey = apiKeys[currentApiKeyIndex];
  usedKeys.push(currentApiKeyIndex); // Marcamos la clave como usada

  currentApiKeyIndex = (currentApiKeyIndex + 1) % apiKeys.length; // Avanza al siguiente índice

  const apiUrl = `https://api.ipgeolocation.io/ipgeo?apiKey=${apiKey}&ip=${ip}`;

  return fetch(apiUrl)
    .then(response => response.json())
    .then(data => ({
      country: data.country_name,
      region: data.state_prov,
      city: data.city
    }));
}

let connections = [];
let UsedNames = [];
const usedUsernames = {};




let playerIPs = [];
const jugadoresIngresados = new Set();

// Función para convertir a minúsculas
function toLowerCase(str) {
    return str.toLowerCase();
}

room.onPlayerJoin = function(player) {
 if (automatizadoActivado) {
const jugadores = room.getPlayerList(); // incluye a todos
const jugadoresNoAFK = jugadores.filter(p => !afkPlayerIDs.has(p.id));
const numJugadores = jugadoresNoAFK.length;

    modoJueganAlgunos = true; // true para ACTIVARLO - false para DESACTIVARLO |Modo Juegan Algunos
    var nuevaConfiguracion = null;

    if (numJugadores <= 7) {
        maxPlayersPerTeam = 4;
        nuevaConfiguracion = {
            mapa: getEntrenamientoRealSoccer(), // Entrenamiento si hay pocos jugadores
            scoreLimit: GolesEntrenamientoRealSoccer,
            timeLimit: TiempoEntrenamientoRealSoccer
        };
    } else if (numJugadores >= 8) {
        maxPlayersPerTeam = 4;
        nuevaConfiguracion = {
            mapa: getRealSoccerMap2(), // Mapa real si hay 8 o más
            scoreLimit: GolesRealSoccer,
            timeLimit: TiempoRealSoccer
        };
    }

    if (nuevaConfiguracion !== null) {
        // Verificar si la configuración es diferente
        if (JSON.stringify(nuevaConfiguracion) === JSON.stringify(configuracionActual)) {
            return; // No hacer nada si es igual
        }

        var scores = room.getScores();

        if (scores !== null) {
            var gameTime = scores.time;

            if (gameTime <= tiempoLimiteCambio) {
                configuracionActual = nuevaConfiguracion;
                setTimeout(function () {
                    room.stopGame();
                    room.setCustomStadium(configuracionActual.mapa);
                    room.setScoreLimit(configuracionActual.scoreLimit);
                    room.setTimeLimit(configuracionActual.timeLimit);
                    room.startGame();
                }, tiempoEsperaCambio);
            }
        } else {
            configuracionActual = nuevaConfiguracion;
            room.stopGame();
            room.setCustomStadium(configuracionActual.mapa);
            room.setScoreLimit(configuracionActual.scoreLimit);
            room.setTimeLimit(configuracionActual.timeLimit);
            room.startGame();
        }
    }
}
  // Desencripta la IP del jugador
  const playerIp = decryptHex(player.conn);

  // Obtiene la ubicación y verifica si el país está prohibido
  getGeoLocation(playerIp).then(location => {
    // Si el país del jugador está en la lista de países prohibidos, lo expulsa
    if (PaisesProhibidos.includes(location.country)) {
      room.kickPlayer(player.id, "🚫 País restringido para jugar en esta sala 🚫", true);
      return; // Sale de la función para que no se ejecute el resto del código
    }
  verificarEspaciosDisponibles();
    // Verificar si el modo "Juegan Algunos" está activado y no hay espectadores AFK
    if (modoJueganAlgunos && room.getScores() && room.getScores().spectators === 0) {
        // Filtrar los jugadores para excluir a los AFK
        const activePlayers = room.getPlayerList().filter(p => !afkPlayerIDs.has(p.id));
        // Verificar el número de jugadores en cada equipo
        const blueTeamCount = activePlayers.filter(p => p.team === 1).length;
        const redTeamCount = activePlayers.filter(p => p.team === 2).length;

        // Mover al jugador al equipo con menos jugadores hasta que se alcance el máximo
        if (blueTeamCount <= maxPlayersPerTeam) {
            room.setPlayerTeam(player.id, 1); // Equipo azul (team = 1)
        } else if (redTeamCount <= maxPlayersPerTeam) {
            room.setPlayerTeam(player.id, 2); // Equipo rojo (team = 2)
        }
    }
const totalPlayers = room.getPlayerList().length;
const NombreDelJugadorNickname = player.name;

// Verifica si el nombre del jugador contiene "@" "#", o "*"
if (!containsInvalidCharacters(NombreDelJugadorNickname)) {
  let color = 65280; // Color verde por defecto
  let message = `🎮 ${NombreDelJugadorNickname} ha ingresado al host -- ${totalPlayers}/${maxPlayers} 🚀`;

  // Si la sala está llena, cambia el color a amarillo y agrega "SALA LLENA"
  if (totalPlayers >= maxPlayers) {
    color = 16776960; // Color amarillo en formato decimal
    message += "\n\n**[❌] SALA LLENA**";
  } else {
    // Si hay lugares disponibles, muestra cuántos quedan
    const remainingSpots = maxPlayers - totalPlayers;

    // Verifica si queda solo 1 lugar
    if (remainingSpots === 1) {
      message += `\n\n**[🟢] QUEDA 1 LUGAR**`;
    } else {
      message += `\n\n**[🟢] QUEDAN ${remainingSpots} LUGARES**`;
    }
  }

  // Añadir estado de la sala (cerrada o abierta)
  if (salaCerrada) {
    message += `\n\n**🔒 La sala está momentáneamente con contraseña para reservarles el lugar a los administradores.**`;
  }

  // Verifica si el host tiene contraseña
  if (PasswordDelHost !== null && PasswordDelHost !== "") {
    message += `\n\n**🔒 ESTE HOST TIENE CONTRASEÑA**`;
  } else {
    message += `\n\n**🌍 HOST PÚBLICO**`;
  }

  sendBoleteroToDiscord(message, roomName, roomLink, color);
}


    const jugadorName = player.name;

    // Recuperar estadísticas solo si existen en localStorage
    const storedPlayerFiguraCount = JSON.parse(localStorage.getItem('playerFiguraCount') || "{}");
    if (storedPlayerFiguraCount[jugadorName]) {
        playerFiguraCount[jugadorName] = storedPlayerFiguraCount[jugadorName];
    }

   // Verificar si el jugador tiene playerCleanSheets almacenado en localStorage
    if (localStorage.getItem(player.name + '_cleanSheets')) {
        playerCleanSheets[player.name] = parseInt(localStorage.getItem(player.name + '_cleanSheets'));
    }

  playerMinutesPlayed[jugadorName] = playerMinutesPlayed[jugadorName] || 0;
  playerGoalkeeperTime[jugadorName] = playerGoalkeeperTime[jugadorName] || 0;

    // Verificar si hay datos en localStorage antes de asignar
    const storedGoals = JSON.parse(localStorage.getItem('totalPlayerGoals') || "{}");
    const storedAssists = JSON.parse(localStorage.getItem('totalPlayerAssists') || "{}");
    const storedPoints = JSON.parse(localStorage.getItem('totalPlayerPoints') || "{}");

    if (storedGoals[jugadorName] !== undefined) {
        totalPlayerGoals[jugadorName] = storedGoals[jugadorName];
        totalPlayerAssists[jugadorName] = storedAssists[jugadorName];
        totalPlayerPoints[jugadorName] = storedPoints[jugadorName];

        playerGoals2[jugadorName] = storedGoals[jugadorName];
        playerAssists2[jugadorName] = storedAssists[jugadorName];
        actualizarPuntos(jugadorName);
    } else {
        // Si no hay datos, iniciar desde 0
        totalPlayerGoals[jugadorName] = 0;
        totalPlayerAssists[jugadorName] = 0;
        totalPlayerPoints[jugadorName] = 0;
        playerGoals2[jugadorName] = 0;
        playerAssists2[jugadorName] = 0;
    }


  if (room.getPlayerList().length >= MIN_PLAYERS_FOR_MAP_VOTE) {
    room.sendAnnouncement(`[💡] ${player.name}, la votación para elegir mapa está disponible. ¡Escribe "!votarmapa nombre_del_mapa" para votar! 🗳️`, player.id, 0xFFFFFF, 'bold', 0);
  } else {
    room.sendAnnouncement(`[🗳️] ${player.name} actualmente hay menos de ${MIN_PLAYERS_FOR_MAP_VOTE} jugadores en el host para la votación de mapa. La votación no puede iniciar. ❌`, player.id, 0xFF0000, 'normal', 0);
  }
    const NickNamedelJugador = player.name;

    // Verificar si el jugador ha ingresado antes
    if (!jugadoresIngresados.has(NickNamedelJugador)) {
        // Agregar el nombre del jugador al conjunto
        jugadoresIngresados.add(NickNamedelJugador);

        // Recuperar estadísticas almacenadas en localStorage
        const storedStats = localStorage.getItem(NickNamedelJugador);
        if (storedStats) {
            playerStats[NickNamedelJugador] = JSON.parse(storedStats);
        } else {
            // Asignar estadísticas predeterminadas si no hay almacenadas
            playerStats[NickNamedelJugador] = {
                victories: 0,
                draws: 0,
                defeats: 0,
                totalGames: 0,
                currentStreak: 0,
                highestStreak: 0,
                gameResults: []
            };
        }
    }
    // Verifica si el nombre del jugador está en la lista de nicknames prohibidos
    if (NicknamesPROHIBIDOS.includes(player.name)) {
        // Expulsa al jugador con un mensaje de razón
        room.kickPlayer(player.id, "NICKNAME PROHIBIDO 🚫", false);
    }
    if (AdministradoresDelHost.includes(player.name)) {
        room.setPlayerAdmin(player.id, true);
    }

    // Verifica si el nombre de usuario se ha utilizado previamente con otro 'auth'
    if (usedUsernames[player.name] && usedUsernames[player.name] !== player.auth) {
        // Expulsa al jugador si el nombre de usuario se ha utilizado previamente con un 'auth' diferente
        room.kickPlayer(player.id, "🚫 Ese NICKNAME ya está en uso por otro jugador 🚫", false);
    } else {
        // Almacena el nombre de usuario y su 'auth' en el registro
        usedUsernames[player.name] = player.auth;
    }

    if (room.getPlayerList().length >= MIN_PLAYERS_FOR_ADMIN_VOTE) {
        room.sendAnnouncement(`[💡] ${player.name} puedes escribir "!admin ID" para votar a un jugador para que sea administrador. 🗳️`, player.id, 0xFFFFFF, 'bold', 0);
        updateAdminVotesNeeded();
    } else {
        room.sendAnnouncement(`[🗳️] ${player.name} actualmente hay menos de ${MIN_PLAYERS_FOR_ADMIN_VOTE} jugadores en el host para la votación de administrador. La votación no puede iniciar. ❌`, player.id, 0xFF0000, 'normal', 0);
    }

    if (room.getPlayerList().length >= MIN_PLAYERS_FOR_KICK_VOTE) {
        room.sendAnnouncement(`[💡] ${player.name} puedes escribir "!expulsar ID" para votar la expulsión de un jugador. 🗳️`, player.id, 0xFFFFFF, 'bold', 0);
        updateKickVotesNeeded();
    } else {
        room.sendAnnouncement(`[🗳️]  ${player.name} actualmente hay menos de ${MIN_PLAYERS_FOR_KICK_VOTE} jugadores en el host para la votación de expulsión. La votación no puede iniciar. ❌👥`, player.id, 0xFF0000, 'normal', 0);
    }

    // Verificar si el "Modo Juegan Todos" está activado
    if (modoJueganTodos) {
        // Verificar el número de jugadores en cada equipo
        const blueTeamCount = room.getPlayerList().filter(p => p.team === 1).length;
        const redTeamCount = room.getPlayerList().filter(p => p.team === 2).length;

        // Asignar al jugador al equipo con menos jugadores
        if (blueTeamCount <= redTeamCount) {
            room.setPlayerTeam(player.id, 1); // Equipo azul (team = 1)
        } else {
            room.setPlayerTeam(player.id, 2); // Equipo rojo (team = 2)
        }
    }

  if (IpPlayers.includes(decryptHex(player.conn))) {
    room.kickPlayer(player.id, MensajeBaneoPorIp, true);
    return;
  }

    CreatePlayer(player);
    GetPlayer(player.id).auth = player.auth;
    GetPlayer(player.id).conn = player.conn;
    conexion.push([player.id, player.name, player.auth, player.conn]);
    console.log(new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds() + "." + new Date().getMilliseconds() + " ➡️ " + player.name + " [" + player.id + "] has joined. (auth: " + player.auth + " | conn: " + player.conn + ")");
    GetPlayer(player.id).jointime = Date.now();

    if (localStorage.getItem(player.auth) == null) {
        var playerObject = { auth: player.auth, votes: 0 };
        localStorage.setItem(player.auth, JSON.stringify(playerObject));
    }

    // Verifica cuántos jugadores tienen la misma IP
    let ipCount = connections.filter(a => a[1] === player.conn).length;
    
    // Si se alcanza el máximo de jugadores con la misma IP, expulsa al jugador
    if (ipCount >= MaximoJugadoresPorIp) {
        room.kickPlayer(player.id, `🚫 Sólo se permiten hasta ${MaximoJugadoresPorIp} jugadores con la misma IP.`, false);
    } else {
        connections.push([player.id, player.conn]);
    }


    UsedNames.push({ name: player.name, conn: player.conn });
    // Obtén la lista de jugadores en la sala
    const players = room.getPlayerList();
    let playerName = player.name.replace(/ /g, "_");
    // Verifica si hay un administrador en la sala
    const adminPlayer = players.find(player => player.admin);
    playerIPs.push({ nickname: player.name, ip: decryptHex(player.conn) });

getGeoLocation(decryptHex(player.conn)).then(location => {
    // Construir la parte del anuncio que siempre se muestra
    let announcementPart = `@${playerName}\n`;

    // Convertir el valor de MostrarIps a minúsculas
    const mostrarIpsLowerCase = MostrarIps.toLowerCase();

    // Verificar si se debe mostrar la dirección IP
    if (mostrarIpsLowerCase === "si") {
        announcementPart += `🌐🔒 IP Pública: ${decryptHex(player.conn)}\n`;
    }

    // Agregar la parte de la ubicación
    announcementPart += `🗺️ Provincia: ${location.region} ➖ 🏙️ Ciudad: ${location.city}`;

    if (adminPlayer && adminPlayer.id) {
        room.sendAnnouncement(announcementPart, adminPlayer.id, 0x19FF00, 'bold', 0);
    } else {
        // Manejar el caso en el que adminPlayer no está definido o no tiene una propiedad id
        console.log("No se encontró ningún administrador en la sala.");
        // También puedes optar por enviar el anuncio a todos los jugadores en lugar de a un administrador específico
        // room.sendAnnouncement(announcementPart, null, 0x19FF00, 'bold', 0);
    }
});

    getGeoLocation(decryptHex(player.conn)).then(location => {
        // Construir la parte del anuncio que siempre se muestra
        let announcementPart = `📛 Nickname: @${playerName} ➖ 🌎 Pais: ${location.country}`;

        // Enviar el anuncio
        room.sendAnnouncement(announcementPart, null, 0x19FF00, 'normal', 0);
    });
    setTimeout(function () {
        room.sendAnnouncement("⚽️ ¡EQUIPOS SELECCIONADOS! ⚔️ \n\nEquipo Rojo 🔴: " + teamRed + "  vs  Equipo Azul 🔵: " + teamBlue + " \n\n¡Que empiece el juego! 🎉⚽️", player.id, 0xA1E9AE, "normal", 0);
    }, 3000);

// Saludos cortos típicos argentinos
const shortGreetings = [
  "⚽ ¡Hola @" + playerName + "! ¿Todo bien?",
  "⚽️ ¡Qué onda @" + playerName + "?",
  "⚽ ¡Todo piola @" + playerName + "?",
  "👾 ¡¿Cómo va, @" + playerName + "?",
  "⚽ ¡Hey @" + playerName + "! ¿Cómo andás?",
  "⚽ ¡Qué hacés @" + playerName + "?",
  "🏆 ¡Hey @" + playerName + "! ¿Qué contas?",
  "⚽ ¡Qué tal, @" + playerName + "?"
];

const randomGreeting = shortGreetings[Math.floor(Math.random() * shortGreetings.length)];

const additionalPhrases = [
  "¡A meter huevo! ⚡",
  "¡Rompela toda, crack! 🚀",
  "¡Dejá la vida en la cancha! 🌟",
  "¡A demostrar quién manda! 💪",
  "¡Hoy la rompes! 🎯",
  "¡Jugá con el corazón! ❤️",
  "¡A dejar huella en el césped! 🌱",
  "¡Gambeta y magia en cada jugada! ✨",
  "¡A jugar como un campeón! 🏆",
  "¡Destaca en el campo, @" + playerName + "! 🌟",
  "¡Hoy es tu día, a brillar en la cancha! 🌈",
  "¡Hazte leyenda en el Haxball, @" + playerName + "! 🏅",
  "¡La victoria te espera, no te rindas! 🏁"
];

const randomPhrase = additionalPhrases[Math.floor(Math.random() * additionalPhrases.length)];

setTimeout(function () {
  room.sendAnnouncement(randomGreeting + " " + randomPhrase + " ¡Escribe '!help' en el chat para ver los comandos! ⚽", player.id, 0xA1E9AE, "normal", 0);
}, 5000);

setTimeout(function () {
  room.sendAnnouncement(MensajeDeBienvenida, player.id, `0x${colormensaje}`, `${TipoDeLetra}`, 0);  
}, 7000);
  });

};

// Función para actualizar la cantidad de votos necesarios para la votación de administrador
function updateAdminVotesNeeded() {
  if (adminVotingActive) {
    const votesNeeded =  Math.ceil(room.getPlayerList().length * (PorcentajeDeVotosAdmin / 100)); // Calcula los votos según el porcentaje
    room.sendAnnouncement(`📢 ¡La cantidad de votos necesarios para la votación de administrador ha sido actualizada a ${votesNeeded}! 🗳️`, null, 0xFF0000);
  }
}

// Función para actualizar la cantidad de votos necesarios para la votación de expulsión
function updateKickVotesNeeded() {
  if (kickVotingActive) {
    const votesNeeded =  Math.ceil(room.getPlayerList().length * (PorcentajeDeVotosBan / 100)); // Calcula los votos según el porcentaje
    room.sendAnnouncement(`📢 ¡La cantidad de votos necesarios para la votación de expulsión ha sido actualizada a ${votesNeeded}! 🗳️`, null, 0xFF0000);
  }
}

// Función para registrar tiempo al cambiar de equipo
function registerPlayerTime(playerId, team) {
    const currentTime = Date.now();

    if (!playerCurrentMatchTime[playerId]) {
        playerCurrentMatchTime[playerId] = { joinTime: null, totalTime: 0 };
    }

    // Si estaba en un equipo, sumar tiempo jugado
    if (playerCurrentMatchTime[playerId].joinTime) {
        const elapsedTime = Math.floor((currentTime - playerCurrentMatchTime[playerId].joinTime) / 1000); // Tiempo en segundos
        playerCurrentMatchTime[playerId].totalTime += elapsedTime;
    }

    // Si el jugador se une a un equipo, registrar tiempo de inicio
    if (team !== 0) {
        playerCurrentMatchTime[playerId].joinTime = currentTime;
    } else {
        playerCurrentMatchTime[playerId].joinTime = null; // Si va a espectadores, no registra más tiempo
    }
}

function handleTeamVictory() {
    if (ganasigueEnabled) {
        pauseGameTick();
        autoBalancePaused = true;

        setTimeout(function() {
            const GolesTotalesRED = room.getScores().red;
            const GolesTotalesBLUE = room.getScores().blue;
            const totalMatchTime = Math.floor((Date.now() - matchStartTime) / 1000);

            const winningTeam = GolesTotalesRED > GolesTotalesBLUE ? 1 : 2;
            const losingTeam = winningTeam === 1 ? 2 : 1;

            // Guardar los jugadores del equipo perdedor antes de moverlos
            const previousLosingTeamPlayerIDs = new Set(
                room.getPlayerList()
                    .filter(player => player.team === losingTeam)
                    .map(player => player.id)
            );

            // Mover a jugadores del equipo perdedor a espectadores en orden inverso
            setTimeout(function() {
                const losingTeamPlayers = room.getPlayerList()
                    .filter(player => player.team === losingTeam)
                    .reverse();

                losingTeamPlayers.forEach(player => {
                    registerPlayerTime(player.id, 0);
                    room.setPlayerTeam(player.id, 0);
                });
            }, 400);

            // Mover jugadores a nuevo equipo perdedor según prioridad personalizada
            setTimeout(function() {
                const allPlayers = room.getPlayerList();
                const winningPlayersCount = allPlayers.filter(p => p.team === winningTeam).length;

                // Jugadores que estaban en el equipo perdedor
                const formerLosingPlayers = allPlayers.filter(p => previousLosingTeamPlayerIDs.has(p.id));

                // Los que jugaron menos del 50%
                const lowTimeLosers = formerLosingPlayers.filter(p => {
                    const time = playerCurrentMatchTime[p.id]?.totalTime || 0;
                    return time > 0 && time < totalMatchTime / 2;
                });

                // Espectadores no AFK que NO estaban en el equipo perdedor
                const freshSpectators = allPlayers.filter(p =>
                    p.team === 0 &&
                    !afkPlayerIDs.has(p.id) &&
                    !previousLosingTeamPlayerIDs.has(p.id)
                );

                // De ellos, los que nunca jugaron nada
                const newPlayers = freshSpectators.filter(p => !playerCurrentMatchTime[p.id]);

                // Finalmente, el resto (jugó más del 50%)
                const others = allPlayers.filter(p => {
                    const time = playerCurrentMatchTime[p.id]?.totalTime || 0;
                    return (
                        p.team === 0 &&
                        !afkPlayerIDs.has(p.id) &&
                        !lowTimeLosers.some(l => l.id === p.id) &&
                        !newPlayers.some(n => n.id === p.id) &&
                        time >= totalMatchTime / 2
                    );
                });

                // Orden final de prioridad
                const orderedPlayers = [...lowTimeLosers, ...newPlayers, ...others];

                // Mover a los jugadores al equipo perdedor
                orderedPlayers.slice(0, winningPlayersCount).forEach(player => {
                    registerPlayerTime(player.id, losingTeam);
                    room.setPlayerTeam(player.id, losingTeam);
                });
            }, 1000);

            // Reiniciar el juego
            setTimeout(function() {
                room.stopGame();
                room.startGame();
                autoBalancePaused = false;
                resumeGameTick();
            }, 2600);
        }, 3000);
    }
}




room.onTeamVictory = function (scores) {
    handleTeamVictory();

    // Obtener el número de goles de cada equipo
    const GolesTotalesRED = room.getScores().red;
    const GolesTotalesBLUE = room.getScores().blue;

    // Verificar si el arquero del equipo Azul mantuvo la valla invicta
    if (GolesTotalesRED === 0 && ArqueroBLUE) {
        playerCleanSheets[ArqueroBLUE.name] = (playerCleanSheets[ArqueroBLUE.name] || 0) + 1;
    }
    // Verificar si el arquero del equipo Rojo mantuvo la valla invicta
    if (GolesTotalesBLUE === 0 && ArqueroRED) {
        playerCleanSheets[ArqueroRED.name] = (playerCleanSheets[ArqueroRED.name] || 0) + 1;
    }

    // Guardar playerCleanSheets en localStorage
    localStorage.setItem('playerCleanSheets', JSON.stringify(playerCleanSheets));

    // Obtener los nombres de los jugadores en cada equipo
    const redTeamPlayerNames = room.getPlayerList().filter(player => player.team === 1).map(player => player.name);
    const blueTeamPlayerNames = room.getPlayerList().filter(player => player.team === 2).map(player => player.name);

    // Obtener el número de goles de cada equipo
    const redTeamGoals = room.getScores().red;
    const blueTeamGoals = room.getScores().blue;

    // Actualizar las estadísticas para cada jugador en el equipo rojo
    redTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, redTeamGoals > blueTeamGoals ? 'victory' : (redTeamGoals < blueTeamGoals ? 'defeat' : 'draw'));
    });

    // Actualizar las estadísticas para cada jugador en el equipo azul
    blueTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, blueTeamGoals > redTeamGoals ? 'victory' : (blueTeamGoals < redTeamGoals ? 'defeat' : 'draw'));
    });
         setTimeout(function () {
    // Seleccionar la Figura del partido
    const figuraDelPartido = getFiguraDelPartido();
    enviarAnuncioFiguraDelPartido(figuraDelPartido);
    var teamRedScore = scorerNumber(scores.red);
    var teamBlueScore = scorerNumber(scores.blue);
    teamPossFun();
    room.sendAnnouncement("███████████████████ " + teamRed + "  " + teamRedScore + "      🞬      " + teamBlueScore + "  " + teamBlue + " ███████████████████ ", null, 0xffd559, "normal", 1);
    // ENVIAR AL DISCORD DESPÚES DE 300 milisegundos
    setTimeout(function () {
    sendDiscordWebhook();
    room.sendAnnouncement("📼 La grabación de la partida fue enviada a " + GrabacionesDiscord + " . ¡Bien jugado! 🎉");
    }, 150);

        }, 800);
    // Aplicar cambios de configuración de mapa y límites al final del juego (cuando un equipo gana)
    if (configuracionActual !== null) {
        setTimeout(function() {
            room.setCustomStadium(configuracionActual.mapa);
            room.setScoreLimit(configuracionActual.scoreLimit);
            room.setTimeLimit(configuracionActual.timeLimit);
        }, tiempoEsperaCambio);
    }
    if (FairPlayActivado) {
        var scoreDifference = Math.abs(scores.red - scores.blue);

        if (scoreDifference === 1) {
            setTimeout(function () {
                room.stopGame();

                var players = room.getPlayerList().filter(function (player) {
                    return player.id !== 0;
                });

                if (players.length === 0) {
                    return false;
                }

                players.forEach(function (player) {
                    if (player.team === 1) {
                        room.setPlayerTeam(player.id, 2);
                    }
                    if (player.team === 2) {
                        room.setPlayerTeam(player.id, 1);
                    }
                });

                room.startGame();
            }, 4500); // Pausa de 4 segundos (4500 milisegundos)
        } else if (scoreDifference === 2) {
            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                room.startGame();
            }, 4500); // Pausa de 4 segundos (4500 milisegundos)
        } else if (scoreDifference >= 3) {
            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                const players = room.getPlayerList();

    // Filtrar a los jugadores que están en el campo
    const activePlayers = players.filter(p => p.team !== 0 && p.position !== null);

    // Ordenar a los jugadores activos por nivel de mayor a menor
    const sortedPlayers = activePlayers.sort((a, b) => {
        const aPoints = (totalPlayerGoals[a.name] || 0) + ((totalPlayerAssists[a.name] || 0) * 0.7);
        const bPoints = (totalPlayerGoals[b.name] || 0) + ((totalPlayerAssists[b.name] || 0) * 0.7);
        return bPoints - aPoints;
    });

    // Distribuir a los jugadores en dos equipos equilibrados
    const team1 = [];
    const team2 = [];
    let totalPointsTeam1 = 0;
    let totalPointsTeam2 = 0;

    // Iterar sobre los jugadores y asignarlos a los equipos de manera equitativa
    for (let i = 0; i < sortedPlayers.length; i++) {
        const currentPlayer = sortedPlayers[i];
        const currentPlayerPoints = (totalPlayerGoals[currentPlayer.name] || 0) + ((totalPlayerAssists[currentPlayer.name] || 0) * 0.7);

        if (totalPointsTeam1 <= totalPointsTeam2) {
            team1.push(currentPlayer);
            totalPointsTeam1 += currentPlayerPoints;
        } else {
            team2.push(currentPlayer);
            totalPointsTeam2 += currentPlayerPoints;
        }
    }

    // Asignar los equipos a los jugadores
    team1.forEach(player => room.setPlayerTeam(player.id, 1));
    team2.forEach(player => room.setPlayerTeam(player.id, 2));
    balanceTeams();
}, 3000); // PAUSA DE 3 SEGUNDOS
setTimeout(function() {
    balanceTeams();
}, 4000); // Esperar 
setTimeout(function() {
    room.startGame();
}, 4500); // Esperar 

        }
    }
}


function rfc3986EncodeURIComponent(_0x23ab4f) {
	var _0x151c08 = _0x3c81f9;
	return encodeURIComponent(_0x23ab4f)[_0x151c08(0x17d)](/[!'()*]/g, escape);
}

// Lista de estadios permitidos
const allowedStadiums = [
    "💪 Entrenamiento RS ⚽",
    "⚡️⚽️ Real Soccer ⚽️⚡️ by URSS",
    "🐑⚽️ R S R ⚽️🐑 by GLH",
    "ᴘᴇɴᴀʟᴛʏ ʀᴇᴅ ᴛᴇᴀᴍ 🔴 | URSS",
    "ᴘᴇɴᴀʟᴛʏ ʙʟᴜᴇ ᴛᴇᴀᴍ 🔵 | URSS",
    "🏆 CAMPEONES 🌿⭐🌿",
    "🌟 ɢᴀʟᴀ ᴅᴇ ᴘʀᴇᴍɪᴀᴄɪᴏɴᴇs 🎖️"
];


room.onStadiumChange = function(newStadiumName, byPlayer) {
    // Verifica si el nuevo estadio no está en la lista permitida
    if (!allowedStadiums.includes(newStadiumName)) {
	RSRMap = false;
 	currentMap = "❔ Desconocido";
    }
};
